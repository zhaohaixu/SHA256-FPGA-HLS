-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_done is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sha256_buf_ce0 : OUT STD_LOGIC;
    sha256_buf_we0 : OUT STD_LOGIC;
    sha256_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sha256_buf_ce1 : OUT STD_LOGIC;
    sha256_buf_we1 : OUT STD_LOGIC;
    sha256_buf_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sha256hash_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256_bits_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256_bits_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256_len : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hash_AWVALID : OUT STD_LOGIC;
    m_axi_hash_AWREADY : IN STD_LOGIC;
    m_axi_hash_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hash_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hash_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hash_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hash_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hash_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hash_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hash_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hash_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hash_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_WVALID : OUT STD_LOGIC;
    m_axi_hash_WREADY : IN STD_LOGIC;
    m_axi_hash_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_hash_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_WLAST : OUT STD_LOGIC;
    m_axi_hash_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_ARVALID : OUT STD_LOGIC;
    m_axi_hash_ARREADY : IN STD_LOGIC;
    m_axi_hash_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hash_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hash_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hash_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hash_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hash_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hash_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hash_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hash_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hash_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_RVALID : IN STD_LOGIC;
    m_axi_hash_RREADY : OUT STD_LOGIC;
    m_axi_hash_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_hash_RLAST : IN STD_LOGIC;
    m_axi_hash_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hash_BVALID : IN STD_LOGIC;
    m_axi_hash_BREADY : OUT STD_LOGIC;
    m_axi_hash_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hash_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hash_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    hash_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha256_done is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_4FE : STD_LOGIC_VECTOR (10 downto 0) := "10011111110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hash_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_2_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ptr_cmp_reg_1248 : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_22_reg_1312 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1312_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_2_reg_568 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_p_hash_fu_579_ap_ready : STD_LOGIC;
    signal grp_p_hash_fu_579_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_679_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_reg_1182 : STD_LOGIC_VECTOR (10 downto 0);
    signal hash_addr_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_5_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_730_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_48_i4_reg_1218 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_i6_reg_1223 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_866_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_reg_1228 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_i9_reg_1233 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_i1_reg_1238 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_i3_reg_1243 : STD_LOGIC_VECTOR (7 downto 0);
    signal ptr_cmp_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_cast3_fu_905_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_cast3_reg_1252 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_ioackin_m_axi_hash_AWREADY : STD_LOGIC;
    signal ap_predicate_op178_writereq_state10 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal i_3_fu_915_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1261 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_36_fu_935_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_reg_1266 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_950_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_reg_1271 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_fu_972_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_reg_1277 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_39_fu_991_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_1282 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_1001_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_reg_1287 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_fu_1011_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_reg_1292 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_1021_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_reg_1297 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_1031_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_reg_1302 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_fu_1035_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_1307 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state14_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_hash_WREADY : STD_LOGIC;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_4_fu_1099_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal hash_tmp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash_tmp_load_reg_1326 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state14 : STD_LOGIC;
    signal hash_tmp_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hash_tmp_ce0 : STD_LOGIC;
    signal hash_tmp_we0 : STD_LOGIC;
    signal hash_tmp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash_tmp_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal hash_tmp_ce1 : STD_LOGIC;
    signal hash_tmp_we1 : STD_LOGIC;
    signal hash_tmp_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_hash_fu_579_ap_start : STD_LOGIC;
    signal grp_p_hash_fu_579_ap_idle : STD_LOGIC;
    signal grp_p_hash_fu_579_sha256_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_p_hash_fu_579_sha256_buf_ce0 : STD_LOGIC;
    signal grp_p_hash_fu_579_sha256_buf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_p_hash_fu_579_sha256_buf_ce1 : STD_LOGIC;
    signal grp_p_hash_fu_579_sha256hash_0_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_sha256hash_1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_sha256hash_2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_sha256hash_3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_sha256hash_4_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_sha256hash_5_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_sha256hash_6_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_sha256hash_7_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_579_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_in_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_reg_454 : STD_LOGIC_VECTOR (3 downto 0);
    signal sha256hash_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_1_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_2_reg_485 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_3_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_4_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_5_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_6_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_7_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_545 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal n_assign_1_reg_557 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_p_hash_fu_579_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_9_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_13_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_17_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1080_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_hash_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_hash_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_48_i_fu_828_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_945_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_967_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_675_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_679_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_689_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_9_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_772_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_786_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_fu_800_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_25_fu_803_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_797_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_789_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_783_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_775_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_769_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256_bits_0_write_2_fu_822_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sha256_bits_0_write_1_fu_816_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sha256_bits_0_write_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_921_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i1_cast_fu_925_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_fu_929_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i7_fu_939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i9_fu_961_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_fu_1005_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i4_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast9_fu_1046_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_fu_1054_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_1067_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_cast8_fu_1077_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_cast7_fu_1085_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component p_hash IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce0 : OUT STD_LOGIC;
        sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce1 : OUT STD_LOGIC;
        sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256hash_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_done_hash_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    hash_tmp_U : component sha256_done_hash_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hash_tmp_address0,
        ce0 => hash_tmp_ce0,
        we0 => hash_tmp_we0,
        d0 => hash_tmp_d0,
        q0 => hash_tmp_q0,
        address1 => hash_tmp_address1,
        ce1 => hash_tmp_ce1,
        we1 => hash_tmp_we1,
        d1 => hash_tmp_d1);

    grp_p_hash_fu_579 : component p_hash
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_hash_fu_579_ap_start,
        ap_done => grp_p_hash_fu_579_ap_done,
        ap_idle => grp_p_hash_fu_579_ap_idle,
        ap_ready => grp_p_hash_fu_579_ap_ready,
        sha256_buf_address0 => grp_p_hash_fu_579_sha256_buf_address0,
        sha256_buf_ce0 => grp_p_hash_fu_579_sha256_buf_ce0,
        sha256_buf_q0 => sha256_buf_q0,
        sha256_buf_address1 => grp_p_hash_fu_579_sha256_buf_address1,
        sha256_buf_ce1 => grp_p_hash_fu_579_sha256_buf_ce1,
        sha256_buf_q1 => sha256_buf_q1,
        sha256hash_0_read => grp_p_hash_fu_579_sha256hash_0_read,
        sha256hash_1_read => grp_p_hash_fu_579_sha256hash_1_read,
        sha256hash_2_read => grp_p_hash_fu_579_sha256hash_2_read,
        sha256hash_3_read => grp_p_hash_fu_579_sha256hash_3_read,
        sha256hash_4_read => grp_p_hash_fu_579_sha256hash_4_read,
        sha256hash_5_read => grp_p_hash_fu_579_sha256hash_5_read,
        sha256hash_6_read => grp_p_hash_fu_579_sha256hash_6_read,
        sha256hash_7_read => grp_p_hash_fu_579_sha256hash_7_read,
        ap_return_0 => grp_p_hash_fu_579_ap_return_0,
        ap_return_1 => grp_p_hash_fu_579_ap_return_1,
        ap_return_2 => grp_p_hash_fu_579_ap_return_2,
        ap_return_3 => grp_p_hash_fu_579_ap_return_3,
        ap_return_4 => grp_p_hash_fu_579_ap_return_4,
        ap_return_5 => grp_p_hash_fu_579_ap_return_5,
        ap_return_6 => grp_p_hash_fu_579_ap_return_6,
        ap_return_7 => grp_p_hash_fu_579_ap_return_7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((ptr_cmp_reg_1248 = ap_const_lv1_1) or (tmp_2_fu_909_p2 = ap_const_lv1_1)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((ptr_cmp_reg_1248 = ap_const_lv1_1) or (tmp_2_fu_909_p2 = ap_const_lv1_1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_hash_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_hash_AWREADY <= ap_const_logic_0;
            else
                if (((ap_predicate_op178_writereq_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    if ((ap_const_boolean_0 = ap_block_state10_io)) then 
                        ap_reg_ioackin_m_axi_hash_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_hash_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_hash_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_hash_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_hash_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_22_reg_1312_pp0_iter1_reg = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_hash_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_hash_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_hash_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_p_hash_fu_579_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_hash_fu_579_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_1)))) then 
                    grp_p_hash_fu_579_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_hash_fu_579_ap_ready = ap_const_logic_1)) then 
                    grp_p_hash_fu_579_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_in_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_0))) then 
                i_0_in_reg_445 <= i_fu_702_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_in_reg_445 <= j_cast_fu_693_p1;
            end if; 
        end if;
    end process;

    i_1_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_p_hash_fu_579_ap_done = ap_const_logic_1) and (ptr_cmp_reg_1248 = ap_const_lv1_0))) then 
                i_1_reg_545 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_1_reg_545 <= i_3_reg_1261;
            end if; 
        end if;
    end process;

    i_2_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_22_fu_1093_p2 = ap_const_lv1_0))) then 
                i_2_reg_568 <= i_4_fu_1099_p2;
            elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((ptr_cmp_reg_1248 = ap_const_lv1_1) or (tmp_2_fu_909_p2 = ap_const_lv1_1)))) then 
                i_2_reg_568 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j1_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_reg_1206 = ap_const_lv1_1) and (tmp_7_fu_724_p2 = ap_const_lv1_0))) then 
                j1_reg_454 <= j_1_fu_730_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_p_hash_fu_579_ap_done = ap_const_logic_1))) then 
                j1_reg_454 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    n_assign_1_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_p_hash_fu_579_ap_done = ap_const_logic_1) and (ptr_cmp_reg_1248 = ap_const_lv1_0))) then 
                n_assign_1_reg_557 <= ap_const_lv6_18;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_assign_1_reg_557 <= j_2_reg_1307;
            end if; 
        end if;
    end process;

    sha256hash_1_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_724_p2 = ap_const_lv1_1) and (tmp_5_reg_1206 = ap_const_lv1_1))) then 
                sha256hash_1_reg_475 <= reg_640;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then 
                sha256hash_1_reg_475 <= sha256hash_1_read;
            end if; 
        end if;
    end process;

    sha256hash_2_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_724_p2 = ap_const_lv1_1) and (tmp_5_reg_1206 = ap_const_lv1_1))) then 
                sha256hash_2_reg_485 <= reg_645;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then 
                sha256hash_2_reg_485 <= sha256hash_2_read;
            end if; 
        end if;
    end process;

    sha256hash_3_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_724_p2 = ap_const_lv1_1) and (tmp_5_reg_1206 = ap_const_lv1_1))) then 
                sha256hash_3_reg_495 <= reg_650;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then 
                sha256hash_3_reg_495 <= sha256hash_3_read;
            end if; 
        end if;
    end process;

    sha256hash_4_reg_505_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_724_p2 = ap_const_lv1_1) and (tmp_5_reg_1206 = ap_const_lv1_1))) then 
                sha256hash_4_reg_505 <= reg_655;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then 
                sha256hash_4_reg_505 <= sha256hash_4_read;
            end if; 
        end if;
    end process;

    sha256hash_5_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_724_p2 = ap_const_lv1_1) and (tmp_5_reg_1206 = ap_const_lv1_1))) then 
                sha256hash_5_reg_515 <= reg_660;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then 
                sha256hash_5_reg_515 <= sha256hash_5_read;
            end if; 
        end if;
    end process;

    sha256hash_6_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_724_p2 = ap_const_lv1_1) and (tmp_5_reg_1206 = ap_const_lv1_1))) then 
                sha256hash_6_reg_525 <= reg_665;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then 
                sha256hash_6_reg_525 <= sha256hash_6_read;
            end if; 
        end if;
    end process;

    sha256hash_7_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_724_p2 = ap_const_lv1_1) and (tmp_5_reg_1206 = ap_const_lv1_1))) then 
                sha256hash_7_reg_535 <= reg_670;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then 
                sha256hash_7_reg_535 <= sha256hash_7_read;
            end if; 
        end if;
    end process;

    sha256hash_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_724_p2 = ap_const_lv1_1) and (tmp_5_reg_1206 = ap_const_lv1_1))) then 
                sha256hash_reg_465 <= reg_635;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then 
                sha256hash_reg_465 <= sha256hash_0_read;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                hash_addr_reg_1187 <= tmp_s_fu_675_p1(32 - 1 downto 0);
                tmp_10_reg_1182 <= tmp_10_fu_679_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_22_reg_1312 = ap_const_lv1_0))) then
                hash_tmp_load_reg_1326 <= hash_tmp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ptr_cmp_reg_1248 = ap_const_lv1_0))) then
                    i_1_cast3_reg_1252(2 downto 0) <= i_1_cast3_fu_905_p1(2 downto 0);
                i_3_reg_1261 <= i_3_fu_915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ptr_cmp_reg_1248 = ap_const_lv1_0) and (tmp_2_fu_909_p2 = ap_const_lv1_0))) then
                j_2_reg_1307 <= j_2_fu_1035_p2;
                    tmp_27_reg_1277(2 downto 0) <= tmp_27_fu_972_p3(2 downto 0);
                tmp_36_reg_1266 <= tmp_36_fu_935_p1;
                tmp_39_reg_1282 <= tmp_39_fu_991_p1;
                tmp_40_reg_1287 <= tmp_40_fu_1001_p1;
                tmp_41_reg_1292 <= tmp_41_fu_1011_p1;
                tmp_42_reg_1297 <= tmp_42_fu_1021_p1;
                tmp_43_reg_1302 <= tmp_43_fu_1031_p1;
                tmp_4_reg_1271 <= tmp_4_fu_950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_7_fu_724_p2 = ap_const_lv1_1) or (tmp_5_reg_1206 = ap_const_lv1_0)))) then
                ptr_cmp_reg_1248 <= ptr_cmp_fu_900_p2;
                tmp_34_reg_1228 <= tmp_34_fu_866_p1;
                tmp_48_i1_reg_1238 <= x_assign_1_fu_762_p3(23 downto 16);
                tmp_48_i3_reg_1243 <= x_assign_1_fu_762_p3(31 downto 24);
                tmp_48_i4_reg_1218 <= sha256_bits_0_write_1_fu_816_p2(23 downto 16);
                tmp_48_i6_reg_1223 <= sha256_bits_0_write_fu_811_p2(31 downto 24);
                tmp_48_i9_reg_1233 <= x_assign_1_fu_762_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_p_hash_fu_579_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_p_hash_fu_579_ap_done = ap_const_logic_1)))) then
                reg_635 <= grp_p_hash_fu_579_ap_return_0;
                reg_640 <= grp_p_hash_fu_579_ap_return_1;
                reg_645 <= grp_p_hash_fu_579_ap_return_2;
                reg_650 <= grp_p_hash_fu_579_ap_return_3;
                reg_655 <= grp_p_hash_fu_579_ap_return_4;
                reg_660 <= grp_p_hash_fu_579_ap_return_5;
                reg_665 <= grp_p_hash_fu_579_ap_return_6;
                reg_670 <= grp_p_hash_fu_579_ap_return_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_22_reg_1312 <= tmp_22_fu_1093_p2;
                tmp_22_reg_1312_pp0_iter1_reg <= tmp_22_reg_1312;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1))) then
                tmp_5_reg_1206 <= tmp_5_fu_719_p2;
            end if;
        end if;
    end process;
    i_1_cast3_reg_1252(4 downto 3) <= "00";
    tmp_27_reg_1277(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_hash_BVALID, ap_CS_fsm_state10, tmp_2_fu_909_p2, ptr_cmp_reg_1248, ap_enable_reg_pp0_iter2, ap_CS_fsm_state21, ap_CS_fsm_state3, grp_p_hash_fu_579_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state2, tmp_5_fu_719_p2, tmp_5_reg_1206, exitcond_fu_708_p2, ap_CS_fsm_state4, tmp_7_fu_724_p2, ap_block_state10_io, tmp_22_fu_1093_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_1) and (tmp_5_fu_719_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_p_hash_fu_579_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_7_fu_724_p2 = ap_const_lv1_1) or (tmp_5_reg_1206 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_p_hash_fu_579_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((ptr_cmp_reg_1248 = ap_const_lv1_1) or (tmp_2_fu_909_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ptr_cmp_reg_1248 = ap_const_lv1_0) and (tmp_2_fu_909_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_22_fu_1093_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_22_fu_1093_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_hash_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_io_assign_proc : process(ap_sig_ioackin_m_axi_hash_AWREADY, ap_predicate_op178_writereq_state10)
    begin
                ap_block_state10_io <= ((ap_sig_ioackin_m_axi_hash_AWREADY = ap_const_logic_0) and (ap_predicate_op178_writereq_state10 = ap_const_boolean_1));
    end process;

        ap_block_state14_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(tmp_22_reg_1312_pp0_iter1_reg, ap_sig_ioackin_m_axi_hash_WREADY)
    begin
                ap_block_state16_io <= ((ap_sig_ioackin_m_axi_hash_WREADY = ap_const_logic_0) and (tmp_22_reg_1312_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state16_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state14_assign_proc : process(tmp_22_fu_1093_p2)
    begin
        if ((tmp_22_fu_1093_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_hash_BVALID, ap_CS_fsm_state21)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_hash_BVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op178_writereq_state10_assign_proc : process(tmp_2_fu_909_p2, ptr_cmp_reg_1248)
    begin
                ap_predicate_op178_writereq_state10 <= ((ptr_cmp_reg_1248 = ap_const_lv1_1) or (tmp_2_fu_909_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(m_axi_hash_BVALID, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_hash_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_hash_AWREADY_assign_proc : process(m_axi_hash_AWREADY, ap_reg_ioackin_m_axi_hash_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_hash_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_hash_AWREADY <= m_axi_hash_AWREADY;
        else 
            ap_sig_ioackin_m_axi_hash_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_hash_WREADY_assign_proc : process(m_axi_hash_WREADY, ap_reg_ioackin_m_axi_hash_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_hash_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_hash_WREADY <= m_axi_hash_WREADY;
        else 
            ap_sig_ioackin_m_axi_hash_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_708_p2 <= "1" when (i_0_in_reg_445 = ap_const_lv32_7) else "0";
    grp_p_hash_fu_579_ap_start <= grp_p_hash_fu_579_ap_start_reg;

    grp_p_hash_fu_579_sha256hash_0_read_assign_proc : process(sha256hash_0_read, ap_CS_fsm_state3, ap_CS_fsm_state9, sha256hash_reg_465)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_p_hash_fu_579_sha256hash_0_read <= sha256hash_reg_465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_hash_fu_579_sha256hash_0_read <= sha256hash_0_read;
        else 
            grp_p_hash_fu_579_sha256hash_0_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_p_hash_fu_579_sha256hash_1_read_assign_proc : process(sha256hash_1_read, ap_CS_fsm_state3, ap_CS_fsm_state9, sha256hash_1_reg_475)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_p_hash_fu_579_sha256hash_1_read <= sha256hash_1_reg_475;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_hash_fu_579_sha256hash_1_read <= sha256hash_1_read;
        else 
            grp_p_hash_fu_579_sha256hash_1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_p_hash_fu_579_sha256hash_2_read_assign_proc : process(sha256hash_2_read, ap_CS_fsm_state3, ap_CS_fsm_state9, sha256hash_2_reg_485)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_p_hash_fu_579_sha256hash_2_read <= sha256hash_2_reg_485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_hash_fu_579_sha256hash_2_read <= sha256hash_2_read;
        else 
            grp_p_hash_fu_579_sha256hash_2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_p_hash_fu_579_sha256hash_3_read_assign_proc : process(sha256hash_3_read, ap_CS_fsm_state3, ap_CS_fsm_state9, sha256hash_3_reg_495)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_p_hash_fu_579_sha256hash_3_read <= sha256hash_3_reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_hash_fu_579_sha256hash_3_read <= sha256hash_3_read;
        else 
            grp_p_hash_fu_579_sha256hash_3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_p_hash_fu_579_sha256hash_4_read_assign_proc : process(sha256hash_4_read, ap_CS_fsm_state3, ap_CS_fsm_state9, sha256hash_4_reg_505)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_p_hash_fu_579_sha256hash_4_read <= sha256hash_4_reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_hash_fu_579_sha256hash_4_read <= sha256hash_4_read;
        else 
            grp_p_hash_fu_579_sha256hash_4_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_p_hash_fu_579_sha256hash_5_read_assign_proc : process(sha256hash_5_read, ap_CS_fsm_state3, ap_CS_fsm_state9, sha256hash_5_reg_515)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_p_hash_fu_579_sha256hash_5_read <= sha256hash_5_reg_515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_hash_fu_579_sha256hash_5_read <= sha256hash_5_read;
        else 
            grp_p_hash_fu_579_sha256hash_5_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_p_hash_fu_579_sha256hash_6_read_assign_proc : process(sha256hash_6_read, ap_CS_fsm_state3, ap_CS_fsm_state9, sha256hash_6_reg_525)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_p_hash_fu_579_sha256hash_6_read <= sha256hash_6_reg_525;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_hash_fu_579_sha256hash_6_read <= sha256hash_6_read;
        else 
            grp_p_hash_fu_579_sha256hash_6_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_p_hash_fu_579_sha256hash_7_read_assign_proc : process(sha256hash_7_read, ap_CS_fsm_state3, ap_CS_fsm_state9, sha256hash_7_reg_535)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_p_hash_fu_579_sha256hash_7_read <= sha256hash_7_reg_535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_hash_fu_579_sha256hash_7_read <= sha256hash_7_read;
        else 
            grp_p_hash_fu_579_sha256hash_7_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hash_blk_n_AW_assign_proc : process(m_axi_hash_AWREADY, ap_CS_fsm_state10, tmp_2_fu_909_p2, ptr_cmp_reg_1248)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((ptr_cmp_reg_1248 = ap_const_lv1_1) or (tmp_2_fu_909_p2 = ap_const_lv1_1)))) then 
            hash_blk_n_AW <= m_axi_hash_AWREADY;
        else 
            hash_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    hash_blk_n_B_assign_proc : process(m_axi_hash_BVALID, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            hash_blk_n_B <= m_axi_hash_BVALID;
        else 
            hash_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    hash_blk_n_W_assign_proc : process(m_axi_hash_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_22_reg_1312_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_22_reg_1312_pp0_iter1_reg = ap_const_lv1_0))) then 
            hash_blk_n_W <= m_axi_hash_WREADY;
        else 
            hash_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    hash_tmp_address0_assign_proc : process(ap_CS_fsm_state10, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, tmp_9_fu_956_p1, tmp_3_fu_1041_p1, ap_CS_fsm_state11, tmp_15_fu_1062_p1, ap_CS_fsm_state12, tmp_19_fu_1080_p1, tmp_24_fu_1105_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hash_tmp_address0 <= tmp_24_fu_1105_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_tmp_address0 <= tmp_19_fu_1080_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_tmp_address0 <= tmp_15_fu_1062_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_tmp_address0 <= tmp_3_fu_1041_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hash_tmp_address0 <= tmp_9_fu_956_p1(5 - 1 downto 0);
        else 
            hash_tmp_address0 <= "XXXXX";
        end if; 
    end process;


    hash_tmp_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state13, tmp_11_fu_980_p1, ap_CS_fsm_state11, tmp_13_fu_1049_p1, ap_CS_fsm_state12, tmp_17_fu_1072_p1, tmp_21_fu_1088_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_tmp_address1 <= tmp_21_fu_1088_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_tmp_address1 <= tmp_17_fu_1072_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_tmp_address1 <= tmp_13_fu_1049_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hash_tmp_address1 <= tmp_11_fu_980_p1(5 - 1 downto 0);
        else 
            hash_tmp_address1 <= "XXXXX";
        end if; 
    end process;


    hash_tmp_ce0_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_io, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            hash_tmp_ce0 <= ap_const_logic_1;
        else 
            hash_tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_tmp_ce1_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_io, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            hash_tmp_ce1 <= ap_const_logic_1;
        else 
            hash_tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_tmp_d0_assign_proc : process(ap_CS_fsm_state10, tmp_36_reg_1266, tmp_40_reg_1287, tmp_42_reg_1297, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12, tmp_37_fu_945_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_tmp_d0 <= tmp_42_reg_1297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_tmp_d0 <= tmp_40_reg_1287;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_tmp_d0 <= tmp_36_reg_1266;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hash_tmp_d0 <= tmp_37_fu_945_p1;
        else 
            hash_tmp_d0 <= "XXXXXXXX";
        end if; 
    end process;


    hash_tmp_d1_assign_proc : process(ap_CS_fsm_state10, tmp_39_reg_1282, tmp_41_reg_1292, tmp_43_reg_1302, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12, tmp_38_fu_967_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_tmp_d1 <= tmp_43_reg_1302;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_tmp_d1 <= tmp_41_reg_1292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_tmp_d1 <= tmp_39_reg_1282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hash_tmp_d1 <= tmp_38_fu_967_p1;
        else 
            hash_tmp_d1 <= "XXXXXXXX";
        end if; 
    end process;


    hash_tmp_we0_assign_proc : process(ap_CS_fsm_state10, tmp_2_fu_909_p2, ptr_cmp_reg_1248, ap_block_state10_io, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ptr_cmp_reg_1248 = ap_const_lv1_0) and (tmp_2_fu_909_p2 = ap_const_lv1_0)))) then 
            hash_tmp_we0 <= ap_const_logic_1;
        else 
            hash_tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_tmp_we1_assign_proc : process(ap_CS_fsm_state10, tmp_2_fu_909_p2, ptr_cmp_reg_1248, ap_block_state10_io, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ptr_cmp_reg_1248 = ap_const_lv1_0) and (tmp_2_fu_909_p2 = ap_const_lv1_0)))) then 
            hash_tmp_we1 <= ap_const_logic_1;
        else 
            hash_tmp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_cast3_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_545),5));
    i_3_fu_915_p2 <= std_logic_vector(unsigned(i_1_reg_545) + unsigned(ap_const_lv3_1));
    i_4_fu_1099_p2 <= std_logic_vector(unsigned(i_2_reg_568) + unsigned(ap_const_lv6_1));
    i_fu_702_p2 <= std_logic_vector(unsigned(i_0_in_reg_445) + unsigned(ap_const_lv32_1));
    j_1_fu_730_p2 <= std_logic_vector(unsigned(j1_reg_454) + unsigned(ap_const_lv4_1));
    j_2_fu_1035_p2 <= std_logic_vector(signed(ap_const_lv6_38) + signed(n_assign_1_reg_557));
    j_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_689_p1),32));
    j_fu_689_p1 <= sha256_len(3 - 1 downto 0);
    m_axi_hash_ARADDR <= ap_const_lv32_0;
    m_axi_hash_ARBURST <= ap_const_lv2_0;
    m_axi_hash_ARCACHE <= ap_const_lv4_0;
    m_axi_hash_ARID <= ap_const_lv1_0;
    m_axi_hash_ARLEN <= ap_const_lv32_0;
    m_axi_hash_ARLOCK <= ap_const_lv2_0;
    m_axi_hash_ARPROT <= ap_const_lv3_0;
    m_axi_hash_ARQOS <= ap_const_lv4_0;
    m_axi_hash_ARREGION <= ap_const_lv4_0;
    m_axi_hash_ARSIZE <= ap_const_lv3_0;
    m_axi_hash_ARUSER <= ap_const_lv1_0;
    m_axi_hash_ARVALID <= ap_const_logic_0;
    m_axi_hash_AWADDR <= hash_addr_reg_1187;
    m_axi_hash_AWBURST <= ap_const_lv2_0;
    m_axi_hash_AWCACHE <= ap_const_lv4_0;
    m_axi_hash_AWID <= ap_const_lv1_0;
    m_axi_hash_AWLEN <= ap_const_lv32_20;
    m_axi_hash_AWLOCK <= ap_const_lv2_0;
    m_axi_hash_AWPROT <= ap_const_lv3_0;
    m_axi_hash_AWQOS <= ap_const_lv4_0;
    m_axi_hash_AWREGION <= ap_const_lv4_0;
    m_axi_hash_AWSIZE <= ap_const_lv3_0;
    m_axi_hash_AWUSER <= ap_const_lv1_0;

    m_axi_hash_AWVALID_assign_proc : process(ap_CS_fsm_state10, ap_predicate_op178_writereq_state10, ap_reg_ioackin_m_axi_hash_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_hash_AWREADY = ap_const_logic_0) and (ap_predicate_op178_writereq_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_hash_AWVALID <= ap_const_logic_1;
        else 
            m_axi_hash_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_hash_BREADY_assign_proc : process(m_axi_hash_BVALID, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_hash_BVALID = ap_const_logic_1))) then 
            m_axi_hash_BREADY <= ap_const_logic_1;
        else 
            m_axi_hash_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_hash_RREADY <= ap_const_logic_0;
    m_axi_hash_WDATA <= hash_tmp_load_reg_1326;
    m_axi_hash_WID <= ap_const_lv1_0;
    m_axi_hash_WLAST <= ap_const_logic_0;
    m_axi_hash_WSTRB <= ap_const_lv1_1;
    m_axi_hash_WUSER <= ap_const_lv1_0;

    m_axi_hash_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_22_reg_1312_pp0_iter1_reg, ap_reg_ioackin_m_axi_hash_WREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_axi_hash_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_22_reg_1312_pp0_iter1_reg = ap_const_lv1_0))) then 
            m_axi_hash_WVALID <= ap_const_logic_1;
        else 
            m_axi_hash_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ptr_cmp_fu_900_p2 <= "1" when (tmp_10_reg_1182 = ap_const_lv11_4FE) else "0";
    sha256_bits_0_write_1_fu_816_p2 <= std_logic_vector(unsigned(tmp_25_fu_803_p3) + unsigned(tmp_32_fu_797_p1));
    sha256_bits_0_write_2_fu_822_p2 <= std_logic_vector(unsigned(tmp_14_fu_789_p3) + unsigned(tmp_30_fu_783_p1));
    sha256_bits_0_write_fu_811_p2 <= std_logic_vector(unsigned(sha256_bits_0_read) + unsigned(tmp_18_fu_741_p2));

    sha256_buf_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state2, tmp_5_reg_1206, exitcond_fu_708_p2, ap_CS_fsm_state4, tmp_7_fu_724_p2, grp_p_hash_fu_579_sha256_buf_address0, tmp_fu_697_p1, tmp_6_fu_714_p1, tmp_8_fu_736_p1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_address0 <= ap_const_lv64_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_address0 <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_address0 <= ap_const_lv64_3C(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_7_fu_724_p2 = ap_const_lv1_1) or (tmp_5_reg_1206 = ap_const_lv1_0)))) then 
            sha256_buf_address0 <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_reg_1206 = ap_const_lv1_1) and (tmp_7_fu_724_p2 = ap_const_lv1_0))) then 
            sha256_buf_address0 <= tmp_8_fu_736_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_0))) then 
            sha256_buf_address0 <= tmp_6_fu_714_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sha256_buf_address0 <= tmp_fu_697_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sha256_buf_address0 <= grp_p_hash_fu_579_sha256_buf_address0;
        else 
            sha256_buf_address0 <= "XXXXXX";
        end if; 
    end process;


    sha256_buf_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, grp_p_hash_fu_579_sha256_buf_address1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_address1 <= ap_const_lv64_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_address1 <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_address1 <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha256_buf_address1 <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sha256_buf_address1 <= grp_p_hash_fu_579_sha256_buf_address1;
        else 
            sha256_buf_address1 <= "XXXXXX";
        end if; 
    end process;


    sha256_buf_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state2, tmp_5_reg_1206, exitcond_fu_708_p2, ap_CS_fsm_state4, tmp_7_fu_724_p2, grp_p_hash_fu_579_sha256_buf_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_7_fu_724_p2 = ap_const_lv1_1) or (tmp_5_reg_1206 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_reg_1206 = ap_const_lv1_1) and (tmp_7_fu_724_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_0)))) then 
            sha256_buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sha256_buf_ce0 <= grp_p_hash_fu_579_sha256_buf_ce0;
        else 
            sha256_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, grp_p_hash_fu_579_sha256_buf_ce1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sha256_buf_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sha256_buf_ce1 <= grp_p_hash_fu_579_sha256_buf_ce1;
        else 
            sha256_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_5_reg_1206, exitcond_fu_708_p2, ap_CS_fsm_state4, tmp_7_fu_724_p2, tmp_48_i6_reg_1223, tmp_48_i9_reg_1233, tmp_48_i3_reg_1243, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_48_i_fu_828_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_d0 <= tmp_48_i3_reg_1243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_d0 <= tmp_48_i9_reg_1233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_d0 <= tmp_48_i6_reg_1223;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_7_fu_724_p2 = ap_const_lv1_1) or (tmp_5_reg_1206 = ap_const_lv1_0)))) then 
            sha256_buf_d0 <= tmp_48_i_fu_828_p2;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_reg_1206 = ap_const_lv1_1) and (tmp_7_fu_724_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_0)))) then 
            sha256_buf_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sha256_buf_d0 <= ap_const_lv8_80;
        else 
            sha256_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sha256_buf_d1_assign_proc : process(ap_CS_fsm_state4, tmp_48_i4_reg_1218, tmp_34_reg_1228, tmp_48_i1_reg_1238, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, sha256_bits_0_write_2_fu_822_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_d1 <= tmp_48_i1_reg_1238;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_d1 <= tmp_34_reg_1228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_d1 <= tmp_48_i4_reg_1218;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha256_buf_d1 <= sha256_bits_0_write_2_fu_822_p2(15 downto 8);
        else 
            sha256_buf_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sha256_buf_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_5_reg_1206, exitcond_fu_708_p2, ap_CS_fsm_state4, tmp_7_fu_724_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_7_fu_724_p2 = ap_const_lv1_1) or (tmp_5_reg_1206 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_reg_1206 = ap_const_lv1_1) and (tmp_7_fu_724_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_708_p2 = ap_const_lv1_0)))) then 
            sha256_buf_we0 <= ap_const_logic_1;
        else 
            sha256_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_we1_assign_proc : process(tmp_5_reg_1206, ap_CS_fsm_state4, tmp_7_fu_724_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_7_fu_724_p2 = ap_const_lv1_1) or (tmp_5_reg_1206 = ap_const_lv1_0))))) then 
            sha256_buf_we1 <= ap_const_logic_1;
        else 
            sha256_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_679_p0 <= hash_offset;
    tmp_10_fu_679_p1 <= tmp_10_fu_679_p0(11 - 1 downto 0);
    tmp_11_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_972_p3),64));
        tmp_12_cast9_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1271),4));

    tmp_12_fu_775_p3 <= (tmp_26_fu_772_p1 & ap_const_lv3_0);
    tmp_13_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_cast9_fu_1046_p1),64));
    tmp_14_fu_789_p3 <= (tmp_31_fu_786_p1 & ap_const_lv3_0);
    tmp_15_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_1054_p3),64));
    tmp_16_fu_1067_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(i_1_cast3_reg_1252));
    tmp_17_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1067_p2),64));
        tmp_18_cast8_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_reg_1277),5));

    tmp_18_fu_741_p2 <= std_logic_vector(shift_left(unsigned(sha256_len),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_19_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_cast8_fu_1077_p1),64));
        tmp_20_cast7_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1271),5));

    tmp_20_fu_769_p1 <= sha256_bits_0_read(8 - 1 downto 0);
    tmp_21_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_cast7_fu_1085_p1),64));
    tmp_22_fu_1093_p2 <= "1" when (i_2_reg_568 = ap_const_lv6_20) else "0";
    tmp_24_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_568),64));
    tmp_25_fu_803_p3 <= (tmp_33_fu_800_p1 & ap_const_lv3_0);
    tmp_26_fu_772_p1 <= sha256_len(5 - 1 downto 0);
    tmp_27_fu_972_p3 <= (ap_const_lv1_1 & i_1_reg_545);
    tmp_28_fu_1054_p3 <= (ap_const_lv2_2 & i_1_reg_545);
    tmp_2_fu_909_p2 <= "1" when (i_1_reg_545 = ap_const_lv3_4) else "0";
    tmp_30_fu_783_p1 <= sha256_bits_0_read(16 - 1 downto 0);
    tmp_31_fu_786_p1 <= sha256_len(13 - 1 downto 0);
    tmp_32_fu_797_p1 <= sha256_bits_0_read(24 - 1 downto 0);
    tmp_33_fu_800_p1 <= sha256_len(21 - 1 downto 0);
    tmp_34_fu_866_p1 <= x_assign_1_fu_762_p3(8 - 1 downto 0);
    tmp_35_fu_921_p1 <= n_assign_1_reg_557(5 - 1 downto 0);
    tmp_36_fu_935_p1 <= tmp_i6_fu_929_p2(8 - 1 downto 0);
    tmp_37_fu_945_p1 <= tmp_i7_fu_939_p2(8 - 1 downto 0);
    tmp_38_fu_967_p1 <= tmp_i9_fu_961_p2(8 - 1 downto 0);
    tmp_39_fu_991_p1 <= tmp_i1_fu_985_p2(8 - 1 downto 0);
    tmp_3_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_545),64));
    tmp_40_fu_1001_p1 <= tmp_i2_fu_995_p2(8 - 1 downto 0);
    tmp_41_fu_1011_p1 <= tmp_i3_fu_1005_p2(8 - 1 downto 0);
    tmp_42_fu_1021_p1 <= tmp_i4_fu_1015_p2(8 - 1 downto 0);
    tmp_43_fu_1031_p1 <= tmp_i5_fu_1025_p2(8 - 1 downto 0);
    tmp_48_i_fu_828_p2 <= std_logic_vector(unsigned(tmp_12_fu_775_p3) + unsigned(tmp_20_fu_769_p1));
    tmp_4_fu_950_p2 <= (i_1_reg_545 xor ap_const_lv3_4);
    tmp_5_fu_719_p2 <= "1" when (unsigned(sha256_len) > unsigned(ap_const_lv32_37)) else "0";
    tmp_6_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_702_p2),64));
    tmp_7_fu_724_p2 <= "1" when (j1_reg_454 = ap_const_lv4_8) else "0";
    tmp_89_i_fu_757_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(sha256_bits_1_read));
    tmp_8_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_454),64));
    tmp_9_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_950_p2),64));
    tmp_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_689_p1),64));
    tmp_i1_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_921_p1),32));
    tmp_i1_fu_985_p2 <= std_logic_vector(shift_right(unsigned(reg_650),to_integer(unsigned('0' & tmp_i1_cast_fu_925_p1(31-1 downto 0)))));
    tmp_i2_fu_995_p2 <= std_logic_vector(shift_right(unsigned(reg_655),to_integer(unsigned('0' & tmp_i1_cast_fu_925_p1(31-1 downto 0)))));
    tmp_i3_fu_1005_p2 <= std_logic_vector(shift_right(unsigned(reg_660),to_integer(unsigned('0' & tmp_i1_cast_fu_925_p1(31-1 downto 0)))));
    tmp_i4_fu_1015_p2 <= std_logic_vector(shift_right(unsigned(reg_665),to_integer(unsigned('0' & tmp_i1_cast_fu_925_p1(31-1 downto 0)))));
    tmp_i5_fu_1025_p2 <= std_logic_vector(shift_right(unsigned(reg_670),to_integer(unsigned('0' & tmp_i1_cast_fu_925_p1(31-1 downto 0)))));
    tmp_i6_fu_929_p2 <= std_logic_vector(shift_right(unsigned(reg_635),to_integer(unsigned('0' & tmp_i1_cast_fu_925_p1(31-1 downto 0)))));
    tmp_i7_fu_939_p2 <= std_logic_vector(shift_right(unsigned(reg_640),to_integer(unsigned('0' & tmp_i1_cast_fu_925_p1(31-1 downto 0)))));
    tmp_i9_fu_961_p2 <= std_logic_vector(shift_right(unsigned(reg_645),to_integer(unsigned('0' & tmp_i1_cast_fu_925_p1(31-1 downto 0)))));
    tmp_i_9_fu_752_p2 <= "1" when (unsigned(sha256_bits_0_read) > unsigned(tmp_i_fu_746_p2)) else "0";
    tmp_i_fu_746_p2 <= (tmp_18_fu_741_p2 xor ap_const_lv32_FFFFFFFF);
    tmp_s_fu_675_p0 <= hash_offset;
        tmp_s_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_675_p0),64));

    x_assign_1_fu_762_p3 <= 
        tmp_89_i_fu_757_p2 when (tmp_i_9_fu_752_p2(0) = '1') else 
        sha256_bits_1_read;
end behav;
