-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_hash is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sha256_buf_ce0 : OUT STD_LOGIC;
    sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sha256_buf_ce1 : OUT STD_LOGIC;
    sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sha256hash_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sha256hash_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of p_hash is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv7_71 : STD_LOGIC_VECTOR (6 downto 0) := "1110001";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal K_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal K_ce0 : STD_LOGIC;
    signal K_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_321 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal h1_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_1_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_430 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_1_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_2_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_1_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_1_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_2_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_1_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal exitcond_reg_1528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state9_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal tmp_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1443 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_1443_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_539_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_reg_1447 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_reg_1463 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_568_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1473 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sha256_buf_load_reg_1478 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256_buf_load_1_reg_1483 : STD_LOGIC_VECTOR (7 downto 0);
    signal K_load_reg_1498 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_i_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_i_reg_1503 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1508 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_1513 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal a_fu_841_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_reg_1528_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal W_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_load_reg_1542 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_fu_1037_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_reg_1557 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_1043_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_reg_1562 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_fu_1054_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_1567 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_reg_1572 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp19_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp19_reg_1582 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_1184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_1587 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_1_fu_1291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal a_1_fu_1301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal W_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_ce0 : STD_LOGIC;
    signal W_we0 : STD_LOGIC;
    signal W_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_ce1 : STD_LOGIC;
    signal W_we1 : STD_LOGIC;
    signal ap_phi_mux_x_assign_phi_fu_325_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_434_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_25_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_i_cast_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sum4_i_cast_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal tmp_39_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal tmp_47_i_fu_594_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_535_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_i_fu_552_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum2_i_fu_574_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum4_i_fu_584_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_615_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_i1_fu_605_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_47_fu_637_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i1_i_fu_627_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_48_fu_659_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i4_i_fu_649_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_51_i_i_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i6_i_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i3_i_fu_641_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_i_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_i_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_737_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_i_i4_fu_727_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_50_fu_759_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i1_i7_fu_749_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_51_fu_781_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_i4_i1_fu_771_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_i_i6_fu_741_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i6_i1_fu_785_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i3_i9_fu_763_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_85_fu_805_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_i_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_i_fu_799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_i_fu_823_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_853_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_fu_864_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_36_fu_875_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_886_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_53_fu_907_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_i2_fu_897_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_54_fu_929_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_i1_i1_fu_919_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_98_i_fu_941_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_41_fu_951_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i3_i1_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i_i1_fu_911_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_977_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i_i3_fu_967_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_fu_999_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i1_i2_fu_989_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_101_i_fu_1011_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_42_fu_1021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i3_i2_fu_1003_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i_i2_fu_981_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_i_fu_961_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_i_fu_1031_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_1049_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i7_fu_1070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_i1_fu_1076_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_86_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp20_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_i1_fu_1082_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_1110_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_i5_fu_1100_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_59_fu_1132_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i1_i3_fu_1122_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_60_fu_1154_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i4_i2_fu_1144_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_51_i_i3_fu_1114_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i6_i2_fu_1158_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_fu_1166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i3_i3_fu_1136_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_i1_fu_1172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp18_fu_1178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_1199_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_i_i6_fu_1189_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_62_fu_1221_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i1_i4_fu_1211_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_63_fu_1243_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_i4_i3_fu_1233_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_i_i4_fu_1203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i6_i3_fu_1247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp21_fu_1255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i3_i4_fu_1225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i4_fu_1267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i8_fu_1273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_i1_fu_1279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_i1_fu_1261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp22_fu_1296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_i1_fu_1285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sha256hash_0_write_s_fu_1307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_1_write_s_fu_1312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_2_write_s_fu_1317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_3_write_s_fu_1322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_4_write_s_fu_1327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_5_write_s_fu_1332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_6_write_s_fu_1337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_7_write_s_fu_1342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component p_hash_K IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component p_hash_W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    K_U : component p_hash_K
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K_address0,
        ce0 => K_ce0,
        q0 => K_q0);

    W_U : component p_hash_W
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_address0,
        ce0 => W_ce0,
        we0 => W_we0,
        d0 => tmp_47_i_fu_594_p5,
        q0 => W_q0,
        address1 => W_address1,
        ce1 => W_ce1,
        we1 => W_we1,
        d1 => tmp_40_reg_1567,
        q1 => W_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1443 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (exitcond_reg_1528 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    b_1_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                b_1_reg_442 <= b_reg_397;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
                b_1_reg_442 <= a_1_fu_1301_p2;
            end if; 
        end if;
    end process;

    b_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443_pp0_iter1_reg = ap_const_lv1_0))) then 
                b_reg_397 <= a_fu_841_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_reg_397 <= sha256hash_0_read;
            end if; 
        end if;
    end process;

    c_1_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                c_1_reg_500 <= c_reg_386;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
                c_1_reg_500 <= b_1_reg_442;
            end if; 
        end if;
    end process;

    c_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443_pp0_iter1_reg = ap_const_lv1_0))) then 
                c_reg_386 <= b_reg_397;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_386 <= sha256hash_1_read;
            end if; 
        end if;
    end process;

    d1_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443_pp0_iter1_reg = ap_const_lv1_0))) then 
                d1_reg_365 <= d_reg_375;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d1_reg_365 <= sha256hash_3_read;
            end if; 
        end if;
    end process;

    d_1_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_1_reg_477 <= d1_reg_365;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
                d_1_reg_477 <= d_2_reg_488;
            end if; 
        end if;
    end process;

    d_2_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_2_reg_488 <= d_reg_375;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
                d_2_reg_488 <= c_1_reg_500;
            end if; 
        end if;
    end process;

    d_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443_pp0_iter1_reg = ap_const_lv1_0))) then 
                d_reg_375 <= c_reg_386;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d_reg_375 <= sha256hash_2_read;
            end if; 
        end if;
    end process;

    f_1_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                f_1_reg_419 <= f_reg_354;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
                f_1_reg_419 <= e_1_fu_1291_p2;
            end if; 
        end if;
    end process;

    f_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443_pp0_iter1_reg = ap_const_lv1_0))) then 
                f_reg_354 <= e_fu_829_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_reg_354 <= sha256hash_4_read;
            end if; 
        end if;
    end process;

    g_1_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                g_1_reg_464 <= g_reg_343;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
                g_1_reg_464 <= f_1_reg_419;
            end if; 
        end if;
    end process;

    g_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443_pp0_iter1_reg = ap_const_lv1_0))) then 
                g_reg_343 <= f_reg_354;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                g_reg_343 <= sha256hash_5_read;
            end if; 
        end if;
    end process;

    h1_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443_pp0_iter1_reg = ap_const_lv1_0))) then 
                h1_reg_408 <= h_reg_333;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h1_reg_408 <= sha256hash_7_read;
            end if; 
        end if;
    end process;

    h_1_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                h_1_reg_513 <= h1_reg_408;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
                h_1_reg_513 <= h_2_reg_453;
            end if; 
        end if;
    end process;

    h_2_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                h_2_reg_453 <= h_reg_333;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
                h_2_reg_453 <= g_1_reg_464;
            end if; 
        end if;
    end process;

    h_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443_pp0_iter1_reg = ap_const_lv1_0))) then 
                h_reg_333 <= g_reg_343;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_333 <= sha256hash_6_read;
            end if; 
        end if;
    end process;

    i_1_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_430 <= ap_const_lv7_10;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_1528 = ap_const_lv1_0))) then 
                i_1_reg_430 <= i_5_reg_1562;
            end if; 
        end if;
    end process;

    x_assign_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_1443 = ap_const_lv1_0))) then 
                x_assign_reg_321 <= i_reg_1473;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_assign_reg_321 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_1443 = ap_const_lv1_0))) then
                K_load_reg_1498 <= K_q0;
                sha256_buf_load_1_reg_1483 <= sha256_buf_q1;
                sha256_buf_load_reg_1478 <= sha256_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_reg_1528 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                W_load_reg_1542 <= W_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_reg_1528 <= exitcond_fu_847_p2;
                exitcond_reg_1528_pp1_iter1_reg <= exitcond_reg_1528;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528 = ap_const_lv1_0))) then
                i_5_reg_1562 <= i_5_fu_1043_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                i_reg_1473 <= i_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_reg_1528 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then
                reg_525 <= W_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528 = ap_const_lv1_0))) then
                tmp14_reg_1557 <= tmp14_fu_1037_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_1528 = ap_const_lv1_0))) then
                tmp19_reg_1582 <= tmp19_fu_1094_p2;
                tmp_40_reg_1567 <= tmp_40_fu_1054_p2;
                    tmp_43_reg_1572(6 downto 0) <= tmp_43_fu_1059_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_1443 = ap_const_lv1_0))) then
                tmp5_reg_1508 <= tmp5_fu_707_p2;
                tmp7_reg_1513 <= tmp7_fu_712_p2;
                tmp_105_i_reg_1503 <= tmp_105_i_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_fu_529_p2 = ap_const_lv1_0))) then
                    tmp_26_reg_1463(4 downto 0) <= tmp_26_fu_563_p1(4 downto 0);
                    tmp_i_reg_1447(5 downto 2) <= tmp_i_fu_539_p3(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                tmp_44_reg_1587 <= tmp_44_fu_1184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_1443 <= tmp_fu_529_p2;
                tmp_reg_1443_pp0_iter1_reg <= tmp_reg_1443;
            end if;
        end if;
    end process;
    tmp_i_reg_1447(1 downto 0) <= "00";
    tmp_26_reg_1463(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_43_reg_1572(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    K_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_26_fu_563_p1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, tmp_43_fu_1059_p1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            K_address0 <= tmp_43_fu_1059_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            K_address0 <= tmp_26_fu_563_p1(6 - 1 downto 0);
        else 
            K_address0 <= "XXXXXX";
        end if; 
    end process;


    K_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            K_ce0 <= ap_const_logic_1;
        else 
            K_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage0, tmp_26_reg_1463, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0, ap_block_pp1_stage0, tmp_33_fu_859_p1, ap_block_pp1_stage1, tmp_39_fu_892_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            W_address0 <= tmp_39_fu_892_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            W_address0 <= tmp_33_fu_859_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_address0 <= tmp_26_reg_1463(6 - 1 downto 0);
        else 
            W_address0 <= "XXXXXX";
        end if; 
    end process;


    W_address1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage0, tmp_43_reg_1572, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_35_fu_870_p1, tmp_37_fu_881_p1, ap_block_pp1_stage1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            W_address1 <= tmp_43_reg_1572(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            W_address1 <= tmp_37_fu_881_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            W_address1 <= tmp_35_fu_870_p1(6 - 1 downto 0);
        else 
            W_address1 <= "XXXXXX";
        end if; 
    end process;


    W_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            W_ce0 <= ap_const_logic_1;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_ce1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            W_ce1 <= ap_const_logic_1;
        else 
            W_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_we0_assign_proc : process(tmp_reg_1443, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_1443 = ap_const_lv1_0))) then 
            W_we0 <= ap_const_logic_1;
        else 
            W_we0 <= ap_const_logic_0;
        end if; 
    end process;


    W_we1_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, exitcond_reg_1528_pp1_iter1_reg, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (exitcond_reg_1528_pp1_iter1_reg = ap_const_lv1_0))) then 
            W_we1 <= ap_const_logic_1;
        else 
            W_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a_1_fu_1301_p2 <= std_logic_vector(unsigned(tmp22_fu_1296_p2) + unsigned(tmp_97_i1_fu_1285_p2));
    a_fu_841_p2 <= std_logic_vector(unsigned(tmp_97_i_fu_823_p2) + unsigned(tmp9_fu_835_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_434_p4_assign_proc : process(i_1_reg_430, exitcond_reg_1528, ap_CS_fsm_pp1_stage0, i_5_reg_1562, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_1528 = ap_const_lv1_0))) then 
            ap_phi_mux_i_1_phi_fu_434_p4 <= i_5_reg_1562;
        else 
            ap_phi_mux_i_1_phi_fu_434_p4 <= i_1_reg_430;
        end if; 
    end process;


    ap_phi_mux_x_assign_phi_fu_325_p4_assign_proc : process(x_assign_reg_321, tmp_reg_1443, ap_CS_fsm_pp0_stage0, i_reg_1473, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_1443 = ap_const_lv1_0))) then 
            ap_phi_mux_x_assign_phi_fu_325_p4 <= i_reg_1473;
        else 
            ap_phi_mux_x_assign_phi_fu_325_p4 <= x_assign_reg_321;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sha256hash_0_write_s_fu_1307_p2;
    ap_return_1 <= sha256hash_1_write_s_fu_1312_p2;
    ap_return_2 <= sha256hash_2_write_s_fu_1317_p2;
    ap_return_3 <= sha256hash_3_write_s_fu_1322_p2;
    ap_return_4 <= sha256hash_4_write_s_fu_1327_p2;
    ap_return_5 <= sha256hash_5_write_s_fu_1332_p2;
    ap_return_6 <= sha256hash_6_write_s_fu_1337_p2;
    ap_return_7 <= sha256hash_7_write_s_fu_1342_p2;
    e_1_fu_1291_p2 <= std_logic_vector(unsigned(tmp_44_reg_1587) + unsigned(d_1_reg_477));
    e_fu_829_p2 <= std_logic_vector(unsigned(d1_reg_365) + unsigned(tmp_30_fu_722_p2));
    exitcond_fu_847_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv7_40) else "0";
    i_5_fu_1043_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(i_1_reg_430));
    i_fu_568_p2 <= std_logic_vector(unsigned(x_assign_reg_321) + unsigned(ap_const_lv5_1));

    sha256_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_25_fu_547_p1, sum2_i_cast_fu_579_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                sha256_buf_address0 <= sum2_i_cast_fu_579_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sha256_buf_address0 <= tmp_25_fu_547_p1(6 - 1 downto 0);
            else 
                sha256_buf_address0 <= "XXXXXX";
            end if;
        else 
            sha256_buf_address0 <= "XXXXXX";
        end if; 
    end process;


    sha256_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, sum_i_cast_fu_558_p1, ap_block_pp0_stage1, sum4_i_cast_fu_589_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                sha256_buf_address1 <= sum4_i_cast_fu_589_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sha256_buf_address1 <= sum_i_cast_fu_558_p1(6 - 1 downto 0);
            else 
                sha256_buf_address1 <= "XXXXXX";
            end if;
        else 
            sha256_buf_address1 <= "XXXXXX";
        end if; 
    end process;


    sha256_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sha256_buf_ce0 <= ap_const_logic_1;
        else 
            sha256_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sha256_buf_ce1 <= ap_const_logic_1;
        else 
            sha256_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sha256hash_0_write_s_fu_1307_p2 <= std_logic_vector(unsigned(b_1_reg_442) + unsigned(sha256hash_0_read));
    sha256hash_1_write_s_fu_1312_p2 <= std_logic_vector(unsigned(c_1_reg_500) + unsigned(sha256hash_1_read));
    sha256hash_2_write_s_fu_1317_p2 <= std_logic_vector(unsigned(d_2_reg_488) + unsigned(sha256hash_2_read));
    sha256hash_3_write_s_fu_1322_p2 <= std_logic_vector(unsigned(d_1_reg_477) + unsigned(sha256hash_3_read));
    sha256hash_4_write_s_fu_1327_p2 <= std_logic_vector(unsigned(f_1_reg_419) + unsigned(sha256hash_4_read));
    sha256hash_5_write_s_fu_1332_p2 <= std_logic_vector(unsigned(g_1_reg_464) + unsigned(sha256hash_5_read));
    sha256hash_6_write_s_fu_1337_p2 <= std_logic_vector(unsigned(h_2_reg_453) + unsigned(sha256hash_6_read));
    sha256hash_7_write_s_fu_1342_p2 <= std_logic_vector(unsigned(h_1_reg_513) + unsigned(sha256hash_7_read));
    sum2_i_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_i_fu_574_p2),64));
    sum2_i_fu_574_p2 <= (tmp_i_reg_1447 or ap_const_lv6_2);
    sum4_i_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_i_fu_584_p2),64));
    sum4_i_fu_584_p2 <= (tmp_i_reg_1447 or ap_const_lv6_3);
    sum_i_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_552_p2),64));
    sum_i_fu_552_p2 <= (tmp_i_fu_539_p3 or ap_const_lv6_1);
    tmp10_fu_955_p2 <= (tmp_51_i3_i1_fu_933_p3 xor tmp_41_fu_951_p1);
    tmp11_fu_1025_p2 <= (tmp_51_i3_i2_fu_1003_p3 xor tmp_42_fu_1021_p1);
    tmp13_fu_1049_p2 <= std_logic_vector(unsigned(W_load_reg_1542) + unsigned(reg_525));
    tmp14_fu_1037_p2 <= std_logic_vector(unsigned(tmp_100_i_fu_961_p2) + unsigned(tmp_103_i_fu_1031_p2));
    tmp15_fu_1166_p2 <= (tmp_51_i_i3_fu_1114_p3 xor tmp_51_i6_i2_fu_1158_p3);
    tmp18_fu_1178_p2 <= std_logic_vector(unsigned(K_q0) + unsigned(tmp_92_i1_fu_1172_p2));
    tmp19_fu_1094_p2 <= std_logic_vector(unsigned(tmp20_fu_1088_p2) + unsigned(tmp_105_i1_fu_1082_p2));
    tmp20_fu_1088_p2 <= std_logic_vector(unsigned(h_1_reg_513) + unsigned(tmp_40_fu_1054_p2));
    tmp21_fu_1255_p2 <= (tmp_51_i_i4_fu_1203_p3 xor tmp_51_i6_i3_fu_1247_p3);
    tmp22_fu_1296_p2 <= std_logic_vector(unsigned(tmp_95_i1_fu_1261_p2) + unsigned(tmp_44_reg_1587));
    tmp2_fu_671_p2 <= (tmp_51_i_i_fu_619_p3 xor tmp_51_i6_i_fu_663_p3);
    tmp5_fu_707_p2 <= std_logic_vector(unsigned(tmp_92_i_fu_677_p2) + unsigned(K_load_reg_1498));
    tmp6_fu_718_p2 <= std_logic_vector(unsigned(tmp_105_i_reg_1503) + unsigned(tmp7_reg_1513));
    tmp7_fu_712_p2 <= std_logic_vector(unsigned(tmp_47_i_fu_594_p5) + unsigned(h1_reg_408));
    tmp8_fu_793_p2 <= (tmp_51_i_i6_fu_741_p3 xor tmp_51_i6_i1_fu_785_p3);
    tmp9_fu_835_p2 <= std_logic_vector(unsigned(tmp_30_fu_722_p2) + unsigned(tmp_95_i_fu_799_p2));
    tmp_100_i_fu_961_p2 <= (tmp_51_i_i1_fu_911_p3 xor tmp10_fu_955_p2);
    tmp_101_i_fu_1011_p4 <= W_q1(31 downto 3);
    tmp_103_i_fu_1031_p2 <= (tmp_51_i_i2_fu_981_p3 xor tmp11_fu_1025_p2);
    tmp_104_i1_fu_1076_p2 <= (tmp_i7_fu_1070_p2 and h_2_reg_453);
    tmp_104_i_fu_695_p2 <= (tmp_i3_fu_689_p2 and h_reg_333);
    tmp_105_i1_fu_1082_p2 <= (tmp_i3_86_fu_1064_p2 xor tmp_104_i1_fu_1076_p2);
    tmp_105_i_fu_701_p2 <= (tmp_i2_fu_683_p2 xor tmp_104_i_fu_695_p2);
    tmp_25_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_539_p3),64));
    tmp_26_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_x_assign_phi_fu_325_p4),64));
    tmp_30_fu_722_p2 <= std_logic_vector(unsigned(tmp5_reg_1508) + unsigned(tmp6_fu_718_p2));
    tmp_32_fu_853_p2 <= std_logic_vector(signed(ap_const_lv7_7E) + signed(ap_phi_mux_i_1_phi_fu_434_p4));
    tmp_33_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_853_p2),64));
    tmp_34_fu_864_p2 <= std_logic_vector(signed(ap_const_lv7_79) + signed(ap_phi_mux_i_1_phi_fu_434_p4));
    tmp_35_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_864_p2),64));
    tmp_36_fu_875_p2 <= std_logic_vector(signed(ap_const_lv7_71) + signed(i_1_reg_430));
    tmp_37_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_875_p2),64));
    tmp_38_fu_886_p2 <= std_logic_vector(signed(ap_const_lv7_70) + signed(i_1_reg_430));
    tmp_39_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_886_p2),64));
    tmp_40_fu_1054_p2 <= std_logic_vector(unsigned(tmp14_reg_1557) + unsigned(tmp13_fu_1049_p2));
    tmp_41_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_i_fu_941_p4),32));
    tmp_42_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_i_fu_1011_p4),32));
    tmp_43_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_430),64));
    tmp_44_fu_1184_p2 <= std_logic_vector(unsigned(tmp19_reg_1582) + unsigned(tmp18_fu_1178_p2));
    tmp_45_fu_535_p1 <= ap_phi_mux_x_assign_phi_fu_325_p4(4 - 1 downto 0);
    tmp_46_fu_615_p1 <= f_reg_354(6 - 1 downto 0);
    tmp_47_fu_637_p1 <= f_reg_354(11 - 1 downto 0);
    tmp_47_i_fu_594_p5 <= (((sha256_buf_load_reg_1478 & sha256_buf_load_1_reg_1483) & sha256_buf_q0) & sha256_buf_q1);
    tmp_48_fu_659_p1 <= f_reg_354(25 - 1 downto 0);
    tmp_49_fu_737_p1 <= b_reg_397(2 - 1 downto 0);
    tmp_50_fu_759_p1 <= b_reg_397(13 - 1 downto 0);
    tmp_51_fu_781_p1 <= b_reg_397(22 - 1 downto 0);
    tmp_51_i3_i1_fu_933_p3 <= (tmp_54_fu_929_p1 & tmp_i1_i1_fu_919_p4);
    tmp_51_i3_i2_fu_1003_p3 <= (tmp_57_fu_999_p1 & tmp_i1_i2_fu_989_p4);
    tmp_51_i3_i3_fu_1136_p3 <= (tmp_59_fu_1132_p1 & tmp_i1_i3_fu_1122_p4);
    tmp_51_i3_i4_fu_1225_p3 <= (tmp_62_fu_1221_p1 & tmp_i1_i4_fu_1211_p4);
    tmp_51_i3_i9_fu_763_p3 <= (tmp_50_fu_759_p1 & tmp_i1_i7_fu_749_p4);
    tmp_51_i3_i_fu_641_p3 <= (tmp_47_fu_637_p1 & tmp_i1_i_fu_627_p4);
    tmp_51_i6_i1_fu_785_p3 <= (tmp_51_fu_781_p1 & tmp_i4_i1_fu_771_p4);
    tmp_51_i6_i2_fu_1158_p3 <= (tmp_60_fu_1154_p1 & tmp_i4_i2_fu_1144_p4);
    tmp_51_i6_i3_fu_1247_p3 <= (tmp_63_fu_1243_p1 & tmp_i4_i3_fu_1233_p4);
    tmp_51_i6_i_fu_663_p3 <= (tmp_48_fu_659_p1 & tmp_i4_i_fu_649_p4);
    tmp_51_i_i1_fu_911_p3 <= (tmp_53_fu_907_p1 & tmp_i_i2_fu_897_p4);
    tmp_51_i_i2_fu_981_p3 <= (tmp_56_fu_977_p1 & tmp_i_i3_fu_967_p4);
    tmp_51_i_i3_fu_1114_p3 <= (tmp_58_fu_1110_p1 & tmp_i_i5_fu_1100_p4);
    tmp_51_i_i4_fu_1203_p3 <= (tmp_61_fu_1199_p1 & tmp_i_i6_fu_1189_p4);
    tmp_51_i_i6_fu_741_p3 <= (tmp_49_fu_737_p1 & tmp_i_i4_fu_727_p4);
    tmp_51_i_i_fu_619_p3 <= (tmp_46_fu_615_p1 & tmp_i_i1_fu_605_p4);
    tmp_53_fu_907_p1 <= reg_525(17 - 1 downto 0);
    tmp_54_fu_929_p1 <= reg_525(19 - 1 downto 0);
    tmp_56_fu_977_p1 <= W_q1(7 - 1 downto 0);
    tmp_57_fu_999_p1 <= W_q1(18 - 1 downto 0);
    tmp_58_fu_1110_p1 <= f_1_reg_419(6 - 1 downto 0);
    tmp_59_fu_1132_p1 <= f_1_reg_419(11 - 1 downto 0);
    tmp_60_fu_1154_p1 <= f_1_reg_419(25 - 1 downto 0);
    tmp_61_fu_1199_p1 <= b_1_reg_442(2 - 1 downto 0);
    tmp_62_fu_1221_p1 <= b_1_reg_442(13 - 1 downto 0);
    tmp_63_fu_1243_p1 <= b_1_reg_442(22 - 1 downto 0);
    tmp_92_i1_fu_1172_p2 <= (tmp_51_i3_i3_fu_1136_p3 xor tmp15_fu_1166_p2);
    tmp_92_i_fu_677_p2 <= (tmp_51_i3_i_fu_641_p3 xor tmp2_fu_671_p2);
    tmp_95_i1_fu_1261_p2 <= (tmp_51_i3_i4_fu_1225_p3 xor tmp21_fu_1255_p2);
    tmp_95_i_fu_799_p2 <= (tmp_51_i3_i9_fu_763_p3 xor tmp8_fu_793_p2);
    tmp_96_i1_fu_1279_p2 <= (d_2_reg_488 and c_1_reg_500);
    tmp_96_i_fu_817_p2 <= (d_reg_375 and c_reg_386);
    tmp_97_i1_fu_1285_p2 <= (tmp_i8_fu_1273_p2 xor tmp_96_i1_fu_1279_p2);
    tmp_97_i_fu_823_p2 <= (tmp_i6_fu_811_p2 xor tmp_96_i_fu_817_p2);
    tmp_98_i_fu_941_p4 <= reg_525(31 downto 10);
    tmp_fu_529_p2 <= "1" when (ap_phi_mux_x_assign_phi_fu_325_p4 = ap_const_lv5_10) else "0";
    tmp_i1_i1_fu_919_p4 <= reg_525(31 downto 19);
    tmp_i1_i2_fu_989_p4 <= W_q1(31 downto 18);
    tmp_i1_i3_fu_1122_p4 <= f_1_reg_419(31 downto 11);
    tmp_i1_i4_fu_1211_p4 <= b_1_reg_442(31 downto 13);
    tmp_i1_i7_fu_749_p4 <= b_reg_397(31 downto 13);
    tmp_i1_i_fu_627_p4 <= f_reg_354(31 downto 11);
    tmp_i2_fu_683_p2 <= (g_reg_343 and f_reg_354);
    tmp_i3_86_fu_1064_p2 <= (g_1_reg_464 and f_1_reg_419);
    tmp_i3_fu_689_p2 <= (f_reg_354 xor ap_const_lv32_FFFFFFFF);
    tmp_i4_fu_1267_p2 <= (d_2_reg_488 xor c_1_reg_500);
    tmp_i4_i1_fu_771_p4 <= b_reg_397(31 downto 22);
    tmp_i4_i2_fu_1144_p4 <= f_1_reg_419(31 downto 25);
    tmp_i4_i3_fu_1233_p4 <= b_1_reg_442(31 downto 22);
    tmp_i4_i_fu_649_p4 <= f_reg_354(31 downto 25);
    tmp_i6_fu_811_p2 <= (tmp_i_85_fu_805_p2 and b_reg_397);
    tmp_i7_fu_1070_p2 <= (f_1_reg_419 xor ap_const_lv32_FFFFFFFF);
    tmp_i8_fu_1273_p2 <= (tmp_i4_fu_1267_p2 and b_1_reg_442);
    tmp_i_85_fu_805_p2 <= (d_reg_375 xor c_reg_386);
    tmp_i_fu_539_p3 <= (tmp_45_fu_535_p1 & ap_const_lv2_0);
    tmp_i_i1_fu_605_p4 <= f_reg_354(31 downto 6);
    tmp_i_i2_fu_897_p4 <= reg_525(31 downto 17);
    tmp_i_i3_fu_967_p4 <= W_q1(31 downto 7);
    tmp_i_i4_fu_727_p4 <= b_reg_397(31 downto 2);
    tmp_i_i5_fu_1100_p4 <= f_1_reg_419(31 downto 6);
    tmp_i_i6_fu_1189_p4 <= b_1_reg_442(31 downto 2);
end behav;
