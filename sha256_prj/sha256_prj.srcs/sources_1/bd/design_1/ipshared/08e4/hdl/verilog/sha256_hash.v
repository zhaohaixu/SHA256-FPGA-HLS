// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_hash (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sha256_buf_address0,
        sha256_buf_ce0,
        sha256_buf_we0,
        sha256_buf_d0,
        sha256_buf_q0,
        sha256_buf_address1,
        sha256_buf_ce1,
        sha256_buf_q1,
        m_axi_data_AWVALID,
        m_axi_data_AWREADY,
        m_axi_data_AWADDR,
        m_axi_data_AWID,
        m_axi_data_AWLEN,
        m_axi_data_AWSIZE,
        m_axi_data_AWBURST,
        m_axi_data_AWLOCK,
        m_axi_data_AWCACHE,
        m_axi_data_AWPROT,
        m_axi_data_AWQOS,
        m_axi_data_AWREGION,
        m_axi_data_AWUSER,
        m_axi_data_WVALID,
        m_axi_data_WREADY,
        m_axi_data_WDATA,
        m_axi_data_WSTRB,
        m_axi_data_WLAST,
        m_axi_data_WID,
        m_axi_data_WUSER,
        m_axi_data_ARVALID,
        m_axi_data_ARREADY,
        m_axi_data_ARADDR,
        m_axi_data_ARID,
        m_axi_data_ARLEN,
        m_axi_data_ARSIZE,
        m_axi_data_ARBURST,
        m_axi_data_ARLOCK,
        m_axi_data_ARCACHE,
        m_axi_data_ARPROT,
        m_axi_data_ARQOS,
        m_axi_data_ARREGION,
        m_axi_data_ARUSER,
        m_axi_data_RVALID,
        m_axi_data_RREADY,
        m_axi_data_RDATA,
        m_axi_data_RLAST,
        m_axi_data_RID,
        m_axi_data_RUSER,
        m_axi_data_RRESP,
        m_axi_data_BVALID,
        m_axi_data_BREADY,
        m_axi_data_BRESP,
        m_axi_data_BID,
        m_axi_data_BUSER,
        data_offset,
        len,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] sha256_buf_address0;
output   sha256_buf_ce0;
output   sha256_buf_we0;
output  [7:0] sha256_buf_d0;
input  [7:0] sha256_buf_q0;
output  [5:0] sha256_buf_address1;
output   sha256_buf_ce1;
input  [7:0] sha256_buf_q1;
output   m_axi_data_AWVALID;
input   m_axi_data_AWREADY;
output  [31:0] m_axi_data_AWADDR;
output  [0:0] m_axi_data_AWID;
output  [31:0] m_axi_data_AWLEN;
output  [2:0] m_axi_data_AWSIZE;
output  [1:0] m_axi_data_AWBURST;
output  [1:0] m_axi_data_AWLOCK;
output  [3:0] m_axi_data_AWCACHE;
output  [2:0] m_axi_data_AWPROT;
output  [3:0] m_axi_data_AWQOS;
output  [3:0] m_axi_data_AWREGION;
output  [0:0] m_axi_data_AWUSER;
output   m_axi_data_WVALID;
input   m_axi_data_WREADY;
output  [7:0] m_axi_data_WDATA;
output  [0:0] m_axi_data_WSTRB;
output   m_axi_data_WLAST;
output  [0:0] m_axi_data_WID;
output  [0:0] m_axi_data_WUSER;
output   m_axi_data_ARVALID;
input   m_axi_data_ARREADY;
output  [31:0] m_axi_data_ARADDR;
output  [0:0] m_axi_data_ARID;
output  [31:0] m_axi_data_ARLEN;
output  [2:0] m_axi_data_ARSIZE;
output  [1:0] m_axi_data_ARBURST;
output  [1:0] m_axi_data_ARLOCK;
output  [3:0] m_axi_data_ARCACHE;
output  [2:0] m_axi_data_ARPROT;
output  [3:0] m_axi_data_ARQOS;
output  [3:0] m_axi_data_ARREGION;
output  [0:0] m_axi_data_ARUSER;
input   m_axi_data_RVALID;
output   m_axi_data_RREADY;
input  [7:0] m_axi_data_RDATA;
input   m_axi_data_RLAST;
input  [0:0] m_axi_data_RID;
input  [0:0] m_axi_data_RUSER;
input  [1:0] m_axi_data_RRESP;
input   m_axi_data_BVALID;
output   m_axi_data_BREADY;
input  [1:0] m_axi_data_BRESP;
input  [0:0] m_axi_data_BID;
input  [0:0] m_axi_data_BUSER;
input  [31:0] data_offset;
input  [31:0] len;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] sha256_buf_address0;
reg sha256_buf_ce0;
reg sha256_buf_we0;
reg sha256_buf_ce1;
reg m_axi_data_ARVALID;
reg m_axi_data_RREADY;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_blk_n_AR;
reg    data_blk_n_R;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_fu_289_p2;
reg    ap_sig_ioackin_m_axi_data_ARREADY;
wire   [31:0] i_1_fu_294_p2;
reg   [31:0] i_1_reg_588;
reg    ap_block_state8;
reg   [7:0] data_addr_read_reg_593;
wire   [0:0] tmp_3_fu_377_p2;
reg   [0:0] tmp_3_reg_598;
wire    ap_CS_fsm_state9;
reg   [31:0] sha256hash_7_load_1_reg_602;
wire    ap_CS_fsm_state10;
reg   [31:0] sha256hash_6_load_1_reg_607;
reg   [31:0] sha256hash_5_load_1_reg_612;
reg   [31:0] sha256hash_4_load_1_reg_617;
reg   [31:0] sha256hash_3_load_1_reg_622;
reg   [31:0] sha256hash_2_load_1_reg_627;
reg   [31:0] sha256hash_1_load_1_reg_632;
reg   [31:0] sha256hash_load_1_reg_637;
wire    grp_p_hash_fu_166_ap_start;
wire    grp_p_hash_fu_166_ap_done;
wire    grp_p_hash_fu_166_ap_idle;
wire    grp_p_hash_fu_166_ap_ready;
wire   [5:0] grp_p_hash_fu_166_sha256_buf_address0;
wire    grp_p_hash_fu_166_sha256_buf_ce0;
wire   [5:0] grp_p_hash_fu_166_sha256_buf_address1;
wire    grp_p_hash_fu_166_sha256_buf_ce1;
wire   [31:0] grp_p_hash_fu_166_ap_return_0;
wire   [31:0] grp_p_hash_fu_166_ap_return_1;
wire   [31:0] grp_p_hash_fu_166_ap_return_2;
wire   [31:0] grp_p_hash_fu_166_ap_return_3;
wire   [31:0] grp_p_hash_fu_166_ap_return_4;
wire   [31:0] grp_p_hash_fu_166_ap_return_5;
wire   [31:0] grp_p_hash_fu_166_ap_return_6;
wire   [31:0] grp_p_hash_fu_166_ap_return_7;
reg   [31:0] i_reg_155;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
reg    ap_block_state11_on_subcall_done;
reg    grp_p_hash_fu_166_ap_start_reg;
wire   [63:0] tmp_1_fu_366_p1;
wire  signed [63:0] tmp_fu_228_p1;
reg    ap_reg_ioackin_m_axi_data_ARREADY;
reg   [31:0] sha256_len_0_write_s_fu_74;
wire   [31:0] sl_fu_371_p2;
reg   [31:0] sha256_bits_0_read_s_fu_78;
wire   [31:0] sha256_bits_0_write_fu_440_p2;
reg   [31:0] sha256hash_7_fu_82;
reg   [31:0] sha256hash_6_fu_86;
reg   [31:0] sha256hash_5_fu_90;
reg   [31:0] sha256hash_4_fu_94;
reg   [31:0] sha256hash_3_fu_98;
reg   [31:0] sha256hash_2_fu_102;
reg   [31:0] sha256hash_1_fu_106;
reg   [31:0] sha256hash_fu_110;
reg   [31:0] sha256_bits_1_read_s_fu_114;
wire   [31:0] tmp_95_read1_i_fu_432_p3;
wire   [0:0] tmp_i_fu_420_p2;
wire   [31:0] tmp_89_i_fu_426_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_p_hash_fu_166_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_m_axi_data_ARREADY = 1'b0;
end

p_hash grp_p_hash_fu_166(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_p_hash_fu_166_ap_start),
    .ap_done(grp_p_hash_fu_166_ap_done),
    .ap_idle(grp_p_hash_fu_166_ap_idle),
    .ap_ready(grp_p_hash_fu_166_ap_ready),
    .sha256_buf_address0(grp_p_hash_fu_166_sha256_buf_address0),
    .sha256_buf_ce0(grp_p_hash_fu_166_sha256_buf_ce0),
    .sha256_buf_q0(sha256_buf_q0),
    .sha256_buf_address1(grp_p_hash_fu_166_sha256_buf_address1),
    .sha256_buf_ce1(grp_p_hash_fu_166_sha256_buf_ce1),
    .sha256_buf_q1(sha256_buf_q1),
    .sha256hash_0_read(sha256hash_load_1_reg_637),
    .sha256hash_1_read(sha256hash_1_load_1_reg_632),
    .sha256hash_2_read(sha256hash_2_load_1_reg_627),
    .sha256hash_3_read(sha256hash_3_load_1_reg_622),
    .sha256hash_4_read(sha256hash_4_load_1_reg_617),
    .sha256hash_5_read(sha256hash_5_load_1_reg_612),
    .sha256hash_6_read(sha256hash_6_load_1_reg_607),
    .sha256hash_7_read(sha256hash_7_load_1_reg_602),
    .ap_return_0(grp_p_hash_fu_166_ap_return_0),
    .ap_return_1(grp_p_hash_fu_166_ap_return_1),
    .ap_return_2(grp_p_hash_fu_166_ap_return_2),
    .ap_return_3(grp_p_hash_fu_166_ap_return_3),
    .ap_return_4(grp_p_hash_fu_166_ap_return_4),
    .ap_return_5(grp_p_hash_fu_166_ap_return_5),
    .ap_return_6(grp_p_hash_fu_166_ap_return_6),
    .ap_return_7(grp_p_hash_fu_166_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_data_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0))) begin
                ap_reg_ioackin_m_axi_data_ARREADY <= 1'b0;
            end else if (((m_axi_data_ARREADY == 1'b1) & (ap_start == 1'b1))) begin
                ap_reg_ioackin_m_axi_data_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_p_hash_fu_166_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_p_hash_fu_166_ap_start_reg <= 1'b1;
        end else if ((grp_p_hash_fu_166_ap_ready == 1'b1)) begin
            grp_p_hash_fu_166_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
        i_reg_155 <= i_1_reg_588;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_155 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256_bits_0_read_s_fu_78 <= sha256_bits_0_write_fu_440_p2;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256_bits_0_read_s_fu_78 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256_bits_1_read_s_fu_114 <= tmp_95_read1_i_fu_432_p3;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256_bits_1_read_s_fu_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        sha256_len_0_write_s_fu_74 <= sl_fu_371_p2;
    end else if (((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_3_fu_377_p2 == 1'd1)))) begin
        sha256_len_0_write_s_fu_74 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256hash_1_fu_106 <= grp_p_hash_fu_166_ap_return_1;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256hash_1_fu_106 <= 32'd3144134277;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256hash_2_fu_102 <= grp_p_hash_fu_166_ap_return_2;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256hash_2_fu_102 <= 32'd1013904242;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256hash_3_fu_98 <= grp_p_hash_fu_166_ap_return_3;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256hash_3_fu_98 <= 32'd2773480762;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256hash_4_fu_94 <= grp_p_hash_fu_166_ap_return_4;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256hash_4_fu_94 <= 32'd1359893119;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256hash_5_fu_90 <= grp_p_hash_fu_166_ap_return_5;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256hash_5_fu_90 <= 32'd2600822924;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256hash_6_fu_86 <= grp_p_hash_fu_166_ap_return_6;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256hash_6_fu_86 <= 32'd528734635;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256hash_7_fu_82 <= grp_p_hash_fu_166_ap_return_7;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256hash_7_fu_82 <= 32'd1541459225;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256hash_fu_110 <= grp_p_hash_fu_166_ap_return_0;
    end else if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256hash_fu_110 <= 32'd1779033703;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_289_p2 == 1'd0) & (m_axi_data_RVALID == 1'b0)) & (exitcond_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        data_addr_read_reg_593 <= m_axi_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_289_p2 == 1'd0) & (m_axi_data_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        i_1_reg_588 <= i_1_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sha256hash_1_load_1_reg_632 <= sha256hash_1_fu_106;
        sha256hash_2_load_1_reg_627 <= sha256hash_2_fu_102;
        sha256hash_3_load_1_reg_622 <= sha256hash_3_fu_98;
        sha256hash_4_load_1_reg_617 <= sha256hash_4_fu_94;
        sha256hash_5_load_1_reg_612 <= sha256hash_5_fu_90;
        sha256hash_6_load_1_reg_607 <= sha256hash_6_fu_86;
        sha256hash_7_load_1_reg_602 <= sha256hash_7_fu_82;
        sha256hash_load_1_reg_637 <= sha256hash_fu_110;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_3_reg_598 <= tmp_3_fu_377_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((exitcond_fu_289_p2 == 1'd0) & (m_axi_data_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (exitcond_fu_289_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_289_p2 == 1'd0) & (m_axi_data_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (exitcond_fu_289_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_data_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_data_ARREADY = m_axi_data_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_data_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        data_blk_n_AR = m_axi_data_ARREADY;
    end else begin
        data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        data_blk_n_R = m_axi_data_RVALID;
    end else begin
        data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_data_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_axi_data_ARVALID = 1'b1;
    end else begin
        m_axi_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_289_p2 == 1'd0) & (m_axi_data_RVALID == 1'b0)) & (exitcond_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_data_RREADY = 1'b1;
    end else begin
        m_axi_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sha256_buf_address0 = tmp_1_fu_366_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256_buf_address0 = grp_p_hash_fu_166_sha256_buf_address0;
    end else begin
        sha256_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sha256_buf_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256_buf_ce0 = grp_p_hash_fu_166_sha256_buf_ce0;
    end else begin
        sha256_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_3_reg_598 == 1'd1))) begin
        sha256_buf_ce1 = grp_p_hash_fu_166_sha256_buf_ce1;
    end else begin
        sha256_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sha256_buf_we0 = 1'b1;
    end else begin
        sha256_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_data_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((exitcond_fu_289_p2 == 1'd0) & (m_axi_data_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (exitcond_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((exitcond_fu_289_p2 == 1'd0) & (m_axi_data_RVALID == 1'b0)) & (exitcond_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_3_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_on_subcall_done = ((grp_p_hash_fu_166_ap_done == 1'b0) & (tmp_3_reg_598 == 1'd1));
end

always @ (*) begin
    ap_block_state8 = ((exitcond_fu_289_p2 == 1'd0) & (m_axi_data_RVALID == 1'b0));
end

assign ap_return_0 = sha256_len_0_write_s_fu_74;

assign ap_return_1 = sha256_bits_1_read_s_fu_114;

assign ap_return_10 = sha256_bits_0_read_s_fu_78;

assign ap_return_2 = sha256hash_fu_110;

assign ap_return_3 = sha256hash_1_fu_106;

assign ap_return_4 = sha256hash_2_fu_102;

assign ap_return_5 = sha256hash_3_fu_98;

assign ap_return_6 = sha256hash_4_fu_94;

assign ap_return_7 = sha256hash_5_fu_90;

assign ap_return_8 = sha256hash_6_fu_86;

assign ap_return_9 = sha256hash_7_fu_82;

assign exitcond_fu_289_p2 = ((i_reg_155 == len) ? 1'b1 : 1'b0);

assign grp_p_hash_fu_166_ap_start = grp_p_hash_fu_166_ap_start_reg;

assign i_1_fu_294_p2 = (i_reg_155 + 32'd1);

assign m_axi_data_ARADDR = tmp_fu_228_p1;

assign m_axi_data_ARBURST = 2'd0;

assign m_axi_data_ARCACHE = 4'd0;

assign m_axi_data_ARID = 1'd0;

assign m_axi_data_ARLEN = len;

assign m_axi_data_ARLOCK = 2'd0;

assign m_axi_data_ARPROT = 3'd0;

assign m_axi_data_ARQOS = 4'd0;

assign m_axi_data_ARREGION = 4'd0;

assign m_axi_data_ARSIZE = 3'd0;

assign m_axi_data_ARUSER = 1'd0;

assign m_axi_data_AWADDR = 32'd0;

assign m_axi_data_AWBURST = 2'd0;

assign m_axi_data_AWCACHE = 4'd0;

assign m_axi_data_AWID = 1'd0;

assign m_axi_data_AWLEN = 32'd0;

assign m_axi_data_AWLOCK = 2'd0;

assign m_axi_data_AWPROT = 3'd0;

assign m_axi_data_AWQOS = 4'd0;

assign m_axi_data_AWREGION = 4'd0;

assign m_axi_data_AWSIZE = 3'd0;

assign m_axi_data_AWUSER = 1'd0;

assign m_axi_data_AWVALID = 1'b0;

assign m_axi_data_BREADY = 1'b0;

assign m_axi_data_WDATA = 8'd0;

assign m_axi_data_WID = 1'd0;

assign m_axi_data_WLAST = 1'b0;

assign m_axi_data_WSTRB = 1'd0;

assign m_axi_data_WUSER = 1'd0;

assign m_axi_data_WVALID = 1'b0;

assign sha256_bits_0_write_fu_440_p2 = (sha256_bits_0_read_s_fu_78 + 32'd64);

assign sha256_buf_address1 = grp_p_hash_fu_166_sha256_buf_address1;

assign sha256_buf_d0 = data_addr_read_reg_593;

assign sl_fu_371_p2 = (sha256_len_0_write_s_fu_74 + 32'd1);

assign tmp_1_fu_366_p1 = sha256_len_0_write_s_fu_74;

assign tmp_3_fu_377_p2 = ((sl_fu_371_p2 == 32'd8) ? 1'b1 : 1'b0);

assign tmp_89_i_fu_426_p2 = (sha256_bits_1_read_s_fu_114 + 32'd1);

assign tmp_95_read1_i_fu_432_p3 = ((tmp_i_fu_420_p2[0:0] === 1'b1) ? tmp_89_i_fu_426_p2 : sha256_bits_1_read_s_fu_114);

assign tmp_fu_228_p1 = $signed(data_offset);

assign tmp_i_fu_420_p2 = ((sha256_bits_0_read_s_fu_78 > 32'd4294967231) ? 1'b1 : 1'b0);

endmodule //sha256_hash
