// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_done (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sha256_buf_address0,
        sha256_buf_ce0,
        sha256_buf_we0,
        sha256_buf_d0,
        sha256_buf_q0,
        sha256_buf_address1,
        sha256_buf_ce1,
        sha256_buf_we1,
        sha256_buf_d1,
        sha256_buf_q1,
        sha256hash_0_read,
        sha256hash_1_read,
        sha256hash_2_read,
        sha256hash_3_read,
        sha256hash_4_read,
        sha256hash_5_read,
        sha256hash_6_read,
        sha256hash_7_read,
        sha256_bits_0_read,
        sha256_bits_1_read,
        sha256_len,
        m_axi_hash_AWVALID,
        m_axi_hash_AWREADY,
        m_axi_hash_AWADDR,
        m_axi_hash_AWID,
        m_axi_hash_AWLEN,
        m_axi_hash_AWSIZE,
        m_axi_hash_AWBURST,
        m_axi_hash_AWLOCK,
        m_axi_hash_AWCACHE,
        m_axi_hash_AWPROT,
        m_axi_hash_AWQOS,
        m_axi_hash_AWREGION,
        m_axi_hash_AWUSER,
        m_axi_hash_WVALID,
        m_axi_hash_WREADY,
        m_axi_hash_WDATA,
        m_axi_hash_WSTRB,
        m_axi_hash_WLAST,
        m_axi_hash_WID,
        m_axi_hash_WUSER,
        m_axi_hash_ARVALID,
        m_axi_hash_ARREADY,
        m_axi_hash_ARADDR,
        m_axi_hash_ARID,
        m_axi_hash_ARLEN,
        m_axi_hash_ARSIZE,
        m_axi_hash_ARBURST,
        m_axi_hash_ARLOCK,
        m_axi_hash_ARCACHE,
        m_axi_hash_ARPROT,
        m_axi_hash_ARQOS,
        m_axi_hash_ARREGION,
        m_axi_hash_ARUSER,
        m_axi_hash_RVALID,
        m_axi_hash_RREADY,
        m_axi_hash_RDATA,
        m_axi_hash_RLAST,
        m_axi_hash_RID,
        m_axi_hash_RUSER,
        m_axi_hash_RRESP,
        m_axi_hash_BVALID,
        m_axi_hash_BREADY,
        m_axi_hash_BRESP,
        m_axi_hash_BID,
        m_axi_hash_BUSER,
        hash_offset
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_pp0_stage0 = 19'd8192;
parameter    ap_ST_fsm_state17 = 19'd16384;
parameter    ap_ST_fsm_state18 = 19'd32768;
parameter    ap_ST_fsm_state19 = 19'd65536;
parameter    ap_ST_fsm_state20 = 19'd131072;
parameter    ap_ST_fsm_state21 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] sha256_buf_address0;
output   sha256_buf_ce0;
output   sha256_buf_we0;
output  [7:0] sha256_buf_d0;
input  [7:0] sha256_buf_q0;
output  [5:0] sha256_buf_address1;
output   sha256_buf_ce1;
output   sha256_buf_we1;
output  [7:0] sha256_buf_d1;
input  [7:0] sha256_buf_q1;
input  [31:0] sha256hash_0_read;
input  [31:0] sha256hash_1_read;
input  [31:0] sha256hash_2_read;
input  [31:0] sha256hash_3_read;
input  [31:0] sha256hash_4_read;
input  [31:0] sha256hash_5_read;
input  [31:0] sha256hash_6_read;
input  [31:0] sha256hash_7_read;
input  [31:0] sha256_bits_0_read;
input  [31:0] sha256_bits_1_read;
input  [31:0] sha256_len;
output   m_axi_hash_AWVALID;
input   m_axi_hash_AWREADY;
output  [31:0] m_axi_hash_AWADDR;
output  [0:0] m_axi_hash_AWID;
output  [31:0] m_axi_hash_AWLEN;
output  [2:0] m_axi_hash_AWSIZE;
output  [1:0] m_axi_hash_AWBURST;
output  [1:0] m_axi_hash_AWLOCK;
output  [3:0] m_axi_hash_AWCACHE;
output  [2:0] m_axi_hash_AWPROT;
output  [3:0] m_axi_hash_AWQOS;
output  [3:0] m_axi_hash_AWREGION;
output  [0:0] m_axi_hash_AWUSER;
output   m_axi_hash_WVALID;
input   m_axi_hash_WREADY;
output  [7:0] m_axi_hash_WDATA;
output  [0:0] m_axi_hash_WSTRB;
output   m_axi_hash_WLAST;
output  [0:0] m_axi_hash_WID;
output  [0:0] m_axi_hash_WUSER;
output   m_axi_hash_ARVALID;
input   m_axi_hash_ARREADY;
output  [31:0] m_axi_hash_ARADDR;
output  [0:0] m_axi_hash_ARID;
output  [31:0] m_axi_hash_ARLEN;
output  [2:0] m_axi_hash_ARSIZE;
output  [1:0] m_axi_hash_ARBURST;
output  [1:0] m_axi_hash_ARLOCK;
output  [3:0] m_axi_hash_ARCACHE;
output  [2:0] m_axi_hash_ARPROT;
output  [3:0] m_axi_hash_ARQOS;
output  [3:0] m_axi_hash_ARREGION;
output  [0:0] m_axi_hash_ARUSER;
input   m_axi_hash_RVALID;
output   m_axi_hash_RREADY;
input  [7:0] m_axi_hash_RDATA;
input   m_axi_hash_RLAST;
input  [0:0] m_axi_hash_RID;
input  [0:0] m_axi_hash_RUSER;
input  [1:0] m_axi_hash_RRESP;
input   m_axi_hash_BVALID;
output   m_axi_hash_BREADY;
input  [1:0] m_axi_hash_BRESP;
input  [0:0] m_axi_hash_BID;
input  [0:0] m_axi_hash_BUSER;
input  [31:0] hash_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] sha256_buf_address0;
reg sha256_buf_ce0;
reg sha256_buf_we0;
reg[7:0] sha256_buf_d0;
reg[5:0] sha256_buf_address1;
reg sha256_buf_ce1;
reg sha256_buf_we1;
reg[7:0] sha256_buf_d1;
reg m_axi_hash_AWVALID;
reg m_axi_hash_WVALID;
reg m_axi_hash_BREADY;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    hash_blk_n_AW;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_2_fu_909_p2;
reg   [0:0] ptr_cmp_reg_1248;
reg    hash_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_22_reg_1312;
reg   [0:0] tmp_22_reg_1312_pp0_iter1_reg;
reg    hash_blk_n_B;
wire    ap_CS_fsm_state21;
reg   [5:0] i_2_reg_568;
reg   [31:0] reg_635;
wire    ap_CS_fsm_state3;
wire    grp_p_hash_fu_579_ap_ready;
wire    grp_p_hash_fu_579_ap_done;
wire    ap_CS_fsm_state9;
reg   [31:0] reg_640;
reg   [31:0] reg_645;
reg   [31:0] reg_650;
reg   [31:0] reg_655;
reg   [31:0] reg_660;
reg   [31:0] reg_665;
reg   [31:0] reg_670;
wire   [10:0] tmp_10_fu_679_p1;
reg   [10:0] tmp_10_reg_1182;
reg   [31:0] hash_addr_reg_1187;
wire   [31:0] j_cast_fu_693_p1;
wire   [31:0] i_fu_702_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_5_fu_719_p2;
reg   [0:0] tmp_5_reg_1206;
wire   [0:0] exitcond_fu_708_p2;
wire   [3:0] j_1_fu_730_p2;
wire    ap_CS_fsm_state4;
reg   [7:0] tmp_48_i4_reg_1218;
wire   [0:0] tmp_7_fu_724_p2;
reg   [7:0] tmp_48_i6_reg_1223;
wire   [7:0] tmp_34_fu_866_p1;
reg   [7:0] tmp_34_reg_1228;
reg   [7:0] tmp_48_i9_reg_1233;
reg   [7:0] tmp_48_i1_reg_1238;
reg   [7:0] tmp_48_i3_reg_1243;
wire   [0:0] ptr_cmp_fu_900_p2;
wire   [4:0] i_1_cast3_fu_905_p1;
reg   [4:0] i_1_cast3_reg_1252;
reg    ap_sig_ioackin_m_axi_hash_AWREADY;
reg    ap_predicate_op178_writereq_state10;
reg    ap_block_state10_io;
wire   [2:0] i_3_fu_915_p2;
reg   [2:0] i_3_reg_1261;
wire   [7:0] tmp_36_fu_935_p1;
reg   [7:0] tmp_36_reg_1266;
wire  signed [2:0] tmp_4_fu_950_p2;
reg  signed [2:0] tmp_4_reg_1271;
wire  signed [3:0] tmp_27_fu_972_p3;
reg  signed [3:0] tmp_27_reg_1277;
wire   [7:0] tmp_39_fu_991_p1;
reg   [7:0] tmp_39_reg_1282;
wire   [7:0] tmp_40_fu_1001_p1;
reg   [7:0] tmp_40_reg_1287;
wire   [7:0] tmp_41_fu_1011_p1;
reg   [7:0] tmp_41_reg_1292;
wire   [7:0] tmp_42_fu_1021_p1;
reg   [7:0] tmp_42_reg_1297;
wire   [7:0] tmp_43_fu_1031_p1;
reg   [7:0] tmp_43_reg_1302;
wire   [5:0] j_2_fu_1035_p2;
reg   [5:0] j_2_reg_1307;
wire   [0:0] tmp_22_fu_1093_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state14_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_state16_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_hash_WREADY;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] i_4_fu_1099_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] hash_tmp_q0;
reg   [7:0] hash_tmp_load_reg_1326;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state14;
reg   [4:0] hash_tmp_address0;
reg    hash_tmp_ce0;
reg    hash_tmp_we0;
reg   [7:0] hash_tmp_d0;
reg   [4:0] hash_tmp_address1;
reg    hash_tmp_ce1;
reg    hash_tmp_we1;
reg   [7:0] hash_tmp_d1;
wire    grp_p_hash_fu_579_ap_start;
wire    grp_p_hash_fu_579_ap_idle;
wire   [5:0] grp_p_hash_fu_579_sha256_buf_address0;
wire    grp_p_hash_fu_579_sha256_buf_ce0;
wire   [5:0] grp_p_hash_fu_579_sha256_buf_address1;
wire    grp_p_hash_fu_579_sha256_buf_ce1;
reg   [31:0] grp_p_hash_fu_579_sha256hash_0_read;
reg   [31:0] grp_p_hash_fu_579_sha256hash_1_read;
reg   [31:0] grp_p_hash_fu_579_sha256hash_2_read;
reg   [31:0] grp_p_hash_fu_579_sha256hash_3_read;
reg   [31:0] grp_p_hash_fu_579_sha256hash_4_read;
reg   [31:0] grp_p_hash_fu_579_sha256hash_5_read;
reg   [31:0] grp_p_hash_fu_579_sha256hash_6_read;
reg   [31:0] grp_p_hash_fu_579_sha256hash_7_read;
wire   [31:0] grp_p_hash_fu_579_ap_return_0;
wire   [31:0] grp_p_hash_fu_579_ap_return_1;
wire   [31:0] grp_p_hash_fu_579_ap_return_2;
wire   [31:0] grp_p_hash_fu_579_ap_return_3;
wire   [31:0] grp_p_hash_fu_579_ap_return_4;
wire   [31:0] grp_p_hash_fu_579_ap_return_5;
wire   [31:0] grp_p_hash_fu_579_ap_return_6;
wire   [31:0] grp_p_hash_fu_579_ap_return_7;
reg   [31:0] i_0_in_reg_445;
reg   [3:0] j1_reg_454;
reg   [31:0] sha256hash_reg_465;
reg   [31:0] sha256hash_1_reg_475;
reg   [31:0] sha256hash_2_reg_485;
reg   [31:0] sha256hash_3_reg_495;
reg   [31:0] sha256hash_4_reg_505;
reg   [31:0] sha256hash_5_reg_515;
reg   [31:0] sha256hash_6_reg_525;
reg   [31:0] sha256hash_7_reg_535;
reg   [2:0] i_1_reg_545;
wire    ap_CS_fsm_state13;
reg   [5:0] n_assign_1_reg_557;
reg    grp_p_hash_fu_579_ap_start_reg;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_fu_697_p1;
wire   [63:0] tmp_6_fu_714_p1;
wire   [63:0] tmp_8_fu_736_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_9_fu_956_p1;
wire   [63:0] tmp_11_fu_980_p1;
wire   [63:0] tmp_3_fu_1041_p1;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_13_fu_1049_p1;
wire   [63:0] tmp_15_fu_1062_p1;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_17_fu_1072_p1;
wire   [63:0] tmp_19_fu_1080_p1;
wire   [63:0] tmp_21_fu_1088_p1;
wire   [63:0] tmp_24_fu_1105_p1;
wire  signed [63:0] tmp_s_fu_675_p1;
reg    ap_reg_ioackin_m_axi_hash_AWREADY;
reg    ap_reg_ioackin_m_axi_hash_WREADY;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_48_i_fu_828_p2;
wire   [7:0] tmp_37_fu_945_p1;
wire   [7:0] tmp_38_fu_967_p1;
wire  signed [31:0] tmp_s_fu_675_p0;
wire  signed [31:0] tmp_10_fu_679_p0;
wire   [2:0] j_fu_689_p1;
wire   [31:0] tmp_18_fu_741_p2;
wire   [31:0] tmp_i_fu_746_p2;
wire   [0:0] tmp_i_9_fu_752_p2;
wire   [31:0] tmp_89_i_fu_757_p2;
wire   [4:0] tmp_26_fu_772_p1;
wire   [12:0] tmp_31_fu_786_p1;
wire   [20:0] tmp_33_fu_800_p1;
wire   [23:0] tmp_25_fu_803_p3;
wire   [23:0] tmp_32_fu_797_p1;
wire   [15:0] tmp_14_fu_789_p3;
wire   [15:0] tmp_30_fu_783_p1;
wire   [7:0] tmp_12_fu_775_p3;
wire   [7:0] tmp_20_fu_769_p1;
wire   [15:0] sha256_bits_0_write_2_fu_822_p2;
wire   [23:0] sha256_bits_0_write_1_fu_816_p2;
wire   [31:0] sha256_bits_0_write_fu_811_p2;
wire   [31:0] x_assign_1_fu_762_p3;
wire   [4:0] tmp_35_fu_921_p1;
wire   [31:0] tmp_i1_cast_fu_925_p1;
wire   [31:0] tmp_i6_fu_929_p2;
wire   [31:0] tmp_i7_fu_939_p2;
wire   [31:0] tmp_i9_fu_961_p2;
wire   [31:0] tmp_i1_fu_985_p2;
wire   [31:0] tmp_i2_fu_995_p2;
wire   [31:0] tmp_i3_fu_1005_p2;
wire   [31:0] tmp_i4_fu_1015_p2;
wire   [31:0] tmp_i5_fu_1025_p2;
wire  signed [3:0] tmp_12_cast9_fu_1046_p1;
wire   [4:0] tmp_28_fu_1054_p3;
wire   [4:0] tmp_16_fu_1067_p2;
wire  signed [4:0] tmp_18_cast8_fu_1077_p1;
wire  signed [4:0] tmp_20_cast7_fu_1085_p1;
reg   [18:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_p_hash_fu_579_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_m_axi_hash_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_hash_WREADY = 1'b0;
end

sha256_done_hash_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
hash_tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hash_tmp_address0),
    .ce0(hash_tmp_ce0),
    .we0(hash_tmp_we0),
    .d0(hash_tmp_d0),
    .q0(hash_tmp_q0),
    .address1(hash_tmp_address1),
    .ce1(hash_tmp_ce1),
    .we1(hash_tmp_we1),
    .d1(hash_tmp_d1)
);

p_hash grp_p_hash_fu_579(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_p_hash_fu_579_ap_start),
    .ap_done(grp_p_hash_fu_579_ap_done),
    .ap_idle(grp_p_hash_fu_579_ap_idle),
    .ap_ready(grp_p_hash_fu_579_ap_ready),
    .sha256_buf_address0(grp_p_hash_fu_579_sha256_buf_address0),
    .sha256_buf_ce0(grp_p_hash_fu_579_sha256_buf_ce0),
    .sha256_buf_q0(sha256_buf_q0),
    .sha256_buf_address1(grp_p_hash_fu_579_sha256_buf_address1),
    .sha256_buf_ce1(grp_p_hash_fu_579_sha256_buf_ce1),
    .sha256_buf_q1(sha256_buf_q1),
    .sha256hash_0_read(grp_p_hash_fu_579_sha256hash_0_read),
    .sha256hash_1_read(grp_p_hash_fu_579_sha256hash_1_read),
    .sha256hash_2_read(grp_p_hash_fu_579_sha256hash_2_read),
    .sha256hash_3_read(grp_p_hash_fu_579_sha256hash_3_read),
    .sha256hash_4_read(grp_p_hash_fu_579_sha256hash_4_read),
    .sha256hash_5_read(grp_p_hash_fu_579_sha256hash_5_read),
    .sha256hash_6_read(grp_p_hash_fu_579_sha256hash_6_read),
    .sha256hash_7_read(grp_p_hash_fu_579_sha256hash_7_read),
    .ap_return_0(grp_p_hash_fu_579_ap_return_0),
    .ap_return_1(grp_p_hash_fu_579_ap_return_1),
    .ap_return_2(grp_p_hash_fu_579_ap_return_2),
    .ap_return_3(grp_p_hash_fu_579_ap_return_3),
    .ap_return_4(grp_p_hash_fu_579_ap_return_4),
    .ap_return_5(grp_p_hash_fu_579_ap_return_5),
    .ap_return_6(grp_p_hash_fu_579_ap_return_6),
    .ap_return_7(grp_p_hash_fu_579_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & ((ptr_cmp_reg_1248 == 1'd1) | (tmp_2_fu_909_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state14)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & ((ptr_cmp_reg_1248 == 1'd1) | (tmp_2_fu_909_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_hash_AWREADY <= 1'b0;
    end else begin
        if (((ap_predicate_op178_writereq_state10 == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            if ((1'b0 == ap_block_state10_io)) begin
                ap_reg_ioackin_m_axi_hash_AWREADY <= 1'b0;
            end else if ((m_axi_hash_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_hash_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_hash_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_22_reg_1312_pp0_iter1_reg == 1'd0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_hash_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_hash_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_hash_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_p_hash_fu_579_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd1)))) begin
            grp_p_hash_fu_579_ap_start_reg <= 1'b1;
        end else if ((grp_p_hash_fu_579_ap_ready == 1'b1)) begin
            grp_p_hash_fu_579_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd0))) begin
        i_0_in_reg_445 <= i_fu_702_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_in_reg_445 <= j_cast_fu_693_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_p_hash_fu_579_ap_done == 1'b1) & (ptr_cmp_reg_1248 == 1'd0))) begin
        i_1_reg_545 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_1_reg_545 <= i_3_reg_1261;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_22_fu_1093_p2 == 1'd0))) begin
        i_2_reg_568 <= i_4_fu_1099_p2;
    end else if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & ((ptr_cmp_reg_1248 == 1'd1) | (tmp_2_fu_909_p2 == 1'd1)))) begin
        i_2_reg_568 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_5_reg_1206 == 1'd1) & (tmp_7_fu_724_p2 == 1'd0))) begin
        j1_reg_454 <= j_1_fu_730_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_p_hash_fu_579_ap_done == 1'b1))) begin
        j1_reg_454 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_p_hash_fu_579_ap_done == 1'b1) & (ptr_cmp_reg_1248 == 1'd0))) begin
        n_assign_1_reg_557 <= 6'd24;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        n_assign_1_reg_557 <= j_2_reg_1307;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_724_p2 == 1'd1) & (tmp_5_reg_1206 == 1'd1))) begin
        sha256hash_1_reg_475 <= reg_640;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
        sha256hash_1_reg_475 <= sha256hash_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_724_p2 == 1'd1) & (tmp_5_reg_1206 == 1'd1))) begin
        sha256hash_2_reg_485 <= reg_645;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
        sha256hash_2_reg_485 <= sha256hash_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_724_p2 == 1'd1) & (tmp_5_reg_1206 == 1'd1))) begin
        sha256hash_3_reg_495 <= reg_650;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
        sha256hash_3_reg_495 <= sha256hash_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_724_p2 == 1'd1) & (tmp_5_reg_1206 == 1'd1))) begin
        sha256hash_4_reg_505 <= reg_655;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
        sha256hash_4_reg_505 <= sha256hash_4_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_724_p2 == 1'd1) & (tmp_5_reg_1206 == 1'd1))) begin
        sha256hash_5_reg_515 <= reg_660;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
        sha256hash_5_reg_515 <= sha256hash_5_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_724_p2 == 1'd1) & (tmp_5_reg_1206 == 1'd1))) begin
        sha256hash_6_reg_525 <= reg_665;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
        sha256hash_6_reg_525 <= sha256hash_6_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_724_p2 == 1'd1) & (tmp_5_reg_1206 == 1'd1))) begin
        sha256hash_7_reg_535 <= reg_670;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
        sha256hash_7_reg_535 <= sha256hash_7_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_724_p2 == 1'd1) & (tmp_5_reg_1206 == 1'd1))) begin
        sha256hash_reg_465 <= reg_635;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
        sha256hash_reg_465 <= sha256hash_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        hash_addr_reg_1187 <= tmp_s_fu_675_p1;
        tmp_10_reg_1182 <= tmp_10_fu_679_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_22_reg_1312 == 1'd0))) begin
        hash_tmp_load_reg_1326 <= hash_tmp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (ptr_cmp_reg_1248 == 1'd0))) begin
        i_1_cast3_reg_1252[2 : 0] <= i_1_cast3_fu_905_p1[2 : 0];
        i_3_reg_1261 <= i_3_fu_915_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (ptr_cmp_reg_1248 == 1'd0) & (tmp_2_fu_909_p2 == 1'd0))) begin
        j_2_reg_1307 <= j_2_fu_1035_p2;
        tmp_27_reg_1277[2 : 0] <= tmp_27_fu_972_p3[2 : 0];
        tmp_36_reg_1266 <= tmp_36_fu_935_p1;
        tmp_39_reg_1282 <= tmp_39_fu_991_p1;
        tmp_40_reg_1287 <= tmp_40_fu_1001_p1;
        tmp_41_reg_1292 <= tmp_41_fu_1011_p1;
        tmp_42_reg_1297 <= tmp_42_fu_1021_p1;
        tmp_43_reg_1302 <= tmp_43_fu_1031_p1;
        tmp_4_reg_1271 <= tmp_4_fu_950_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((tmp_7_fu_724_p2 == 1'd1) | (tmp_5_reg_1206 == 1'd0)))) begin
        ptr_cmp_reg_1248 <= ptr_cmp_fu_900_p2;
        tmp_34_reg_1228 <= tmp_34_fu_866_p1;
        tmp_48_i1_reg_1238 <= {{x_assign_1_fu_762_p3[23:16]}};
        tmp_48_i3_reg_1243 <= {{x_assign_1_fu_762_p3[31:24]}};
        tmp_48_i4_reg_1218 <= {{sha256_bits_0_write_1_fu_816_p2[23:16]}};
        tmp_48_i6_reg_1223 <= {{sha256_bits_0_write_fu_811_p2[31:24]}};
        tmp_48_i9_reg_1233 <= {{x_assign_1_fu_762_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (grp_p_hash_fu_579_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (grp_p_hash_fu_579_ap_done == 1'b1)))) begin
        reg_635 <= grp_p_hash_fu_579_ap_return_0;
        reg_640 <= grp_p_hash_fu_579_ap_return_1;
        reg_645 <= grp_p_hash_fu_579_ap_return_2;
        reg_650 <= grp_p_hash_fu_579_ap_return_3;
        reg_655 <= grp_p_hash_fu_579_ap_return_4;
        reg_660 <= grp_p_hash_fu_579_ap_return_5;
        reg_665 <= grp_p_hash_fu_579_ap_return_6;
        reg_670 <= grp_p_hash_fu_579_ap_return_7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_22_reg_1312 <= tmp_22_fu_1093_p2;
        tmp_22_reg_1312_pp0_iter1_reg <= tmp_22_reg_1312;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1))) begin
        tmp_5_reg_1206 <= tmp_5_fu_719_p2;
    end
end

always @ (*) begin
    if ((tmp_22_fu_1093_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state21) & (m_axi_hash_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (m_axi_hash_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_hash_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_hash_AWREADY = m_axi_hash_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_hash_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_hash_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_hash_WREADY = m_axi_hash_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_hash_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_p_hash_fu_579_sha256hash_0_read = sha256hash_reg_465;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_hash_fu_579_sha256hash_0_read = sha256hash_0_read;
    end else begin
        grp_p_hash_fu_579_sha256hash_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_p_hash_fu_579_sha256hash_1_read = sha256hash_1_reg_475;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_hash_fu_579_sha256hash_1_read = sha256hash_1_read;
    end else begin
        grp_p_hash_fu_579_sha256hash_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_p_hash_fu_579_sha256hash_2_read = sha256hash_2_reg_485;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_hash_fu_579_sha256hash_2_read = sha256hash_2_read;
    end else begin
        grp_p_hash_fu_579_sha256hash_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_p_hash_fu_579_sha256hash_3_read = sha256hash_3_reg_495;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_hash_fu_579_sha256hash_3_read = sha256hash_3_read;
    end else begin
        grp_p_hash_fu_579_sha256hash_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_p_hash_fu_579_sha256hash_4_read = sha256hash_4_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_hash_fu_579_sha256hash_4_read = sha256hash_4_read;
    end else begin
        grp_p_hash_fu_579_sha256hash_4_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_p_hash_fu_579_sha256hash_5_read = sha256hash_5_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_hash_fu_579_sha256hash_5_read = sha256hash_5_read;
    end else begin
        grp_p_hash_fu_579_sha256hash_5_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_p_hash_fu_579_sha256hash_6_read = sha256hash_6_reg_525;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_hash_fu_579_sha256hash_6_read = sha256hash_6_read;
    end else begin
        grp_p_hash_fu_579_sha256hash_6_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_p_hash_fu_579_sha256hash_7_read = sha256hash_7_reg_535;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_hash_fu_579_sha256hash_7_read = sha256hash_7_read;
    end else begin
        grp_p_hash_fu_579_sha256hash_7_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ((ptr_cmp_reg_1248 == 1'd1) | (tmp_2_fu_909_p2 == 1'd1)))) begin
        hash_blk_n_AW = m_axi_hash_AWREADY;
    end else begin
        hash_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        hash_blk_n_B = m_axi_hash_BVALID;
    end else begin
        hash_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (tmp_22_reg_1312_pp0_iter1_reg == 1'd0))) begin
        hash_blk_n_W = m_axi_hash_WREADY;
    end else begin
        hash_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        hash_tmp_address0 = tmp_24_fu_1105_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        hash_tmp_address0 = tmp_19_fu_1080_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        hash_tmp_address0 = tmp_15_fu_1062_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        hash_tmp_address0 = tmp_3_fu_1041_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hash_tmp_address0 = tmp_9_fu_956_p1;
    end else begin
        hash_tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        hash_tmp_address1 = tmp_21_fu_1088_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        hash_tmp_address1 = tmp_17_fu_1072_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        hash_tmp_address1 = tmp_13_fu_1049_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hash_tmp_address1 = tmp_11_fu_980_p1;
    end else begin
        hash_tmp_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10)))) begin
        hash_tmp_ce0 = 1'b1;
    end else begin
        hash_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10)))) begin
        hash_tmp_ce1 = 1'b1;
    end else begin
        hash_tmp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        hash_tmp_d0 = tmp_42_reg_1297;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        hash_tmp_d0 = tmp_40_reg_1287;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        hash_tmp_d0 = tmp_36_reg_1266;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hash_tmp_d0 = tmp_37_fu_945_p1;
    end else begin
        hash_tmp_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        hash_tmp_d1 = tmp_43_reg_1302;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        hash_tmp_d1 = tmp_41_reg_1292;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        hash_tmp_d1 = tmp_39_reg_1282;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hash_tmp_d1 = tmp_38_fu_967_p1;
    end else begin
        hash_tmp_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (ptr_cmp_reg_1248 == 1'd0) & (tmp_2_fu_909_p2 == 1'd0)))) begin
        hash_tmp_we0 = 1'b1;
    end else begin
        hash_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (ptr_cmp_reg_1248 == 1'd0) & (tmp_2_fu_909_p2 == 1'd0)))) begin
        hash_tmp_we1 = 1'b1;
    end else begin
        hash_tmp_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_hash_AWREADY == 1'b0) & (ap_predicate_op178_writereq_state10 == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_hash_AWVALID = 1'b1;
    end else begin
        m_axi_hash_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (m_axi_hash_BVALID == 1'b1))) begin
        m_axi_hash_BREADY = 1'b1;
    end else begin
        m_axi_hash_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_hash_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_22_reg_1312_pp0_iter1_reg == 1'd0))) begin
        m_axi_hash_WVALID = 1'b1;
    end else begin
        m_axi_hash_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_address0 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_address0 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_address0 = 64'd60;
    end else if (((1'b1 == ap_CS_fsm_state4) & ((tmp_7_fu_724_p2 == 1'd1) | (tmp_5_reg_1206 == 1'd0)))) begin
        sha256_buf_address0 = 64'd63;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_5_reg_1206 == 1'd1) & (tmp_7_fu_724_p2 == 1'd0))) begin
        sha256_buf_address0 = tmp_8_fu_736_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd0))) begin
        sha256_buf_address0 = tmp_6_fu_714_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        sha256_buf_address0 = tmp_fu_697_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        sha256_buf_address0 = grp_p_hash_fu_579_sha256_buf_address0;
    end else begin
        sha256_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_address1 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_address1 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_address1 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha256_buf_address1 = 64'd62;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        sha256_buf_address1 = grp_p_hash_fu_579_sha256_buf_address1;
    end else begin
        sha256_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & ((tmp_7_fu_724_p2 == 1'd1) | (tmp_5_reg_1206 == 1'd0))) | ((1'b1 == ap_CS_fsm_state4) & (tmp_5_reg_1206 == 1'd1) & (tmp_7_fu_724_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd0)))) begin
        sha256_buf_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        sha256_buf_ce0 = grp_p_hash_fu_579_sha256_buf_ce0;
    end else begin
        sha256_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        sha256_buf_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        sha256_buf_ce1 = grp_p_hash_fu_579_sha256_buf_ce1;
    end else begin
        sha256_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_d0 = tmp_48_i3_reg_1243;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_d0 = tmp_48_i9_reg_1233;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_d0 = tmp_48_i6_reg_1223;
    end else if (((1'b1 == ap_CS_fsm_state4) & ((tmp_7_fu_724_p2 == 1'd1) | (tmp_5_reg_1206 == 1'd0)))) begin
        sha256_buf_d0 = tmp_48_i_fu_828_p2;
    end else if ((((1'b1 == ap_CS_fsm_state4) & (tmp_5_reg_1206 == 1'd1) & (tmp_7_fu_724_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd0)))) begin
        sha256_buf_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        sha256_buf_d0 = 8'd128;
    end else begin
        sha256_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_d1 = tmp_48_i1_reg_1238;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_d1 = tmp_34_reg_1228;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_d1 = tmp_48_i4_reg_1218;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha256_buf_d1 = {{sha256_bits_0_write_2_fu_822_p2[15:8]}};
    end else begin
        sha256_buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & ((tmp_7_fu_724_p2 == 1'd1) | (tmp_5_reg_1206 == 1'd0))) | ((1'b1 == ap_CS_fsm_state4) & (tmp_5_reg_1206 == 1'd1) & (tmp_7_fu_724_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd0)))) begin
        sha256_buf_we0 = 1'b1;
    end else begin
        sha256_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state4) & ((tmp_7_fu_724_p2 == 1'd1) | (tmp_5_reg_1206 == 1'd0))))) begin
        sha256_buf_we1 = 1'b1;
    end else begin
        sha256_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_708_p2 == 1'd1) & (tmp_5_fu_719_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_p_hash_fu_579_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((tmp_7_fu_724_p2 == 1'd1) | (tmp_5_reg_1206 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_p_hash_fu_579_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & ((ptr_cmp_reg_1248 == 1'd1) | (tmp_2_fu_909_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (ptr_cmp_reg_1248 == 1'd0) & (tmp_2_fu_909_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_22_fu_1093_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_22_fu_1093_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (m_axi_hash_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_io = ((ap_sig_ioackin_m_axi_hash_AWREADY == 1'b0) & (ap_predicate_op178_writereq_state10 == 1'b1));
end

assign ap_block_state14_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((ap_sig_ioackin_m_axi_hash_WREADY == 1'b0) & (tmp_22_reg_1312_pp0_iter1_reg == 1'd0));
end

assign ap_block_state16_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op178_writereq_state10 = ((ptr_cmp_reg_1248 == 1'd1) | (tmp_2_fu_909_p2 == 1'd1));
end

assign exitcond_fu_708_p2 = ((i_0_in_reg_445 == 32'd7) ? 1'b1 : 1'b0);

assign grp_p_hash_fu_579_ap_start = grp_p_hash_fu_579_ap_start_reg;

assign i_1_cast3_fu_905_p1 = i_1_reg_545;

assign i_3_fu_915_p2 = (i_1_reg_545 + 3'd1);

assign i_4_fu_1099_p2 = (i_2_reg_568 + 6'd1);

assign i_fu_702_p2 = (i_0_in_reg_445 + 32'd1);

assign j_1_fu_730_p2 = (j1_reg_454 + 4'd1);

assign j_2_fu_1035_p2 = ($signed(6'd56) + $signed(n_assign_1_reg_557));

assign j_cast_fu_693_p1 = j_fu_689_p1;

assign j_fu_689_p1 = sha256_len[2:0];

assign m_axi_hash_ARADDR = 32'd0;

assign m_axi_hash_ARBURST = 2'd0;

assign m_axi_hash_ARCACHE = 4'd0;

assign m_axi_hash_ARID = 1'd0;

assign m_axi_hash_ARLEN = 32'd0;

assign m_axi_hash_ARLOCK = 2'd0;

assign m_axi_hash_ARPROT = 3'd0;

assign m_axi_hash_ARQOS = 4'd0;

assign m_axi_hash_ARREGION = 4'd0;

assign m_axi_hash_ARSIZE = 3'd0;

assign m_axi_hash_ARUSER = 1'd0;

assign m_axi_hash_ARVALID = 1'b0;

assign m_axi_hash_AWADDR = hash_addr_reg_1187;

assign m_axi_hash_AWBURST = 2'd0;

assign m_axi_hash_AWCACHE = 4'd0;

assign m_axi_hash_AWID = 1'd0;

assign m_axi_hash_AWLEN = 32'd32;

assign m_axi_hash_AWLOCK = 2'd0;

assign m_axi_hash_AWPROT = 3'd0;

assign m_axi_hash_AWQOS = 4'd0;

assign m_axi_hash_AWREGION = 4'd0;

assign m_axi_hash_AWSIZE = 3'd0;

assign m_axi_hash_AWUSER = 1'd0;

assign m_axi_hash_RREADY = 1'b0;

assign m_axi_hash_WDATA = hash_tmp_load_reg_1326;

assign m_axi_hash_WID = 1'd0;

assign m_axi_hash_WLAST = 1'b0;

assign m_axi_hash_WSTRB = 1'd1;

assign m_axi_hash_WUSER = 1'd0;

assign ptr_cmp_fu_900_p2 = ((tmp_10_reg_1182 == 11'd1278) ? 1'b1 : 1'b0);

assign sha256_bits_0_write_1_fu_816_p2 = (tmp_25_fu_803_p3 + tmp_32_fu_797_p1);

assign sha256_bits_0_write_2_fu_822_p2 = (tmp_14_fu_789_p3 + tmp_30_fu_783_p1);

assign sha256_bits_0_write_fu_811_p2 = (sha256_bits_0_read + tmp_18_fu_741_p2);

assign tmp_10_fu_679_p0 = hash_offset;

assign tmp_10_fu_679_p1 = tmp_10_fu_679_p0[10:0];

assign tmp_11_fu_980_p1 = $unsigned(tmp_27_fu_972_p3);

assign tmp_12_cast9_fu_1046_p1 = tmp_4_reg_1271;

assign tmp_12_fu_775_p3 = {{tmp_26_fu_772_p1}, {3'd0}};

assign tmp_13_fu_1049_p1 = $unsigned(tmp_12_cast9_fu_1046_p1);

assign tmp_14_fu_789_p3 = {{tmp_31_fu_786_p1}, {3'd0}};

assign tmp_15_fu_1062_p1 = tmp_28_fu_1054_p3;

assign tmp_16_fu_1067_p2 = ($signed(5'd20) + $signed(i_1_cast3_reg_1252));

assign tmp_17_fu_1072_p1 = tmp_16_fu_1067_p2;

assign tmp_18_cast8_fu_1077_p1 = tmp_27_reg_1277;

assign tmp_18_fu_741_p2 = sha256_len << 32'd3;

assign tmp_19_fu_1080_p1 = $unsigned(tmp_18_cast8_fu_1077_p1);

assign tmp_20_cast7_fu_1085_p1 = tmp_4_reg_1271;

assign tmp_20_fu_769_p1 = sha256_bits_0_read[7:0];

assign tmp_21_fu_1088_p1 = $unsigned(tmp_20_cast7_fu_1085_p1);

assign tmp_22_fu_1093_p2 = ((i_2_reg_568 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_24_fu_1105_p1 = i_2_reg_568;

assign tmp_25_fu_803_p3 = {{tmp_33_fu_800_p1}, {3'd0}};

assign tmp_26_fu_772_p1 = sha256_len[4:0];

assign tmp_27_fu_972_p3 = {{1'd1}, {i_1_reg_545}};

assign tmp_28_fu_1054_p3 = {{2'd2}, {i_1_reg_545}};

assign tmp_2_fu_909_p2 = ((i_1_reg_545 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_30_fu_783_p1 = sha256_bits_0_read[15:0];

assign tmp_31_fu_786_p1 = sha256_len[12:0];

assign tmp_32_fu_797_p1 = sha256_bits_0_read[23:0];

assign tmp_33_fu_800_p1 = sha256_len[20:0];

assign tmp_34_fu_866_p1 = x_assign_1_fu_762_p3[7:0];

assign tmp_35_fu_921_p1 = n_assign_1_reg_557[4:0];

assign tmp_36_fu_935_p1 = tmp_i6_fu_929_p2[7:0];

assign tmp_37_fu_945_p1 = tmp_i7_fu_939_p2[7:0];

assign tmp_38_fu_967_p1 = tmp_i9_fu_961_p2[7:0];

assign tmp_39_fu_991_p1 = tmp_i1_fu_985_p2[7:0];

assign tmp_3_fu_1041_p1 = i_1_reg_545;

assign tmp_40_fu_1001_p1 = tmp_i2_fu_995_p2[7:0];

assign tmp_41_fu_1011_p1 = tmp_i3_fu_1005_p2[7:0];

assign tmp_42_fu_1021_p1 = tmp_i4_fu_1015_p2[7:0];

assign tmp_43_fu_1031_p1 = tmp_i5_fu_1025_p2[7:0];

assign tmp_48_i_fu_828_p2 = (tmp_12_fu_775_p3 + tmp_20_fu_769_p1);

assign tmp_4_fu_950_p2 = (i_1_reg_545 ^ 3'd4);

assign tmp_5_fu_719_p2 = ((sha256_len > 32'd55) ? 1'b1 : 1'b0);

assign tmp_6_fu_714_p1 = i_fu_702_p2;

assign tmp_7_fu_724_p2 = ((j1_reg_454 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_89_i_fu_757_p2 = (32'd1 + sha256_bits_1_read);

assign tmp_8_fu_736_p1 = j1_reg_454;

assign tmp_9_fu_956_p1 = $unsigned(tmp_4_fu_950_p2);

assign tmp_fu_697_p1 = j_fu_689_p1;

assign tmp_i1_cast_fu_925_p1 = tmp_35_fu_921_p1;

assign tmp_i1_fu_985_p2 = reg_650 >> tmp_i1_cast_fu_925_p1;

assign tmp_i2_fu_995_p2 = reg_655 >> tmp_i1_cast_fu_925_p1;

assign tmp_i3_fu_1005_p2 = reg_660 >> tmp_i1_cast_fu_925_p1;

assign tmp_i4_fu_1015_p2 = reg_665 >> tmp_i1_cast_fu_925_p1;

assign tmp_i5_fu_1025_p2 = reg_670 >> tmp_i1_cast_fu_925_p1;

assign tmp_i6_fu_929_p2 = reg_635 >> tmp_i1_cast_fu_925_p1;

assign tmp_i7_fu_939_p2 = reg_640 >> tmp_i1_cast_fu_925_p1;

assign tmp_i9_fu_961_p2 = reg_645 >> tmp_i1_cast_fu_925_p1;

assign tmp_i_9_fu_752_p2 = ((sha256_bits_0_read > tmp_i_fu_746_p2) ? 1'b1 : 1'b0);

assign tmp_i_fu_746_p2 = (tmp_18_fu_741_p2 ^ 32'd4294967295);

assign tmp_s_fu_675_p0 = hash_offset;

assign tmp_s_fu_675_p1 = tmp_s_fu_675_p0;

assign x_assign_1_fu_762_p3 = ((tmp_i_9_fu_752_p2[0:0] === 1'b1) ? tmp_89_i_fu_757_p2 : sha256_bits_1_read);

always @ (posedge ap_clk) begin
    i_1_cast3_reg_1252[4:3] <= 2'b00;
    tmp_27_reg_1277[3] <= 1'b1;
end

endmodule //sha256_done
