// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module p_hash (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sha256_buf_address0,
        sha256_buf_ce0,
        sha256_buf_q0,
        sha256_buf_address1,
        sha256_buf_ce1,
        sha256_buf_q1,
        sha256hash_0_read,
        sha256hash_1_read,
        sha256hash_2_read,
        sha256hash_3_read,
        sha256hash_4_read,
        sha256hash_5_read,
        sha256hash_6_read,
        sha256hash_7_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_pp0_stage1 = 8'd4;
parameter    ap_ST_fsm_state6 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_pp1_stage1 = 8'd32;
parameter    ap_ST_fsm_pp1_stage2 = 8'd64;
parameter    ap_ST_fsm_state13 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] sha256_buf_address0;
output   sha256_buf_ce0;
input  [7:0] sha256_buf_q0;
output  [5:0] sha256_buf_address1;
output   sha256_buf_ce1;
input  [7:0] sha256_buf_q1;
input  [31:0] sha256hash_0_read;
input  [31:0] sha256hash_1_read;
input  [31:0] sha256hash_2_read;
input  [31:0] sha256hash_3_read;
input  [31:0] sha256hash_4_read;
input  [31:0] sha256hash_5_read;
input  [31:0] sha256hash_6_read;
input  [31:0] sha256hash_7_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] sha256_buf_address0;
reg sha256_buf_ce0;
reg[5:0] sha256_buf_address1;
reg sha256_buf_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] K_address0;
reg    K_ce0;
wire   [31:0] K_q0;
reg   [4:0] x_assign_reg_321;
reg   [31:0] h_reg_333;
reg   [31:0] g_reg_343;
reg   [31:0] f_reg_354;
reg   [31:0] d1_reg_365;
reg   [31:0] d_reg_375;
reg   [31:0] c_reg_386;
reg   [31:0] b_reg_397;
reg   [31:0] h1_reg_408;
reg   [31:0] f_1_reg_419;
reg   [6:0] i_1_reg_430;
reg   [31:0] b_1_reg_442;
reg   [31:0] h_2_reg_453;
reg   [31:0] g_1_reg_464;
reg   [31:0] d_1_reg_477;
reg   [31:0] d_2_reg_488;
reg   [31:0] c_1_reg_500;
reg   [31:0] h_1_reg_513;
wire   [31:0] W_q0;
reg   [31:0] reg_525;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage1_iter0;
wire    ap_block_state11_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] exitcond_reg_1528;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state9_pp1_stage2_iter0;
wire    ap_block_state12_pp1_stage2_iter1;
wire    ap_block_pp1_stage2_11001;
wire   [0:0] tmp_fu_529_p2;
reg   [0:0] tmp_reg_1443;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_1443_pp0_iter1_reg;
wire   [5:0] tmp_i_fu_539_p3;
reg   [5:0] tmp_i_reg_1447;
wire   [63:0] tmp_26_fu_563_p1;
reg   [63:0] tmp_26_reg_1463;
wire   [4:0] i_fu_568_p2;
reg   [4:0] i_reg_1473;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] sha256_buf_load_reg_1478;
reg   [7:0] sha256_buf_load_1_reg_1483;
reg   [31:0] K_load_reg_1498;
wire   [31:0] tmp_105_i_fu_701_p2;
reg   [31:0] tmp_105_i_reg_1503;
wire   [31:0] tmp5_fu_707_p2;
reg   [31:0] tmp5_reg_1508;
wire   [31:0] tmp7_fu_712_p2;
reg   [31:0] tmp7_reg_1513;
wire   [31:0] e_fu_829_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] a_fu_841_p2;
wire   [0:0] exitcond_fu_847_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_reg_1528_pp1_iter1_reg;
wire   [31:0] W_q1;
reg   [31:0] W_load_reg_1542;
wire   [31:0] tmp14_fu_1037_p2;
reg   [31:0] tmp14_reg_1557;
wire   [6:0] i_5_fu_1043_p2;
reg   [6:0] i_5_reg_1562;
wire   [31:0] tmp_40_fu_1054_p2;
reg   [31:0] tmp_40_reg_1567;
wire   [63:0] tmp_43_fu_1059_p1;
reg   [63:0] tmp_43_reg_1572;
wire   [31:0] tmp19_fu_1094_p2;
reg   [31:0] tmp19_reg_1582;
wire   [31:0] tmp_44_fu_1184_p2;
reg   [31:0] tmp_44_reg_1587;
wire   [31:0] e_1_fu_1291_p2;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] a_1_fu_1301_p2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_subdone;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage0_subdone;
reg   [5:0] W_address0;
reg    W_ce0;
reg    W_we0;
reg   [5:0] W_address1;
reg    W_ce1;
reg    W_we1;
reg   [4:0] ap_phi_mux_x_assign_phi_fu_325_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] ap_phi_mux_i_1_phi_fu_434_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_25_fu_547_p1;
wire   [63:0] sum_i_cast_fu_558_p1;
wire   [63:0] sum2_i_cast_fu_579_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] sum4_i_cast_fu_589_p1;
wire   [63:0] tmp_33_fu_859_p1;
wire   [63:0] tmp_35_fu_870_p1;
wire   [63:0] tmp_37_fu_881_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] tmp_39_fu_892_p1;
wire    ap_block_pp1_stage2;
wire   [31:0] tmp_47_i_fu_594_p5;
wire   [3:0] tmp_45_fu_535_p1;
wire   [5:0] sum_i_fu_552_p2;
wire   [5:0] sum2_i_fu_574_p2;
wire   [5:0] sum4_i_fu_584_p2;
wire   [5:0] tmp_46_fu_615_p1;
wire   [25:0] tmp_i_i1_fu_605_p4;
wire   [10:0] tmp_47_fu_637_p1;
wire   [20:0] tmp_i1_i_fu_627_p4;
wire   [24:0] tmp_48_fu_659_p1;
wire   [6:0] tmp_i4_i_fu_649_p4;
wire   [31:0] tmp_51_i_i_fu_619_p3;
wire   [31:0] tmp_51_i6_i_fu_663_p3;
wire   [31:0] tmp2_fu_671_p2;
wire   [31:0] tmp_51_i3_i_fu_641_p3;
wire   [31:0] tmp_i3_fu_689_p2;
wire   [31:0] tmp_104_i_fu_695_p2;
wire   [31:0] tmp_i2_fu_683_p2;
wire   [31:0] tmp_92_i_fu_677_p2;
wire   [31:0] tmp6_fu_718_p2;
wire   [1:0] tmp_49_fu_737_p1;
wire   [29:0] tmp_i_i4_fu_727_p4;
wire   [12:0] tmp_50_fu_759_p1;
wire   [18:0] tmp_i1_i7_fu_749_p4;
wire   [21:0] tmp_51_fu_781_p1;
wire   [9:0] tmp_i4_i1_fu_771_p4;
wire   [31:0] tmp_51_i_i6_fu_741_p3;
wire   [31:0] tmp_51_i6_i1_fu_785_p3;
wire   [31:0] tmp8_fu_793_p2;
wire   [31:0] tmp_51_i3_i9_fu_763_p3;
wire   [31:0] tmp_i_85_fu_805_p2;
wire   [31:0] tmp_i6_fu_811_p2;
wire   [31:0] tmp_96_i_fu_817_p2;
wire   [31:0] tmp_30_fu_722_p2;
wire   [31:0] tmp_95_i_fu_799_p2;
wire   [31:0] tmp_97_i_fu_823_p2;
wire   [31:0] tmp9_fu_835_p2;
wire   [6:0] tmp_32_fu_853_p2;
wire   [6:0] tmp_34_fu_864_p2;
wire   [6:0] tmp_36_fu_875_p2;
wire   [6:0] tmp_38_fu_886_p2;
wire   [16:0] tmp_53_fu_907_p1;
wire   [14:0] tmp_i_i2_fu_897_p4;
wire   [18:0] tmp_54_fu_929_p1;
wire   [12:0] tmp_i1_i1_fu_919_p4;
wire   [21:0] tmp_98_i_fu_941_p4;
wire   [31:0] tmp_41_fu_951_p1;
wire   [31:0] tmp_51_i3_i1_fu_933_p3;
wire   [31:0] tmp10_fu_955_p2;
wire   [31:0] tmp_51_i_i1_fu_911_p3;
wire   [6:0] tmp_56_fu_977_p1;
wire   [24:0] tmp_i_i3_fu_967_p4;
wire   [17:0] tmp_57_fu_999_p1;
wire   [13:0] tmp_i1_i2_fu_989_p4;
wire   [28:0] tmp_101_i_fu_1011_p4;
wire   [31:0] tmp_42_fu_1021_p1;
wire   [31:0] tmp_51_i3_i2_fu_1003_p3;
wire   [31:0] tmp11_fu_1025_p2;
wire   [31:0] tmp_51_i_i2_fu_981_p3;
wire   [31:0] tmp_100_i_fu_961_p2;
wire   [31:0] tmp_103_i_fu_1031_p2;
wire   [31:0] tmp13_fu_1049_p2;
wire   [31:0] tmp_i7_fu_1070_p2;
wire   [31:0] tmp_104_i1_fu_1076_p2;
wire   [31:0] tmp_i3_86_fu_1064_p2;
wire   [31:0] tmp20_fu_1088_p2;
wire   [31:0] tmp_105_i1_fu_1082_p2;
wire   [5:0] tmp_58_fu_1110_p1;
wire   [25:0] tmp_i_i5_fu_1100_p4;
wire   [10:0] tmp_59_fu_1132_p1;
wire   [20:0] tmp_i1_i3_fu_1122_p4;
wire   [24:0] tmp_60_fu_1154_p1;
wire   [6:0] tmp_i4_i2_fu_1144_p4;
wire   [31:0] tmp_51_i_i3_fu_1114_p3;
wire   [31:0] tmp_51_i6_i2_fu_1158_p3;
wire   [31:0] tmp15_fu_1166_p2;
wire   [31:0] tmp_51_i3_i3_fu_1136_p3;
wire   [31:0] tmp_92_i1_fu_1172_p2;
wire   [31:0] tmp18_fu_1178_p2;
wire   [1:0] tmp_61_fu_1199_p1;
wire   [29:0] tmp_i_i6_fu_1189_p4;
wire   [12:0] tmp_62_fu_1221_p1;
wire   [18:0] tmp_i1_i4_fu_1211_p4;
wire   [21:0] tmp_63_fu_1243_p1;
wire   [9:0] tmp_i4_i3_fu_1233_p4;
wire   [31:0] tmp_51_i_i4_fu_1203_p3;
wire   [31:0] tmp_51_i6_i3_fu_1247_p3;
wire   [31:0] tmp21_fu_1255_p2;
wire   [31:0] tmp_51_i3_i4_fu_1225_p3;
wire   [31:0] tmp_i4_fu_1267_p2;
wire   [31:0] tmp_i8_fu_1273_p2;
wire   [31:0] tmp_96_i1_fu_1279_p2;
wire   [31:0] tmp_95_i1_fu_1261_p2;
wire   [31:0] tmp22_fu_1296_p2;
wire   [31:0] tmp_97_i1_fu_1285_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] sha256hash_0_write_s_fu_1307_p2;
wire   [31:0] sha256hash_1_write_s_fu_1312_p2;
wire   [31:0] sha256hash_2_write_s_fu_1317_p2;
wire   [31:0] sha256hash_3_write_s_fu_1322_p2;
wire   [31:0] sha256hash_4_write_s_fu_1327_p2;
wire   [31:0] sha256hash_5_write_s_fu_1332_p2;
wire   [31:0] sha256hash_6_write_s_fu_1337_p2;
wire   [31:0] sha256hash_7_write_s_fu_1342_p2;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

p_hash_K #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
K_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K_address0),
    .ce0(K_ce0),
    .q0(K_q0)
);

p_hash_W #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
W_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_address0),
    .ce0(W_ce0),
    .we0(W_we0),
    .d0(tmp_47_i_fu_594_p5),
    .q0(W_q0),
    .address1(W_address1),
    .ce1(W_ce1),
    .we1(W_we1),
    .d1(tmp_40_reg_1567),
    .q1(W_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_1443 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond_reg_1528 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_1_reg_442 <= b_reg_397;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        b_1_reg_442 <= a_1_fu_1301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443_pp0_iter1_reg == 1'd0))) begin
        b_reg_397 <= a_fu_841_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_reg_397 <= sha256hash_0_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_1_reg_500 <= c_reg_386;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        c_1_reg_500 <= b_1_reg_442;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443_pp0_iter1_reg == 1'd0))) begin
        c_reg_386 <= b_reg_397;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_386 <= sha256hash_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443_pp0_iter1_reg == 1'd0))) begin
        d1_reg_365 <= d_reg_375;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d1_reg_365 <= sha256hash_3_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        d_1_reg_477 <= d1_reg_365;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        d_1_reg_477 <= d_2_reg_488;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        d_2_reg_488 <= d_reg_375;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        d_2_reg_488 <= c_1_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443_pp0_iter1_reg == 1'd0))) begin
        d_reg_375 <= c_reg_386;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d_reg_375 <= sha256hash_2_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        f_1_reg_419 <= f_reg_354;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        f_1_reg_419 <= e_1_fu_1291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443_pp0_iter1_reg == 1'd0))) begin
        f_reg_354 <= e_fu_829_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_reg_354 <= sha256hash_4_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        g_1_reg_464 <= g_reg_343;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        g_1_reg_464 <= f_1_reg_419;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443_pp0_iter1_reg == 1'd0))) begin
        g_reg_343 <= f_reg_354;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        g_reg_343 <= sha256hash_5_read;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443_pp0_iter1_reg == 1'd0))) begin
        h1_reg_408 <= h_reg_333;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h1_reg_408 <= sha256hash_7_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_1_reg_513 <= h1_reg_408;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        h_1_reg_513 <= h_2_reg_453;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_2_reg_453 <= h_reg_333;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        h_2_reg_453 <= g_1_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443_pp0_iter1_reg == 1'd0))) begin
        h_reg_333 <= g_reg_343;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_333 <= sha256hash_6_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_430 <= 7'd16;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_1528 == 1'd0))) begin
        i_1_reg_430 <= i_5_reg_1562;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1443 == 1'd0))) begin
        x_assign_reg_321 <= i_reg_1473;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_assign_reg_321 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_1443 == 1'd0))) begin
        K_load_reg_1498 <= K_q0;
        sha256_buf_load_1_reg_1483 <= sha256_buf_q1;
        sha256_buf_load_reg_1478 <= sha256_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_1528 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        W_load_reg_1542 <= W_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_1528 <= exitcond_fu_847_p2;
        exitcond_reg_1528_pp1_iter1_reg <= exitcond_reg_1528;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528 == 1'd0))) begin
        i_5_reg_1562 <= i_5_fu_1043_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        i_reg_1473 <= i_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528 == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_1528 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        reg_525 <= W_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528 == 1'd0))) begin
        tmp14_reg_1557 <= tmp14_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_1528 == 1'd0))) begin
        tmp19_reg_1582 <= tmp19_fu_1094_p2;
        tmp_40_reg_1567 <= tmp_40_fu_1054_p2;
        tmp_43_reg_1572[6 : 0] <= tmp_43_fu_1059_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1443 == 1'd0))) begin
        tmp5_reg_1508 <= tmp5_fu_707_p2;
        tmp7_reg_1513 <= tmp7_fu_712_p2;
        tmp_105_i_reg_1503 <= tmp_105_i_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_529_p2 == 1'd0))) begin
        tmp_26_reg_1463[4 : 0] <= tmp_26_fu_563_p1[4 : 0];
        tmp_i_reg_1447[5 : 2] <= tmp_i_fu_539_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        tmp_44_reg_1587 <= tmp_44_fu_1184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_1443 <= tmp_fu_529_p2;
        tmp_reg_1443_pp0_iter1_reg <= tmp_reg_1443;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        K_address0 = tmp_43_fu_1059_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        K_address0 = tmp_26_fu_563_p1;
    end else begin
        K_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        K_ce0 = 1'b1;
    end else begin
        K_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        W_address0 = tmp_39_fu_892_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        W_address0 = tmp_33_fu_859_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_address0 = tmp_26_reg_1463;
    end else begin
        W_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        W_address1 = tmp_43_reg_1572;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        W_address1 = tmp_37_fu_881_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        W_address1 = tmp_35_fu_870_p1;
    end else begin
        W_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        W_ce0 = 1'b1;
    end else begin
        W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        W_ce1 = 1'b1;
    end else begin
        W_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1443 == 1'd0))) begin
        W_we0 = 1'b1;
    end else begin
        W_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (exitcond_reg_1528_pp1_iter1_reg == 1'd0))) begin
        W_we1 = 1'b1;
    end else begin
        W_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_1528 == 1'd0))) begin
        ap_phi_mux_i_1_phi_fu_434_p4 = i_5_reg_1562;
    end else begin
        ap_phi_mux_i_1_phi_fu_434_p4 = i_1_reg_430;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1443 == 1'd0))) begin
        ap_phi_mux_x_assign_phi_fu_325_p4 = i_reg_1473;
    end else begin
        ap_phi_mux_x_assign_phi_fu_325_p4 = x_assign_reg_321;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            sha256_buf_address0 = sum2_i_cast_fu_579_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sha256_buf_address0 = tmp_25_fu_547_p1;
        end else begin
            sha256_buf_address0 = 'bx;
        end
    end else begin
        sha256_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            sha256_buf_address1 = sum4_i_cast_fu_589_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sha256_buf_address1 = sum_i_cast_fu_558_p1;
        end else begin
            sha256_buf_address1 = 'bx;
        end
    end else begin
        sha256_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sha256_buf_ce0 = 1'b1;
    end else begin
        sha256_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sha256_buf_ce1 = 1'b1;
    end else begin
        sha256_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_fu_1301_p2 = (tmp22_fu_1296_p2 + tmp_97_i1_fu_1285_p2);

assign a_fu_841_p2 = (tmp_97_i_fu_823_p2 + tmp9_fu_835_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return_0 = sha256hash_0_write_s_fu_1307_p2;

assign ap_return_1 = sha256hash_1_write_s_fu_1312_p2;

assign ap_return_2 = sha256hash_2_write_s_fu_1317_p2;

assign ap_return_3 = sha256hash_3_write_s_fu_1322_p2;

assign ap_return_4 = sha256hash_4_write_s_fu_1327_p2;

assign ap_return_5 = sha256hash_5_write_s_fu_1332_p2;

assign ap_return_6 = sha256hash_6_write_s_fu_1337_p2;

assign ap_return_7 = sha256hash_7_write_s_fu_1342_p2;

assign e_1_fu_1291_p2 = (tmp_44_reg_1587 + d_1_reg_477);

assign e_fu_829_p2 = (d1_reg_365 + tmp_30_fu_722_p2);

assign exitcond_fu_847_p2 = ((ap_phi_mux_i_1_phi_fu_434_p4 == 7'd64) ? 1'b1 : 1'b0);

assign i_5_fu_1043_p2 = (7'd1 + i_1_reg_430);

assign i_fu_568_p2 = (x_assign_reg_321 + 5'd1);

assign sha256hash_0_write_s_fu_1307_p2 = (b_1_reg_442 + sha256hash_0_read);

assign sha256hash_1_write_s_fu_1312_p2 = (c_1_reg_500 + sha256hash_1_read);

assign sha256hash_2_write_s_fu_1317_p2 = (d_2_reg_488 + sha256hash_2_read);

assign sha256hash_3_write_s_fu_1322_p2 = (d_1_reg_477 + sha256hash_3_read);

assign sha256hash_4_write_s_fu_1327_p2 = (f_1_reg_419 + sha256hash_4_read);

assign sha256hash_5_write_s_fu_1332_p2 = (g_1_reg_464 + sha256hash_5_read);

assign sha256hash_6_write_s_fu_1337_p2 = (h_2_reg_453 + sha256hash_6_read);

assign sha256hash_7_write_s_fu_1342_p2 = (h_1_reg_513 + sha256hash_7_read);

assign sum2_i_cast_fu_579_p1 = sum2_i_fu_574_p2;

assign sum2_i_fu_574_p2 = (tmp_i_reg_1447 | 6'd2);

assign sum4_i_cast_fu_589_p1 = sum4_i_fu_584_p2;

assign sum4_i_fu_584_p2 = (tmp_i_reg_1447 | 6'd3);

assign sum_i_cast_fu_558_p1 = sum_i_fu_552_p2;

assign sum_i_fu_552_p2 = (tmp_i_fu_539_p3 | 6'd1);

assign tmp10_fu_955_p2 = (tmp_51_i3_i1_fu_933_p3 ^ tmp_41_fu_951_p1);

assign tmp11_fu_1025_p2 = (tmp_51_i3_i2_fu_1003_p3 ^ tmp_42_fu_1021_p1);

assign tmp13_fu_1049_p2 = (W_load_reg_1542 + reg_525);

assign tmp14_fu_1037_p2 = (tmp_100_i_fu_961_p2 + tmp_103_i_fu_1031_p2);

assign tmp15_fu_1166_p2 = (tmp_51_i_i3_fu_1114_p3 ^ tmp_51_i6_i2_fu_1158_p3);

assign tmp18_fu_1178_p2 = (K_q0 + tmp_92_i1_fu_1172_p2);

assign tmp19_fu_1094_p2 = (tmp20_fu_1088_p2 + tmp_105_i1_fu_1082_p2);

assign tmp20_fu_1088_p2 = (h_1_reg_513 + tmp_40_fu_1054_p2);

assign tmp21_fu_1255_p2 = (tmp_51_i_i4_fu_1203_p3 ^ tmp_51_i6_i3_fu_1247_p3);

assign tmp22_fu_1296_p2 = (tmp_95_i1_fu_1261_p2 + tmp_44_reg_1587);

assign tmp2_fu_671_p2 = (tmp_51_i_i_fu_619_p3 ^ tmp_51_i6_i_fu_663_p3);

assign tmp5_fu_707_p2 = (tmp_92_i_fu_677_p2 + K_load_reg_1498);

assign tmp6_fu_718_p2 = (tmp_105_i_reg_1503 + tmp7_reg_1513);

assign tmp7_fu_712_p2 = (tmp_47_i_fu_594_p5 + h1_reg_408);

assign tmp8_fu_793_p2 = (tmp_51_i_i6_fu_741_p3 ^ tmp_51_i6_i1_fu_785_p3);

assign tmp9_fu_835_p2 = (tmp_30_fu_722_p2 + tmp_95_i_fu_799_p2);

assign tmp_100_i_fu_961_p2 = (tmp_51_i_i1_fu_911_p3 ^ tmp10_fu_955_p2);

assign tmp_101_i_fu_1011_p4 = {{W_q1[31:3]}};

assign tmp_103_i_fu_1031_p2 = (tmp_51_i_i2_fu_981_p3 ^ tmp11_fu_1025_p2);

assign tmp_104_i1_fu_1076_p2 = (tmp_i7_fu_1070_p2 & h_2_reg_453);

assign tmp_104_i_fu_695_p2 = (tmp_i3_fu_689_p2 & h_reg_333);

assign tmp_105_i1_fu_1082_p2 = (tmp_i3_86_fu_1064_p2 ^ tmp_104_i1_fu_1076_p2);

assign tmp_105_i_fu_701_p2 = (tmp_i2_fu_683_p2 ^ tmp_104_i_fu_695_p2);

assign tmp_25_fu_547_p1 = tmp_i_fu_539_p3;

assign tmp_26_fu_563_p1 = ap_phi_mux_x_assign_phi_fu_325_p4;

assign tmp_30_fu_722_p2 = (tmp5_reg_1508 + tmp6_fu_718_p2);

assign tmp_32_fu_853_p2 = ($signed(7'd126) + $signed(ap_phi_mux_i_1_phi_fu_434_p4));

assign tmp_33_fu_859_p1 = tmp_32_fu_853_p2;

assign tmp_34_fu_864_p2 = ($signed(7'd121) + $signed(ap_phi_mux_i_1_phi_fu_434_p4));

assign tmp_35_fu_870_p1 = tmp_34_fu_864_p2;

assign tmp_36_fu_875_p2 = ($signed(7'd113) + $signed(i_1_reg_430));

assign tmp_37_fu_881_p1 = tmp_36_fu_875_p2;

assign tmp_38_fu_886_p2 = ($signed(7'd112) + $signed(i_1_reg_430));

assign tmp_39_fu_892_p1 = tmp_38_fu_886_p2;

assign tmp_40_fu_1054_p2 = (tmp14_reg_1557 + tmp13_fu_1049_p2);

assign tmp_41_fu_951_p1 = tmp_98_i_fu_941_p4;

assign tmp_42_fu_1021_p1 = tmp_101_i_fu_1011_p4;

assign tmp_43_fu_1059_p1 = i_1_reg_430;

assign tmp_44_fu_1184_p2 = (tmp19_reg_1582 + tmp18_fu_1178_p2);

assign tmp_45_fu_535_p1 = ap_phi_mux_x_assign_phi_fu_325_p4[3:0];

assign tmp_46_fu_615_p1 = f_reg_354[5:0];

assign tmp_47_fu_637_p1 = f_reg_354[10:0];

assign tmp_47_i_fu_594_p5 = {{{{sha256_buf_load_reg_1478}, {sha256_buf_load_1_reg_1483}}, {sha256_buf_q0}}, {sha256_buf_q1}};

assign tmp_48_fu_659_p1 = f_reg_354[24:0];

assign tmp_49_fu_737_p1 = b_reg_397[1:0];

assign tmp_50_fu_759_p1 = b_reg_397[12:0];

assign tmp_51_fu_781_p1 = b_reg_397[21:0];

assign tmp_51_i3_i1_fu_933_p3 = {{tmp_54_fu_929_p1}, {tmp_i1_i1_fu_919_p4}};

assign tmp_51_i3_i2_fu_1003_p3 = {{tmp_57_fu_999_p1}, {tmp_i1_i2_fu_989_p4}};

assign tmp_51_i3_i3_fu_1136_p3 = {{tmp_59_fu_1132_p1}, {tmp_i1_i3_fu_1122_p4}};

assign tmp_51_i3_i4_fu_1225_p3 = {{tmp_62_fu_1221_p1}, {tmp_i1_i4_fu_1211_p4}};

assign tmp_51_i3_i9_fu_763_p3 = {{tmp_50_fu_759_p1}, {tmp_i1_i7_fu_749_p4}};

assign tmp_51_i3_i_fu_641_p3 = {{tmp_47_fu_637_p1}, {tmp_i1_i_fu_627_p4}};

assign tmp_51_i6_i1_fu_785_p3 = {{tmp_51_fu_781_p1}, {tmp_i4_i1_fu_771_p4}};

assign tmp_51_i6_i2_fu_1158_p3 = {{tmp_60_fu_1154_p1}, {tmp_i4_i2_fu_1144_p4}};

assign tmp_51_i6_i3_fu_1247_p3 = {{tmp_63_fu_1243_p1}, {tmp_i4_i3_fu_1233_p4}};

assign tmp_51_i6_i_fu_663_p3 = {{tmp_48_fu_659_p1}, {tmp_i4_i_fu_649_p4}};

assign tmp_51_i_i1_fu_911_p3 = {{tmp_53_fu_907_p1}, {tmp_i_i2_fu_897_p4}};

assign tmp_51_i_i2_fu_981_p3 = {{tmp_56_fu_977_p1}, {tmp_i_i3_fu_967_p4}};

assign tmp_51_i_i3_fu_1114_p3 = {{tmp_58_fu_1110_p1}, {tmp_i_i5_fu_1100_p4}};

assign tmp_51_i_i4_fu_1203_p3 = {{tmp_61_fu_1199_p1}, {tmp_i_i6_fu_1189_p4}};

assign tmp_51_i_i6_fu_741_p3 = {{tmp_49_fu_737_p1}, {tmp_i_i4_fu_727_p4}};

assign tmp_51_i_i_fu_619_p3 = {{tmp_46_fu_615_p1}, {tmp_i_i1_fu_605_p4}};

assign tmp_53_fu_907_p1 = reg_525[16:0];

assign tmp_54_fu_929_p1 = reg_525[18:0];

assign tmp_56_fu_977_p1 = W_q1[6:0];

assign tmp_57_fu_999_p1 = W_q1[17:0];

assign tmp_58_fu_1110_p1 = f_1_reg_419[5:0];

assign tmp_59_fu_1132_p1 = f_1_reg_419[10:0];

assign tmp_60_fu_1154_p1 = f_1_reg_419[24:0];

assign tmp_61_fu_1199_p1 = b_1_reg_442[1:0];

assign tmp_62_fu_1221_p1 = b_1_reg_442[12:0];

assign tmp_63_fu_1243_p1 = b_1_reg_442[21:0];

assign tmp_92_i1_fu_1172_p2 = (tmp_51_i3_i3_fu_1136_p3 ^ tmp15_fu_1166_p2);

assign tmp_92_i_fu_677_p2 = (tmp_51_i3_i_fu_641_p3 ^ tmp2_fu_671_p2);

assign tmp_95_i1_fu_1261_p2 = (tmp_51_i3_i4_fu_1225_p3 ^ tmp21_fu_1255_p2);

assign tmp_95_i_fu_799_p2 = (tmp_51_i3_i9_fu_763_p3 ^ tmp8_fu_793_p2);

assign tmp_96_i1_fu_1279_p2 = (d_2_reg_488 & c_1_reg_500);

assign tmp_96_i_fu_817_p2 = (d_reg_375 & c_reg_386);

assign tmp_97_i1_fu_1285_p2 = (tmp_i8_fu_1273_p2 ^ tmp_96_i1_fu_1279_p2);

assign tmp_97_i_fu_823_p2 = (tmp_i6_fu_811_p2 ^ tmp_96_i_fu_817_p2);

assign tmp_98_i_fu_941_p4 = {{reg_525[31:10]}};

assign tmp_fu_529_p2 = ((ap_phi_mux_x_assign_phi_fu_325_p4 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_i1_i1_fu_919_p4 = {{reg_525[31:19]}};

assign tmp_i1_i2_fu_989_p4 = {{W_q1[31:18]}};

assign tmp_i1_i3_fu_1122_p4 = {{f_1_reg_419[31:11]}};

assign tmp_i1_i4_fu_1211_p4 = {{b_1_reg_442[31:13]}};

assign tmp_i1_i7_fu_749_p4 = {{b_reg_397[31:13]}};

assign tmp_i1_i_fu_627_p4 = {{f_reg_354[31:11]}};

assign tmp_i2_fu_683_p2 = (g_reg_343 & f_reg_354);

assign tmp_i3_86_fu_1064_p2 = (g_1_reg_464 & f_1_reg_419);

assign tmp_i3_fu_689_p2 = (f_reg_354 ^ 32'd4294967295);

assign tmp_i4_fu_1267_p2 = (d_2_reg_488 ^ c_1_reg_500);

assign tmp_i4_i1_fu_771_p4 = {{b_reg_397[31:22]}};

assign tmp_i4_i2_fu_1144_p4 = {{f_1_reg_419[31:25]}};

assign tmp_i4_i3_fu_1233_p4 = {{b_1_reg_442[31:22]}};

assign tmp_i4_i_fu_649_p4 = {{f_reg_354[31:25]}};

assign tmp_i6_fu_811_p2 = (tmp_i_85_fu_805_p2 & b_reg_397);

assign tmp_i7_fu_1070_p2 = (f_1_reg_419 ^ 32'd4294967295);

assign tmp_i8_fu_1273_p2 = (tmp_i4_fu_1267_p2 & b_1_reg_442);

assign tmp_i_85_fu_805_p2 = (d_reg_375 ^ c_reg_386);

assign tmp_i_fu_539_p3 = {{tmp_45_fu_535_p1}, {2'd0}};

assign tmp_i_i1_fu_605_p4 = {{f_reg_354[31:6]}};

assign tmp_i_i2_fu_897_p4 = {{reg_525[31:17]}};

assign tmp_i_i3_fu_967_p4 = {{W_q1[31:7]}};

assign tmp_i_i4_fu_727_p4 = {{b_reg_397[31:2]}};

assign tmp_i_i5_fu_1100_p4 = {{f_1_reg_419[31:6]}};

assign tmp_i_i6_fu_1189_p4 = {{b_1_reg_442[31:2]}};

always @ (posedge ap_clk) begin
    tmp_i_reg_1447[1:0] <= 2'b00;
    tmp_26_reg_1463[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_43_reg_1572[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //p_hash
