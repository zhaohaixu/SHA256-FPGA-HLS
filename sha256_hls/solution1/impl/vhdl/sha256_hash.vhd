-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_hash is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sha256_buf_ce0 : OUT STD_LOGIC;
    sha256_buf_we0 : OUT STD_LOGIC;
    sha256_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sha256_buf_ce1 : OUT STD_LOGIC;
    sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha256_hash is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFBF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_blk_n_AR : STD_LOGIC;
    signal data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_data_ARREADY : STD_LOGIC;
    signal i_1_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal data_addr_read_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sha256hash_7_load_1_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sha256hash_6_load_1_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_5_load_1_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_4_load_1_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_3_load_1_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_2_load_1_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_1_load_1_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_load_1_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_166_ap_start : STD_LOGIC;
    signal grp_p_hash_fu_166_ap_done : STD_LOGIC;
    signal grp_p_hash_fu_166_ap_idle : STD_LOGIC;
    signal grp_p_hash_fu_166_ap_ready : STD_LOGIC;
    signal grp_p_hash_fu_166_sha256_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_p_hash_fu_166_sha256_buf_ce0 : STD_LOGIC;
    signal grp_p_hash_fu_166_sha256_buf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_p_hash_fu_166_sha256_buf_ce1 : STD_LOGIC;
    signal grp_p_hash_fu_166_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_166_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_166_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_166_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_166_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_166_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_166_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hash_fu_166_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal grp_p_hash_fu_166_ap_start_reg : STD_LOGIC := '0';
    signal tmp_1_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_data_ARREADY : STD_LOGIC := '0';
    signal sha256_len_0_write_s_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal sl_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256_bits_0_read_s_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256_bits_0_write_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_7_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_6_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_5_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_4_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_3_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_2_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_1_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256_bits_1_read_s_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_read1_i_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component p_hash IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce0 : OUT STD_LOGIC;
        sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce1 : OUT STD_LOGIC;
        sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256hash_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_p_hash_fu_166 : component p_hash
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_hash_fu_166_ap_start,
        ap_done => grp_p_hash_fu_166_ap_done,
        ap_idle => grp_p_hash_fu_166_ap_idle,
        ap_ready => grp_p_hash_fu_166_ap_ready,
        sha256_buf_address0 => grp_p_hash_fu_166_sha256_buf_address0,
        sha256_buf_ce0 => grp_p_hash_fu_166_sha256_buf_ce0,
        sha256_buf_q0 => sha256_buf_q0,
        sha256_buf_address1 => grp_p_hash_fu_166_sha256_buf_address1,
        sha256_buf_ce1 => grp_p_hash_fu_166_sha256_buf_ce1,
        sha256_buf_q1 => sha256_buf_q1,
        sha256hash_0_read => sha256hash_load_1_reg_637,
        sha256hash_1_read => sha256hash_1_load_1_reg_632,
        sha256hash_2_read => sha256hash_2_load_1_reg_627,
        sha256hash_3_read => sha256hash_3_load_1_reg_622,
        sha256hash_4_read => sha256hash_4_load_1_reg_617,
        sha256hash_5_read => sha256hash_5_load_1_reg_612,
        sha256hash_6_read => sha256hash_6_load_1_reg_607,
        sha256hash_7_read => sha256hash_7_load_1_reg_602,
        ap_return_0 => grp_p_hash_fu_166_ap_return_0,
        ap_return_1 => grp_p_hash_fu_166_ap_return_1,
        ap_return_2 => grp_p_hash_fu_166_ap_return_2,
        ap_return_3 => grp_p_hash_fu_166_ap_return_3,
        ap_return_4 => grp_p_hash_fu_166_ap_return_4,
        ap_return_5 => grp_p_hash_fu_166_ap_return_5,
        ap_return_6 => grp_p_hash_fu_166_ap_return_6,
        ap_return_7 => grp_p_hash_fu_166_ap_return_7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_data_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_data_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_m_axi_data_ARREADY <= ap_const_logic_0;
                    elsif (((m_axi_data_ARREADY = ap_const_logic_1) and (ap_start = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_data_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_p_hash_fu_166_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_hash_fu_166_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_p_hash_fu_166_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_hash_fu_166_ap_ready = ap_const_logic_1)) then 
                    grp_p_hash_fu_166_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_reg_155 <= i_1_reg_588;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_155 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256_bits_0_read_s_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256_bits_0_read_s_fu_78 <= sha256_bits_0_write_fu_440_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256_bits_0_read_s_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256_bits_1_read_s_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256_bits_1_read_s_fu_114 <= tmp_95_read1_i_fu_432_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256_bits_1_read_s_fu_114 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256_len_0_write_s_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                sha256_len_0_write_s_fu_74 <= sl_fu_371_p2;
            elsif (((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_3_fu_377_p2 = ap_const_lv1_1)))) then 
                sha256_len_0_write_s_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256hash_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256hash_1_fu_106 <= grp_p_hash_fu_166_ap_return_1;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256hash_1_fu_106 <= ap_const_lv32_BB67AE85;
            end if; 
        end if;
    end process;

    sha256hash_2_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256hash_2_fu_102 <= grp_p_hash_fu_166_ap_return_2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256hash_2_fu_102 <= ap_const_lv32_3C6EF372;
            end if; 
        end if;
    end process;

    sha256hash_3_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256hash_3_fu_98 <= grp_p_hash_fu_166_ap_return_3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256hash_3_fu_98 <= ap_const_lv32_A54FF53A;
            end if; 
        end if;
    end process;

    sha256hash_4_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256hash_4_fu_94 <= grp_p_hash_fu_166_ap_return_4;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256hash_4_fu_94 <= ap_const_lv32_510E527F;
            end if; 
        end if;
    end process;

    sha256hash_5_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256hash_5_fu_90 <= grp_p_hash_fu_166_ap_return_5;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256hash_5_fu_90 <= ap_const_lv32_9B05688C;
            end if; 
        end if;
    end process;

    sha256hash_6_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256hash_6_fu_86 <= grp_p_hash_fu_166_ap_return_6;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256hash_6_fu_86 <= ap_const_lv32_1F83D9AB;
            end if; 
        end if;
    end process;

    sha256hash_7_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256hash_7_fu_82 <= grp_p_hash_fu_166_ap_return_7;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256hash_7_fu_82 <= ap_const_lv32_5BE0CD19;
            end if; 
        end if;
    end process;

    sha256hash_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
                sha256hash_fu_110 <= grp_p_hash_fu_166_ap_return_0;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sha256hash_fu_110 <= ap_const_lv32_6A09E667;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_289_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (exitcond_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                data_addr_read_reg_593 <= m_axi_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_289_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                i_1_reg_588 <= i_1_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                sha256hash_1_load_1_reg_632 <= sha256hash_1_fu_106;
                sha256hash_2_load_1_reg_627 <= sha256hash_2_fu_102;
                sha256hash_3_load_1_reg_622 <= sha256hash_3_fu_98;
                sha256hash_4_load_1_reg_617 <= sha256hash_4_fu_94;
                sha256hash_5_load_1_reg_612 <= sha256hash_5_fu_90;
                sha256hash_6_load_1_reg_607 <= sha256hash_6_fu_86;
                sha256hash_7_load_1_reg_602 <= sha256hash_7_fu_82;
                sha256hash_load_1_reg_637 <= sha256hash_fu_110;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_3_reg_598 <= tmp_3_fu_377_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_data_RVALID, ap_CS_fsm_state8, exitcond_fu_289_p2, ap_sig_ioackin_m_axi_data_ARREADY, tmp_3_fu_377_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_block_state11_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((exitcond_fu_289_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_fu_289_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (exitcond_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((tmp_3_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_on_subcall_done_assign_proc : process(tmp_3_reg_598, grp_p_hash_fu_166_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((grp_p_hash_fu_166_ap_done = ap_const_logic_0) and (tmp_3_reg_598 = ap_const_lv1_1));
    end process;


    ap_block_state8_assign_proc : process(m_axi_data_RVALID, exitcond_fu_289_p2)
    begin
                ap_block_state8 <= ((exitcond_fu_289_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_data_RVALID, ap_CS_fsm_state8, exitcond_fu_289_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((exitcond_fu_289_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_289_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_state8, exitcond_fu_289_p2)
    begin
        if ((not(((exitcond_fu_289_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_289_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sha256_len_0_write_s_fu_74;
    ap_return_1 <= sha256_bits_1_read_s_fu_114;
    ap_return_10 <= sha256_bits_0_read_s_fu_78;
    ap_return_2 <= sha256hash_fu_110;
    ap_return_3 <= sha256hash_1_fu_106;
    ap_return_4 <= sha256hash_2_fu_102;
    ap_return_5 <= sha256hash_3_fu_98;
    ap_return_6 <= sha256hash_4_fu_94;
    ap_return_7 <= sha256hash_5_fu_90;
    ap_return_8 <= sha256hash_6_fu_86;
    ap_return_9 <= sha256hash_7_fu_82;

    ap_sig_ioackin_m_axi_data_ARREADY_assign_proc : process(m_axi_data_ARREADY, ap_reg_ioackin_m_axi_data_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_data_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_data_ARREADY <= m_axi_data_ARREADY;
        else 
            ap_sig_ioackin_m_axi_data_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_data_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            data_blk_n_AR <= m_axi_data_ARREADY;
        else 
            data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_R_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_state8, exitcond_fu_289_p2)
    begin
        if (((exitcond_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            data_blk_n_R <= m_axi_data_RVALID;
        else 
            data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_289_p2 <= "1" when (i_reg_155 = len) else "0";
    grp_p_hash_fu_166_ap_start <= grp_p_hash_fu_166_ap_start_reg;
    i_1_fu_294_p2 <= std_logic_vector(unsigned(i_reg_155) + unsigned(ap_const_lv32_1));
    m_axi_data_ARADDR <= tmp_fu_228_p1(32 - 1 downto 0);
    m_axi_data_ARBURST <= ap_const_lv2_0;
    m_axi_data_ARCACHE <= ap_const_lv4_0;
    m_axi_data_ARID <= ap_const_lv1_0;
    m_axi_data_ARLEN <= len;
    m_axi_data_ARLOCK <= ap_const_lv2_0;
    m_axi_data_ARPROT <= ap_const_lv3_0;
    m_axi_data_ARQOS <= ap_const_lv4_0;
    m_axi_data_ARREGION <= ap_const_lv4_0;
    m_axi_data_ARSIZE <= ap_const_lv3_0;
    m_axi_data_ARUSER <= ap_const_lv1_0;

    m_axi_data_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_m_axi_data_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            m_axi_data_ARVALID <= ap_const_logic_1;
        else 
            m_axi_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_data_AWADDR <= ap_const_lv32_0;
    m_axi_data_AWBURST <= ap_const_lv2_0;
    m_axi_data_AWCACHE <= ap_const_lv4_0;
    m_axi_data_AWID <= ap_const_lv1_0;
    m_axi_data_AWLEN <= ap_const_lv32_0;
    m_axi_data_AWLOCK <= ap_const_lv2_0;
    m_axi_data_AWPROT <= ap_const_lv3_0;
    m_axi_data_AWQOS <= ap_const_lv4_0;
    m_axi_data_AWREGION <= ap_const_lv4_0;
    m_axi_data_AWSIZE <= ap_const_lv3_0;
    m_axi_data_AWUSER <= ap_const_lv1_0;
    m_axi_data_AWVALID <= ap_const_logic_0;
    m_axi_data_BREADY <= ap_const_logic_0;

    m_axi_data_RREADY_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_state8, exitcond_fu_289_p2)
    begin
        if ((not(((exitcond_fu_289_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (exitcond_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_data_RREADY <= ap_const_logic_1;
        else 
            m_axi_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_data_WDATA <= ap_const_lv8_0;
    m_axi_data_WID <= ap_const_lv1_0;
    m_axi_data_WLAST <= ap_const_logic_0;
    m_axi_data_WSTRB <= ap_const_lv1_0;
    m_axi_data_WUSER <= ap_const_lv1_0;
    m_axi_data_WVALID <= ap_const_logic_0;
    sha256_bits_0_write_fu_440_p2 <= std_logic_vector(unsigned(sha256_bits_0_read_s_fu_78) + unsigned(ap_const_lv32_40));

    sha256_buf_address0_assign_proc : process(tmp_3_reg_598, ap_CS_fsm_state9, grp_p_hash_fu_166_sha256_buf_address0, ap_CS_fsm_state11, tmp_1_fu_366_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha256_buf_address0 <= tmp_1_fu_366_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
            sha256_buf_address0 <= grp_p_hash_fu_166_sha256_buf_address0;
        else 
            sha256_buf_address0 <= "XXXXXX";
        end if; 
    end process;

    sha256_buf_address1 <= grp_p_hash_fu_166_sha256_buf_address1;

    sha256_buf_ce0_assign_proc : process(tmp_3_reg_598, ap_CS_fsm_state9, grp_p_hash_fu_166_sha256_buf_ce0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha256_buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
            sha256_buf_ce0 <= grp_p_hash_fu_166_sha256_buf_ce0;
        else 
            sha256_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_ce1_assign_proc : process(tmp_3_reg_598, grp_p_hash_fu_166_sha256_buf_ce1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_3_reg_598 = ap_const_lv1_1))) then 
            sha256_buf_ce1 <= grp_p_hash_fu_166_sha256_buf_ce1;
        else 
            sha256_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sha256_buf_d0 <= data_addr_read_reg_593;

    sha256_buf_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha256_buf_we0 <= ap_const_logic_1;
        else 
            sha256_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sl_fu_371_p2 <= std_logic_vector(unsigned(sha256_len_0_write_s_fu_74) + unsigned(ap_const_lv32_1));
    tmp_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sha256_len_0_write_s_fu_74),64));
    tmp_3_fu_377_p2 <= "1" when (sl_fu_371_p2 = ap_const_lv32_8) else "0";
    tmp_89_i_fu_426_p2 <= std_logic_vector(unsigned(sha256_bits_1_read_s_fu_114) + unsigned(ap_const_lv32_1));
    tmp_95_read1_i_fu_432_p3 <= 
        tmp_89_i_fu_426_p2 when (tmp_i_fu_420_p2(0) = '1') else 
        sha256_bits_1_read_s_fu_114;
        tmp_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_offset),64));

    tmp_i_fu_420_p2 <= "1" when (unsigned(sha256_bits_0_read_s_fu_78) > unsigned(ap_const_lv32_FFFFFFBF)) else "0";
end behav;
