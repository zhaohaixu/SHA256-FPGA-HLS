// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3477,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=22135,HLS_SYN_LUT=46546,HLS_VERSION=2018_3}" *)

module sha256 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        msg_address0,
        msg_ce0,
        msg_q0,
        len,
        hash_address0,
        hash_ce0,
        hash_we0,
        hash_d0,
        hash_address1,
        hash_ce1,
        hash_we1,
        hash_d1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] msg_address0;
output   msg_ce0;
input  [7:0] msg_q0;
input  [31:0] len;
output  [4:0] hash_address0;
output   hash_ce0;
output   hash_we0;
output  [7:0] hash_d0;
output  [4:0] hash_address1;
output   hash_ce1;
output   hash_we1;
output  [7:0] hash_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] indvarinc_fu_98_p2;
wire    ap_CS_fsm_state2;
reg   [31:0] sha256_bits_1_reg_172;
wire    ap_CS_fsm_state4;
wire    grp_sha256_hash_fu_90_ap_ready;
wire    grp_sha256_hash_fu_90_ap_done;
reg   [31:0] sha256_len_0_reg_177;
reg   [31:0] sha256hash_0_reg_182;
reg   [31:0] sha256hash_1_reg_187;
reg   [31:0] sha256hash_2_reg_192;
reg   [31:0] sha256hash_3_reg_197;
reg   [31:0] sha256hash_4_reg_202;
reg   [31:0] sha256hash_5_reg_207;
reg   [31:0] sha256hash_6_reg_212;
reg   [31:0] sha256hash_7_reg_217;
reg   [31:0] sha256_bits_0_reg_222;
reg   [5:0] sha256_buf_address0;
reg    sha256_buf_ce0;
reg    sha256_buf_we0;
reg   [7:0] sha256_buf_d0;
wire   [7:0] sha256_buf_q0;
reg   [5:0] sha256_buf_address1;
reg    sha256_buf_ce1;
reg    sha256_buf_we1;
wire   [7:0] sha256_buf_q1;
wire    grp_sha256_done_fu_72_ap_start;
wire    grp_sha256_done_fu_72_ap_done;
wire    grp_sha256_done_fu_72_ap_idle;
wire    grp_sha256_done_fu_72_ap_ready;
wire   [5:0] grp_sha256_done_fu_72_sha256_buf_address0;
wire    grp_sha256_done_fu_72_sha256_buf_ce0;
wire    grp_sha256_done_fu_72_sha256_buf_we0;
wire   [7:0] grp_sha256_done_fu_72_sha256_buf_d0;
wire   [5:0] grp_sha256_done_fu_72_sha256_buf_address1;
wire    grp_sha256_done_fu_72_sha256_buf_ce1;
wire    grp_sha256_done_fu_72_sha256_buf_we1;
wire   [7:0] grp_sha256_done_fu_72_sha256_buf_d1;
wire   [4:0] grp_sha256_done_fu_72_hash_address0;
wire    grp_sha256_done_fu_72_hash_ce0;
wire    grp_sha256_done_fu_72_hash_we0;
wire   [7:0] grp_sha256_done_fu_72_hash_d0;
wire   [4:0] grp_sha256_done_fu_72_hash_address1;
wire    grp_sha256_done_fu_72_hash_ce1;
wire    grp_sha256_done_fu_72_hash_we1;
wire   [7:0] grp_sha256_done_fu_72_hash_d1;
wire    grp_sha256_hash_fu_90_ap_start;
wire    grp_sha256_hash_fu_90_ap_idle;
wire   [5:0] grp_sha256_hash_fu_90_sha256_buf_address0;
wire    grp_sha256_hash_fu_90_sha256_buf_ce0;
wire    grp_sha256_hash_fu_90_sha256_buf_we0;
wire   [7:0] grp_sha256_hash_fu_90_sha256_buf_d0;
wire   [5:0] grp_sha256_hash_fu_90_sha256_buf_address1;
wire    grp_sha256_hash_fu_90_sha256_buf_ce1;
wire   [5:0] grp_sha256_hash_fu_90_data_address0;
wire    grp_sha256_hash_fu_90_data_ce0;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_0;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_1;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_2;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_3;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_4;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_5;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_6;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_7;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_8;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_9;
wire   [31:0] grp_sha256_hash_fu_90_ap_return_10;
reg   [5:0] invdar_reg_61;
wire   [0:0] tmp_s_fu_109_p2;
reg    grp_sha256_done_fu_72_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_sha256_hash_fu_90_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_fu_104_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_sha256_done_fu_72_ap_start_reg = 1'b0;
#0 grp_sha256_hash_fu_90_ap_start_reg = 1'b0;
end

sha256_sha256_buf #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sha256_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sha256_buf_address0),
    .ce0(sha256_buf_ce0),
    .we0(sha256_buf_we0),
    .d0(sha256_buf_d0),
    .q0(sha256_buf_q0),
    .address1(sha256_buf_address1),
    .ce1(sha256_buf_ce1),
    .we1(sha256_buf_we1),
    .d1(grp_sha256_done_fu_72_sha256_buf_d1),
    .q1(sha256_buf_q1)
);

sha256_done grp_sha256_done_fu_72(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_done_fu_72_ap_start),
    .ap_done(grp_sha256_done_fu_72_ap_done),
    .ap_idle(grp_sha256_done_fu_72_ap_idle),
    .ap_ready(grp_sha256_done_fu_72_ap_ready),
    .sha256_buf_address0(grp_sha256_done_fu_72_sha256_buf_address0),
    .sha256_buf_ce0(grp_sha256_done_fu_72_sha256_buf_ce0),
    .sha256_buf_we0(grp_sha256_done_fu_72_sha256_buf_we0),
    .sha256_buf_d0(grp_sha256_done_fu_72_sha256_buf_d0),
    .sha256_buf_q0(sha256_buf_q0),
    .sha256_buf_address1(grp_sha256_done_fu_72_sha256_buf_address1),
    .sha256_buf_ce1(grp_sha256_done_fu_72_sha256_buf_ce1),
    .sha256_buf_we1(grp_sha256_done_fu_72_sha256_buf_we1),
    .sha256_buf_d1(grp_sha256_done_fu_72_sha256_buf_d1),
    .sha256_buf_q1(sha256_buf_q1),
    .sha256hash_0_read(sha256hash_0_reg_182),
    .sha256hash_1_read(sha256hash_1_reg_187),
    .sha256hash_2_read(sha256hash_2_reg_192),
    .sha256hash_3_read(sha256hash_3_reg_197),
    .sha256hash_4_read(sha256hash_4_reg_202),
    .sha256hash_5_read(sha256hash_5_reg_207),
    .sha256hash_6_read(sha256hash_6_reg_212),
    .sha256hash_7_read(sha256hash_7_reg_217),
    .sha256_bits_0_read(sha256_bits_0_reg_222),
    .sha256_bits_1_read(sha256_bits_1_reg_172),
    .sha256_len(sha256_len_0_reg_177),
    .hash_address0(grp_sha256_done_fu_72_hash_address0),
    .hash_ce0(grp_sha256_done_fu_72_hash_ce0),
    .hash_we0(grp_sha256_done_fu_72_hash_we0),
    .hash_d0(grp_sha256_done_fu_72_hash_d0),
    .hash_address1(grp_sha256_done_fu_72_hash_address1),
    .hash_ce1(grp_sha256_done_fu_72_hash_ce1),
    .hash_we1(grp_sha256_done_fu_72_hash_we1),
    .hash_d1(grp_sha256_done_fu_72_hash_d1)
);

sha256_hash grp_sha256_hash_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_hash_fu_90_ap_start),
    .ap_done(grp_sha256_hash_fu_90_ap_done),
    .ap_idle(grp_sha256_hash_fu_90_ap_idle),
    .ap_ready(grp_sha256_hash_fu_90_ap_ready),
    .sha256_buf_address0(grp_sha256_hash_fu_90_sha256_buf_address0),
    .sha256_buf_ce0(grp_sha256_hash_fu_90_sha256_buf_ce0),
    .sha256_buf_we0(grp_sha256_hash_fu_90_sha256_buf_we0),
    .sha256_buf_d0(grp_sha256_hash_fu_90_sha256_buf_d0),
    .sha256_buf_q0(sha256_buf_q0),
    .sha256_buf_address1(grp_sha256_hash_fu_90_sha256_buf_address1),
    .sha256_buf_ce1(grp_sha256_hash_fu_90_sha256_buf_ce1),
    .sha256_buf_q1(sha256_buf_q1),
    .data_address0(grp_sha256_hash_fu_90_data_address0),
    .data_ce0(grp_sha256_hash_fu_90_data_ce0),
    .data_q0(msg_q0),
    .len(len),
    .ap_return_0(grp_sha256_hash_fu_90_ap_return_0),
    .ap_return_1(grp_sha256_hash_fu_90_ap_return_1),
    .ap_return_2(grp_sha256_hash_fu_90_ap_return_2),
    .ap_return_3(grp_sha256_hash_fu_90_ap_return_3),
    .ap_return_4(grp_sha256_hash_fu_90_ap_return_4),
    .ap_return_5(grp_sha256_hash_fu_90_ap_return_5),
    .ap_return_6(grp_sha256_hash_fu_90_ap_return_6),
    .ap_return_7(grp_sha256_hash_fu_90_ap_return_7),
    .ap_return_8(grp_sha256_hash_fu_90_ap_return_8),
    .ap_return_9(grp_sha256_hash_fu_90_ap_return_9),
    .ap_return_10(grp_sha256_hash_fu_90_ap_return_10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_done_fu_72_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_sha256_done_fu_72_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_done_fu_72_ap_ready == 1'b1)) begin
            grp_sha256_done_fu_72_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_hash_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_sha256_hash_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_hash_fu_90_ap_ready == 1'b1)) begin
            grp_sha256_hash_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_109_p2 == 1'd0))) begin
        invdar_reg_61 <= indvarinc_fu_98_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_61 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_sha256_hash_fu_90_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        sha256_bits_0_reg_222 <= grp_sha256_hash_fu_90_ap_return_10;
        sha256_bits_1_reg_172 <= grp_sha256_hash_fu_90_ap_return_1;
        sha256_len_0_reg_177 <= grp_sha256_hash_fu_90_ap_return_0;
        sha256hash_0_reg_182 <= grp_sha256_hash_fu_90_ap_return_2;
        sha256hash_1_reg_187 <= grp_sha256_hash_fu_90_ap_return_3;
        sha256hash_2_reg_192 <= grp_sha256_hash_fu_90_ap_return_4;
        sha256hash_3_reg_197 <= grp_sha256_hash_fu_90_ap_return_5;
        sha256hash_4_reg_202 <= grp_sha256_hash_fu_90_ap_return_6;
        sha256hash_5_reg_207 <= grp_sha256_hash_fu_90_ap_return_7;
        sha256hash_6_reg_212 <= grp_sha256_hash_fu_90_ap_return_8;
        sha256hash_7_reg_217 <= grp_sha256_hash_fu_90_ap_return_9;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_sha256_done_fu_72_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_sha256_done_fu_72_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sha256_buf_address0 = tmp_fu_104_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha256_buf_address0 = grp_sha256_hash_fu_90_sha256_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_address0 = grp_sha256_done_fu_72_sha256_buf_address0;
    end else begin
        sha256_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sha256_buf_address1 = grp_sha256_hash_fu_90_sha256_buf_address1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_address1 = grp_sha256_done_fu_72_sha256_buf_address1;
    end else begin
        sha256_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sha256_buf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha256_buf_ce0 = grp_sha256_hash_fu_90_sha256_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_ce0 = grp_sha256_done_fu_72_sha256_buf_ce0;
    end else begin
        sha256_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sha256_buf_ce1 = grp_sha256_hash_fu_90_sha256_buf_ce1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_ce1 = grp_sha256_done_fu_72_sha256_buf_ce1;
    end else begin
        sha256_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sha256_buf_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha256_buf_d0 = grp_sha256_hash_fu_90_sha256_buf_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_d0 = grp_sha256_done_fu_72_sha256_buf_d0;
    end else begin
        sha256_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sha256_buf_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha256_buf_we0 = grp_sha256_hash_fu_90_sha256_buf_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_we0 = grp_sha256_done_fu_72_sha256_buf_we0;
    end else begin
        sha256_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sha256_buf_we1 = grp_sha256_done_fu_72_sha256_buf_we1;
    end else begin
        sha256_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_109_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_sha256_hash_fu_90_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_sha256_done_fu_72_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_sha256_done_fu_72_ap_start = grp_sha256_done_fu_72_ap_start_reg;

assign grp_sha256_hash_fu_90_ap_start = grp_sha256_hash_fu_90_ap_start_reg;

assign hash_address0 = grp_sha256_done_fu_72_hash_address0;

assign hash_address1 = grp_sha256_done_fu_72_hash_address1;

assign hash_ce0 = grp_sha256_done_fu_72_hash_ce0;

assign hash_ce1 = grp_sha256_done_fu_72_hash_ce1;

assign hash_d0 = grp_sha256_done_fu_72_hash_d0;

assign hash_d1 = grp_sha256_done_fu_72_hash_d1;

assign hash_we0 = grp_sha256_done_fu_72_hash_we0;

assign hash_we1 = grp_sha256_done_fu_72_hash_we1;

assign indvarinc_fu_98_p2 = (invdar_reg_61 + 6'd1);

assign msg_address0 = grp_sha256_hash_fu_90_data_address0;

assign msg_ce0 = grp_sha256_hash_fu_90_data_ce0;

assign tmp_fu_104_p1 = invdar_reg_61;

assign tmp_s_fu_109_p2 = ((invdar_reg_61 == 6'd63) ? 1'b1 : 1'b0);

endmodule //sha256
