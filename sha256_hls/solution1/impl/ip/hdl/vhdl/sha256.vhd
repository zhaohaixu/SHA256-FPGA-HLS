-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256 is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_WREADY : IN STD_LOGIC;
    m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RVALID : IN STD_LOGIC;
    m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_RLAST : IN STD_LOGIC;
    m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BVALID : IN STD_LOGIC;
    m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_bus_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_bus_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_RREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_bus_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_BREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of sha256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3517,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=5058,HLS_SYN_LUT=8774,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal msg : STD_LOGIC_VECTOR (31 downto 0);
    signal msg_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal msg_0_vld_reg : STD_LOGIC := '0';
    signal msg_0_ack_out : STD_LOGIC;
    signal len : STD_LOGIC_VECTOR (31 downto 0);
    signal len_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal len_0_vld_reg : STD_LOGIC := '0';
    signal len_0_ack_out : STD_LOGIC;
    signal hash : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal hash_0_vld_reg : STD_LOGIC := '0';
    signal hash_0_ack_out : STD_LOGIC;
    signal INPUT_r_AWREADY : STD_LOGIC;
    signal INPUT_r_WREADY : STD_LOGIC;
    signal INPUT_r_ARVALID : STD_LOGIC;
    signal INPUT_r_ARREADY : STD_LOGIC;
    signal INPUT_r_RVALID : STD_LOGIC;
    signal INPUT_r_RREADY : STD_LOGIC;
    signal INPUT_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_r_RLAST : STD_LOGIC;
    signal INPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BVALID : STD_LOGIC;
    signal INPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_AWVALID : STD_LOGIC;
    signal OUTPUT_r_AWREADY : STD_LOGIC;
    signal OUTPUT_r_WVALID : STD_LOGIC;
    signal OUTPUT_r_WREADY : STD_LOGIC;
    signal OUTPUT_r_ARREADY : STD_LOGIC;
    signal OUTPUT_r_RVALID : STD_LOGIC;
    signal OUTPUT_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_r_RLAST : STD_LOGIC;
    signal OUTPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BVALID : STD_LOGIC;
    signal OUTPUT_r_BREADY : STD_LOGIC;
    signal OUTPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_read_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal len_read_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal msg_read_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvarinc_fu_146_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sha256_bits_1_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sha256_hash_fu_135_ap_ready : STD_LOGIC;
    signal grp_sha256_hash_fu_135_ap_done : STD_LOGIC;
    signal sha256_len_0_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_0_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_1_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_2_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_3_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_4_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_5_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_6_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_7_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256_bits_0_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sha256_buf_ce0 : STD_LOGIC;
    signal sha256_buf_we0 : STD_LOGIC;
    signal sha256_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256_buf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sha256_buf_ce1 : STD_LOGIC;
    signal sha256_buf_we1 : STD_LOGIC;
    signal sha256_buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_done_fu_114_ap_start : STD_LOGIC;
    signal grp_sha256_done_fu_114_ap_done : STD_LOGIC;
    signal grp_sha256_done_fu_114_ap_idle : STD_LOGIC;
    signal grp_sha256_done_fu_114_ap_ready : STD_LOGIC;
    signal grp_sha256_done_fu_114_sha256_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_done_fu_114_sha256_buf_ce0 : STD_LOGIC;
    signal grp_sha256_done_fu_114_sha256_buf_we0 : STD_LOGIC;
    signal grp_sha256_done_fu_114_sha256_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_done_fu_114_sha256_buf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_done_fu_114_sha256_buf_ce1 : STD_LOGIC;
    signal grp_sha256_done_fu_114_sha256_buf_we1 : STD_LOGIC;
    signal grp_sha256_done_fu_114_sha256_buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWVALID : STD_LOGIC;
    signal grp_sha256_done_fu_114_m_axi_hash_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_WVALID : STD_LOGIC;
    signal grp_sha256_done_fu_114_m_axi_hash_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_WLAST : STD_LOGIC;
    signal grp_sha256_done_fu_114_m_axi_hash_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARVALID : STD_LOGIC;
    signal grp_sha256_done_fu_114_m_axi_hash_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_114_m_axi_hash_RREADY : STD_LOGIC;
    signal grp_sha256_done_fu_114_m_axi_hash_BREADY : STD_LOGIC;
    signal grp_sha256_hash_fu_135_ap_start : STD_LOGIC;
    signal grp_sha256_hash_fu_135_ap_idle : STD_LOGIC;
    signal grp_sha256_hash_fu_135_sha256_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_hash_fu_135_sha256_buf_ce0 : STD_LOGIC;
    signal grp_sha256_hash_fu_135_sha256_buf_we0 : STD_LOGIC;
    signal grp_sha256_hash_fu_135_sha256_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_hash_fu_135_sha256_buf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_hash_fu_135_sha256_buf_ce1 : STD_LOGIC;
    signal grp_sha256_hash_fu_135_m_axi_data_AWVALID : STD_LOGIC;
    signal grp_sha256_hash_fu_135_m_axi_data_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_WVALID : STD_LOGIC;
    signal grp_sha256_hash_fu_135_m_axi_data_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_WLAST : STD_LOGIC;
    signal grp_sha256_hash_fu_135_m_axi_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARVALID : STD_LOGIC;
    signal grp_sha256_hash_fu_135_m_axi_data_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_hash_fu_135_m_axi_data_RREADY : STD_LOGIC;
    signal grp_sha256_hash_fu_135_m_axi_data_BREADY : STD_LOGIC;
    signal grp_sha256_hash_fu_135_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_135_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_103 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_114_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_sha256_hash_fu_135_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component sha256_done IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce0 : OUT STD_LOGIC;
        sha256_buf_we0 : OUT STD_LOGIC;
        sha256_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce1 : OUT STD_LOGIC;
        sha256_buf_we1 : OUT STD_LOGIC;
        sha256_buf_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256hash_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256_bits_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256_bits_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256_len : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_AWVALID : OUT STD_LOGIC;
        m_axi_hash_AWREADY : IN STD_LOGIC;
        m_axi_hash_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_hash_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_hash_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_WVALID : OUT STD_LOGIC;
        m_axi_hash_WREADY : IN STD_LOGIC;
        m_axi_hash_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_hash_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_WLAST : OUT STD_LOGIC;
        m_axi_hash_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_ARVALID : OUT STD_LOGIC;
        m_axi_hash_ARREADY : IN STD_LOGIC;
        m_axi_hash_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_hash_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_hash_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_RVALID : IN STD_LOGIC;
        m_axi_hash_RREADY : OUT STD_LOGIC;
        m_axi_hash_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_hash_RLAST : IN STD_LOGIC;
        m_axi_hash_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_BVALID : IN STD_LOGIC;
        m_axi_hash_BREADY : OUT STD_LOGIC;
        m_axi_hash_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        hash_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_hash IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce0 : OUT STD_LOGIC;
        sha256_buf_we0 : OUT STD_LOGIC;
        sha256_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce1 : OUT STD_LOGIC;
        sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_data_AWVALID : OUT STD_LOGIC;
        m_axi_data_AWREADY : IN STD_LOGIC;
        m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WVALID : OUT STD_LOGIC;
        m_axi_data_WREADY : IN STD_LOGIC;
        m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WLAST : OUT STD_LOGIC;
        m_axi_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_ARVALID : OUT STD_LOGIC;
        m_axi_data_ARREADY : IN STD_LOGIC;
        m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RVALID : IN STD_LOGIC;
        m_axi_data_RREADY : OUT STD_LOGIC;
        m_axi_data_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_data_RLAST : IN STD_LOGIC;
        m_axi_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_BVALID : IN STD_LOGIC;
        m_axi_data_BREADY : OUT STD_LOGIC;
        m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        data_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        len : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_sha256_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_ctrl_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        msg : OUT STD_LOGIC_VECTOR (31 downto 0);
        len : OUT STD_LOGIC_VECTOR (31 downto 0);
        hash : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_INPUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sha256_OUTPUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sha256_ctrl_bus_s_axi_U : component sha256_ctrl_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_bus_AWVALID,
        AWREADY => s_axi_ctrl_bus_AWREADY,
        AWADDR => s_axi_ctrl_bus_AWADDR,
        WVALID => s_axi_ctrl_bus_WVALID,
        WREADY => s_axi_ctrl_bus_WREADY,
        WDATA => s_axi_ctrl_bus_WDATA,
        WSTRB => s_axi_ctrl_bus_WSTRB,
        ARVALID => s_axi_ctrl_bus_ARVALID,
        ARREADY => s_axi_ctrl_bus_ARREADY,
        ARADDR => s_axi_ctrl_bus_ARADDR,
        RVALID => s_axi_ctrl_bus_RVALID,
        RREADY => s_axi_ctrl_bus_RREADY,
        RDATA => s_axi_ctrl_bus_RDATA,
        RRESP => s_axi_ctrl_bus_RRESP,
        BVALID => s_axi_ctrl_bus_BVALID,
        BREADY => s_axi_ctrl_bus_BREADY,
        BRESP => s_axi_ctrl_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        msg => msg,
        len => len,
        hash => hash);

    sha256_INPUT_r_m_axi_U : component sha256_INPUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_r_AWVALID,
        AWREADY => m_axi_INPUT_r_AWREADY,
        AWADDR => m_axi_INPUT_r_AWADDR,
        AWID => m_axi_INPUT_r_AWID,
        AWLEN => m_axi_INPUT_r_AWLEN,
        AWSIZE => m_axi_INPUT_r_AWSIZE,
        AWBURST => m_axi_INPUT_r_AWBURST,
        AWLOCK => m_axi_INPUT_r_AWLOCK,
        AWCACHE => m_axi_INPUT_r_AWCACHE,
        AWPROT => m_axi_INPUT_r_AWPROT,
        AWQOS => m_axi_INPUT_r_AWQOS,
        AWREGION => m_axi_INPUT_r_AWREGION,
        AWUSER => m_axi_INPUT_r_AWUSER,
        WVALID => m_axi_INPUT_r_WVALID,
        WREADY => m_axi_INPUT_r_WREADY,
        WDATA => m_axi_INPUT_r_WDATA,
        WSTRB => m_axi_INPUT_r_WSTRB,
        WLAST => m_axi_INPUT_r_WLAST,
        WID => m_axi_INPUT_r_WID,
        WUSER => m_axi_INPUT_r_WUSER,
        ARVALID => m_axi_INPUT_r_ARVALID,
        ARREADY => m_axi_INPUT_r_ARREADY,
        ARADDR => m_axi_INPUT_r_ARADDR,
        ARID => m_axi_INPUT_r_ARID,
        ARLEN => m_axi_INPUT_r_ARLEN,
        ARSIZE => m_axi_INPUT_r_ARSIZE,
        ARBURST => m_axi_INPUT_r_ARBURST,
        ARLOCK => m_axi_INPUT_r_ARLOCK,
        ARCACHE => m_axi_INPUT_r_ARCACHE,
        ARPROT => m_axi_INPUT_r_ARPROT,
        ARQOS => m_axi_INPUT_r_ARQOS,
        ARREGION => m_axi_INPUT_r_ARREGION,
        ARUSER => m_axi_INPUT_r_ARUSER,
        RVALID => m_axi_INPUT_r_RVALID,
        RREADY => m_axi_INPUT_r_RREADY,
        RDATA => m_axi_INPUT_r_RDATA,
        RLAST => m_axi_INPUT_r_RLAST,
        RID => m_axi_INPUT_r_RID,
        RUSER => m_axi_INPUT_r_RUSER,
        RRESP => m_axi_INPUT_r_RRESP,
        BVALID => m_axi_INPUT_r_BVALID,
        BREADY => m_axi_INPUT_r_BREADY,
        BRESP => m_axi_INPUT_r_BRESP,
        BID => m_axi_INPUT_r_BID,
        BUSER => m_axi_INPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_r_ARVALID,
        I_ARREADY => INPUT_r_ARREADY,
        I_ARADDR => grp_sha256_hash_fu_135_m_axi_data_ARADDR,
        I_ARID => grp_sha256_hash_fu_135_m_axi_data_ARID,
        I_ARLEN => grp_sha256_hash_fu_135_m_axi_data_ARLEN,
        I_ARSIZE => grp_sha256_hash_fu_135_m_axi_data_ARSIZE,
        I_ARLOCK => grp_sha256_hash_fu_135_m_axi_data_ARLOCK,
        I_ARCACHE => grp_sha256_hash_fu_135_m_axi_data_ARCACHE,
        I_ARQOS => grp_sha256_hash_fu_135_m_axi_data_ARQOS,
        I_ARPROT => grp_sha256_hash_fu_135_m_axi_data_ARPROT,
        I_ARUSER => grp_sha256_hash_fu_135_m_axi_data_ARUSER,
        I_ARBURST => grp_sha256_hash_fu_135_m_axi_data_ARBURST,
        I_ARREGION => grp_sha256_hash_fu_135_m_axi_data_ARREGION,
        I_RVALID => INPUT_r_RVALID,
        I_RREADY => INPUT_r_RREADY,
        I_RDATA => INPUT_r_RDATA,
        I_RID => INPUT_r_RID,
        I_RUSER => INPUT_r_RUSER,
        I_RRESP => INPUT_r_RRESP,
        I_RLAST => INPUT_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_r_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => INPUT_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_r_BRESP,
        I_BID => INPUT_r_BID,
        I_BUSER => INPUT_r_BUSER);

    sha256_OUTPUT_r_m_axi_U : component sha256_OUTPUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_r_AWVALID,
        AWREADY => m_axi_OUTPUT_r_AWREADY,
        AWADDR => m_axi_OUTPUT_r_AWADDR,
        AWID => m_axi_OUTPUT_r_AWID,
        AWLEN => m_axi_OUTPUT_r_AWLEN,
        AWSIZE => m_axi_OUTPUT_r_AWSIZE,
        AWBURST => m_axi_OUTPUT_r_AWBURST,
        AWLOCK => m_axi_OUTPUT_r_AWLOCK,
        AWCACHE => m_axi_OUTPUT_r_AWCACHE,
        AWPROT => m_axi_OUTPUT_r_AWPROT,
        AWQOS => m_axi_OUTPUT_r_AWQOS,
        AWREGION => m_axi_OUTPUT_r_AWREGION,
        AWUSER => m_axi_OUTPUT_r_AWUSER,
        WVALID => m_axi_OUTPUT_r_WVALID,
        WREADY => m_axi_OUTPUT_r_WREADY,
        WDATA => m_axi_OUTPUT_r_WDATA,
        WSTRB => m_axi_OUTPUT_r_WSTRB,
        WLAST => m_axi_OUTPUT_r_WLAST,
        WID => m_axi_OUTPUT_r_WID,
        WUSER => m_axi_OUTPUT_r_WUSER,
        ARVALID => m_axi_OUTPUT_r_ARVALID,
        ARREADY => m_axi_OUTPUT_r_ARREADY,
        ARADDR => m_axi_OUTPUT_r_ARADDR,
        ARID => m_axi_OUTPUT_r_ARID,
        ARLEN => m_axi_OUTPUT_r_ARLEN,
        ARSIZE => m_axi_OUTPUT_r_ARSIZE,
        ARBURST => m_axi_OUTPUT_r_ARBURST,
        ARLOCK => m_axi_OUTPUT_r_ARLOCK,
        ARCACHE => m_axi_OUTPUT_r_ARCACHE,
        ARPROT => m_axi_OUTPUT_r_ARPROT,
        ARQOS => m_axi_OUTPUT_r_ARQOS,
        ARREGION => m_axi_OUTPUT_r_ARREGION,
        ARUSER => m_axi_OUTPUT_r_ARUSER,
        RVALID => m_axi_OUTPUT_r_RVALID,
        RREADY => m_axi_OUTPUT_r_RREADY,
        RDATA => m_axi_OUTPUT_r_RDATA,
        RLAST => m_axi_OUTPUT_r_RLAST,
        RID => m_axi_OUTPUT_r_RID,
        RUSER => m_axi_OUTPUT_r_RUSER,
        RRESP => m_axi_OUTPUT_r_RRESP,
        BVALID => m_axi_OUTPUT_r_BVALID,
        BREADY => m_axi_OUTPUT_r_BREADY,
        BRESP => m_axi_OUTPUT_r_BRESP,
        BID => m_axi_OUTPUT_r_BID,
        BUSER => m_axi_OUTPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_r_RDATA,
        I_RID => OUTPUT_r_RID,
        I_RUSER => OUTPUT_r_RUSER,
        I_RRESP => OUTPUT_r_RRESP,
        I_RLAST => OUTPUT_r_RLAST,
        I_AWVALID => OUTPUT_r_AWVALID,
        I_AWREADY => OUTPUT_r_AWREADY,
        I_AWADDR => grp_sha256_done_fu_114_m_axi_hash_AWADDR,
        I_AWID => grp_sha256_done_fu_114_m_axi_hash_AWID,
        I_AWLEN => grp_sha256_done_fu_114_m_axi_hash_AWLEN,
        I_AWSIZE => grp_sha256_done_fu_114_m_axi_hash_AWSIZE,
        I_AWLOCK => grp_sha256_done_fu_114_m_axi_hash_AWLOCK,
        I_AWCACHE => grp_sha256_done_fu_114_m_axi_hash_AWCACHE,
        I_AWQOS => grp_sha256_done_fu_114_m_axi_hash_AWQOS,
        I_AWPROT => grp_sha256_done_fu_114_m_axi_hash_AWPROT,
        I_AWUSER => grp_sha256_done_fu_114_m_axi_hash_AWUSER,
        I_AWBURST => grp_sha256_done_fu_114_m_axi_hash_AWBURST,
        I_AWREGION => grp_sha256_done_fu_114_m_axi_hash_AWREGION,
        I_WVALID => OUTPUT_r_WVALID,
        I_WREADY => OUTPUT_r_WREADY,
        I_WDATA => grp_sha256_done_fu_114_m_axi_hash_WDATA,
        I_WID => grp_sha256_done_fu_114_m_axi_hash_WID,
        I_WUSER => grp_sha256_done_fu_114_m_axi_hash_WUSER,
        I_WLAST => grp_sha256_done_fu_114_m_axi_hash_WLAST,
        I_WSTRB => grp_sha256_done_fu_114_m_axi_hash_WSTRB,
        I_BVALID => OUTPUT_r_BVALID,
        I_BREADY => OUTPUT_r_BREADY,
        I_BRESP => OUTPUT_r_BRESP,
        I_BID => OUTPUT_r_BID,
        I_BUSER => OUTPUT_r_BUSER);

    sha256_buf_U : component sha256_sha256_buf
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sha256_buf_address0,
        ce0 => sha256_buf_ce0,
        we0 => sha256_buf_we0,
        d0 => sha256_buf_d0,
        q0 => sha256_buf_q0,
        address1 => sha256_buf_address1,
        ce1 => sha256_buf_ce1,
        we1 => sha256_buf_we1,
        d1 => grp_sha256_done_fu_114_sha256_buf_d1,
        q1 => sha256_buf_q1);

    grp_sha256_done_fu_114 : component sha256_done
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_done_fu_114_ap_start,
        ap_done => grp_sha256_done_fu_114_ap_done,
        ap_idle => grp_sha256_done_fu_114_ap_idle,
        ap_ready => grp_sha256_done_fu_114_ap_ready,
        sha256_buf_address0 => grp_sha256_done_fu_114_sha256_buf_address0,
        sha256_buf_ce0 => grp_sha256_done_fu_114_sha256_buf_ce0,
        sha256_buf_we0 => grp_sha256_done_fu_114_sha256_buf_we0,
        sha256_buf_d0 => grp_sha256_done_fu_114_sha256_buf_d0,
        sha256_buf_q0 => sha256_buf_q0,
        sha256_buf_address1 => grp_sha256_done_fu_114_sha256_buf_address1,
        sha256_buf_ce1 => grp_sha256_done_fu_114_sha256_buf_ce1,
        sha256_buf_we1 => grp_sha256_done_fu_114_sha256_buf_we1,
        sha256_buf_d1 => grp_sha256_done_fu_114_sha256_buf_d1,
        sha256_buf_q1 => sha256_buf_q1,
        sha256hash_0_read => sha256hash_0_reg_240,
        sha256hash_1_read => sha256hash_1_reg_245,
        sha256hash_2_read => sha256hash_2_reg_250,
        sha256hash_3_read => sha256hash_3_reg_255,
        sha256hash_4_read => sha256hash_4_reg_260,
        sha256hash_5_read => sha256hash_5_reg_265,
        sha256hash_6_read => sha256hash_6_reg_270,
        sha256hash_7_read => sha256hash_7_reg_275,
        sha256_bits_0_read => sha256_bits_0_reg_280,
        sha256_bits_1_read => sha256_bits_1_reg_230,
        sha256_len => sha256_len_0_reg_235,
        m_axi_hash_AWVALID => grp_sha256_done_fu_114_m_axi_hash_AWVALID,
        m_axi_hash_AWREADY => OUTPUT_r_AWREADY,
        m_axi_hash_AWADDR => grp_sha256_done_fu_114_m_axi_hash_AWADDR,
        m_axi_hash_AWID => grp_sha256_done_fu_114_m_axi_hash_AWID,
        m_axi_hash_AWLEN => grp_sha256_done_fu_114_m_axi_hash_AWLEN,
        m_axi_hash_AWSIZE => grp_sha256_done_fu_114_m_axi_hash_AWSIZE,
        m_axi_hash_AWBURST => grp_sha256_done_fu_114_m_axi_hash_AWBURST,
        m_axi_hash_AWLOCK => grp_sha256_done_fu_114_m_axi_hash_AWLOCK,
        m_axi_hash_AWCACHE => grp_sha256_done_fu_114_m_axi_hash_AWCACHE,
        m_axi_hash_AWPROT => grp_sha256_done_fu_114_m_axi_hash_AWPROT,
        m_axi_hash_AWQOS => grp_sha256_done_fu_114_m_axi_hash_AWQOS,
        m_axi_hash_AWREGION => grp_sha256_done_fu_114_m_axi_hash_AWREGION,
        m_axi_hash_AWUSER => grp_sha256_done_fu_114_m_axi_hash_AWUSER,
        m_axi_hash_WVALID => grp_sha256_done_fu_114_m_axi_hash_WVALID,
        m_axi_hash_WREADY => OUTPUT_r_WREADY,
        m_axi_hash_WDATA => grp_sha256_done_fu_114_m_axi_hash_WDATA,
        m_axi_hash_WSTRB => grp_sha256_done_fu_114_m_axi_hash_WSTRB,
        m_axi_hash_WLAST => grp_sha256_done_fu_114_m_axi_hash_WLAST,
        m_axi_hash_WID => grp_sha256_done_fu_114_m_axi_hash_WID,
        m_axi_hash_WUSER => grp_sha256_done_fu_114_m_axi_hash_WUSER,
        m_axi_hash_ARVALID => grp_sha256_done_fu_114_m_axi_hash_ARVALID,
        m_axi_hash_ARREADY => ap_const_logic_0,
        m_axi_hash_ARADDR => grp_sha256_done_fu_114_m_axi_hash_ARADDR,
        m_axi_hash_ARID => grp_sha256_done_fu_114_m_axi_hash_ARID,
        m_axi_hash_ARLEN => grp_sha256_done_fu_114_m_axi_hash_ARLEN,
        m_axi_hash_ARSIZE => grp_sha256_done_fu_114_m_axi_hash_ARSIZE,
        m_axi_hash_ARBURST => grp_sha256_done_fu_114_m_axi_hash_ARBURST,
        m_axi_hash_ARLOCK => grp_sha256_done_fu_114_m_axi_hash_ARLOCK,
        m_axi_hash_ARCACHE => grp_sha256_done_fu_114_m_axi_hash_ARCACHE,
        m_axi_hash_ARPROT => grp_sha256_done_fu_114_m_axi_hash_ARPROT,
        m_axi_hash_ARQOS => grp_sha256_done_fu_114_m_axi_hash_ARQOS,
        m_axi_hash_ARREGION => grp_sha256_done_fu_114_m_axi_hash_ARREGION,
        m_axi_hash_ARUSER => grp_sha256_done_fu_114_m_axi_hash_ARUSER,
        m_axi_hash_RVALID => ap_const_logic_0,
        m_axi_hash_RREADY => grp_sha256_done_fu_114_m_axi_hash_RREADY,
        m_axi_hash_RDATA => ap_const_lv8_0,
        m_axi_hash_RLAST => ap_const_logic_0,
        m_axi_hash_RID => ap_const_lv1_0,
        m_axi_hash_RUSER => ap_const_lv1_0,
        m_axi_hash_RRESP => ap_const_lv2_0,
        m_axi_hash_BVALID => OUTPUT_r_BVALID,
        m_axi_hash_BREADY => grp_sha256_done_fu_114_m_axi_hash_BREADY,
        m_axi_hash_BRESP => OUTPUT_r_BRESP,
        m_axi_hash_BID => OUTPUT_r_BID,
        m_axi_hash_BUSER => OUTPUT_r_BUSER,
        hash_offset => hash_read_reg_207);

    grp_sha256_hash_fu_135 : component sha256_hash
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_hash_fu_135_ap_start,
        ap_done => grp_sha256_hash_fu_135_ap_done,
        ap_idle => grp_sha256_hash_fu_135_ap_idle,
        ap_ready => grp_sha256_hash_fu_135_ap_ready,
        sha256_buf_address0 => grp_sha256_hash_fu_135_sha256_buf_address0,
        sha256_buf_ce0 => grp_sha256_hash_fu_135_sha256_buf_ce0,
        sha256_buf_we0 => grp_sha256_hash_fu_135_sha256_buf_we0,
        sha256_buf_d0 => grp_sha256_hash_fu_135_sha256_buf_d0,
        sha256_buf_q0 => sha256_buf_q0,
        sha256_buf_address1 => grp_sha256_hash_fu_135_sha256_buf_address1,
        sha256_buf_ce1 => grp_sha256_hash_fu_135_sha256_buf_ce1,
        sha256_buf_q1 => sha256_buf_q1,
        m_axi_data_AWVALID => grp_sha256_hash_fu_135_m_axi_data_AWVALID,
        m_axi_data_AWREADY => ap_const_logic_0,
        m_axi_data_AWADDR => grp_sha256_hash_fu_135_m_axi_data_AWADDR,
        m_axi_data_AWID => grp_sha256_hash_fu_135_m_axi_data_AWID,
        m_axi_data_AWLEN => grp_sha256_hash_fu_135_m_axi_data_AWLEN,
        m_axi_data_AWSIZE => grp_sha256_hash_fu_135_m_axi_data_AWSIZE,
        m_axi_data_AWBURST => grp_sha256_hash_fu_135_m_axi_data_AWBURST,
        m_axi_data_AWLOCK => grp_sha256_hash_fu_135_m_axi_data_AWLOCK,
        m_axi_data_AWCACHE => grp_sha256_hash_fu_135_m_axi_data_AWCACHE,
        m_axi_data_AWPROT => grp_sha256_hash_fu_135_m_axi_data_AWPROT,
        m_axi_data_AWQOS => grp_sha256_hash_fu_135_m_axi_data_AWQOS,
        m_axi_data_AWREGION => grp_sha256_hash_fu_135_m_axi_data_AWREGION,
        m_axi_data_AWUSER => grp_sha256_hash_fu_135_m_axi_data_AWUSER,
        m_axi_data_WVALID => grp_sha256_hash_fu_135_m_axi_data_WVALID,
        m_axi_data_WREADY => ap_const_logic_0,
        m_axi_data_WDATA => grp_sha256_hash_fu_135_m_axi_data_WDATA,
        m_axi_data_WSTRB => grp_sha256_hash_fu_135_m_axi_data_WSTRB,
        m_axi_data_WLAST => grp_sha256_hash_fu_135_m_axi_data_WLAST,
        m_axi_data_WID => grp_sha256_hash_fu_135_m_axi_data_WID,
        m_axi_data_WUSER => grp_sha256_hash_fu_135_m_axi_data_WUSER,
        m_axi_data_ARVALID => grp_sha256_hash_fu_135_m_axi_data_ARVALID,
        m_axi_data_ARREADY => INPUT_r_ARREADY,
        m_axi_data_ARADDR => grp_sha256_hash_fu_135_m_axi_data_ARADDR,
        m_axi_data_ARID => grp_sha256_hash_fu_135_m_axi_data_ARID,
        m_axi_data_ARLEN => grp_sha256_hash_fu_135_m_axi_data_ARLEN,
        m_axi_data_ARSIZE => grp_sha256_hash_fu_135_m_axi_data_ARSIZE,
        m_axi_data_ARBURST => grp_sha256_hash_fu_135_m_axi_data_ARBURST,
        m_axi_data_ARLOCK => grp_sha256_hash_fu_135_m_axi_data_ARLOCK,
        m_axi_data_ARCACHE => grp_sha256_hash_fu_135_m_axi_data_ARCACHE,
        m_axi_data_ARPROT => grp_sha256_hash_fu_135_m_axi_data_ARPROT,
        m_axi_data_ARQOS => grp_sha256_hash_fu_135_m_axi_data_ARQOS,
        m_axi_data_ARREGION => grp_sha256_hash_fu_135_m_axi_data_ARREGION,
        m_axi_data_ARUSER => grp_sha256_hash_fu_135_m_axi_data_ARUSER,
        m_axi_data_RVALID => INPUT_r_RVALID,
        m_axi_data_RREADY => grp_sha256_hash_fu_135_m_axi_data_RREADY,
        m_axi_data_RDATA => INPUT_r_RDATA,
        m_axi_data_RLAST => INPUT_r_RLAST,
        m_axi_data_RID => INPUT_r_RID,
        m_axi_data_RUSER => INPUT_r_RUSER,
        m_axi_data_RRESP => INPUT_r_RRESP,
        m_axi_data_BVALID => ap_const_logic_0,
        m_axi_data_BREADY => grp_sha256_hash_fu_135_m_axi_data_BREADY,
        m_axi_data_BRESP => ap_const_lv2_0,
        m_axi_data_BID => ap_const_lv1_0,
        m_axi_data_BUSER => ap_const_lv1_0,
        data_offset => msg_read_reg_217,
        len => len_read_reg_212,
        ap_return_0 => grp_sha256_hash_fu_135_ap_return_0,
        ap_return_1 => grp_sha256_hash_fu_135_ap_return_1,
        ap_return_2 => grp_sha256_hash_fu_135_ap_return_2,
        ap_return_3 => grp_sha256_hash_fu_135_ap_return_3,
        ap_return_4 => grp_sha256_hash_fu_135_ap_return_4,
        ap_return_5 => grp_sha256_hash_fu_135_ap_return_5,
        ap_return_6 => grp_sha256_hash_fu_135_ap_return_6,
        ap_return_7 => grp_sha256_hash_fu_135_ap_return_7,
        ap_return_8 => grp_sha256_hash_fu_135_ap_return_8,
        ap_return_9 => grp_sha256_hash_fu_135_ap_return_9,
        ap_return_10 => grp_sha256_hash_fu_135_ap_return_10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_done_fu_114_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_done_fu_114_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_sha256_done_fu_114_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_done_fu_114_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_done_fu_114_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_hash_fu_135_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_hash_fu_135_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_sha256_hash_fu_135_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_hash_fu_135_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_hash_fu_135_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    hash_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    invdar_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                invdar_reg_103 <= indvarinc_fu_146_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                invdar_reg_103 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    len_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    msg_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (hash_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (hash_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (hash_0_vld_reg = ap_const_logic_1)))) then
                hash_0_data_reg <= hash;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                hash_read_reg_207 <= hash_0_data_reg;
                len_read_reg_212 <= len_0_data_reg;
                msg_read_reg_217 <= msg_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (len_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (len_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (len_0_vld_reg = ap_const_logic_1)))) then
                len_0_data_reg <= len;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (msg_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (msg_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (msg_0_vld_reg = ap_const_logic_1)))) then
                msg_0_data_reg <= msg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha256_hash_fu_135_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sha256_bits_0_reg_280 <= grp_sha256_hash_fu_135_ap_return_10;
                sha256_bits_1_reg_230 <= grp_sha256_hash_fu_135_ap_return_1;
                sha256_len_0_reg_235 <= grp_sha256_hash_fu_135_ap_return_0;
                sha256hash_0_reg_240 <= grp_sha256_hash_fu_135_ap_return_2;
                sha256hash_1_reg_245 <= grp_sha256_hash_fu_135_ap_return_3;
                sha256hash_2_reg_250 <= grp_sha256_hash_fu_135_ap_return_4;
                sha256hash_3_reg_255 <= grp_sha256_hash_fu_135_ap_return_5;
                sha256hash_4_reg_260 <= grp_sha256_hash_fu_135_ap_return_6;
                sha256hash_5_reg_265 <= grp_sha256_hash_fu_135_ap_return_7;
                sha256hash_6_reg_270 <= grp_sha256_hash_fu_135_ap_return_8;
                sha256hash_7_reg_275 <= grp_sha256_hash_fu_135_ap_return_9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, grp_sha256_hash_fu_135_ap_done, grp_sha256_done_fu_114_ap_done, tmp_s_fu_157_p2, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_sha256_hash_fu_135_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_sha256_done_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    INPUT_r_ARVALID_assign_proc : process(ap_CS_fsm_state5, grp_sha256_hash_fu_135_m_axi_data_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_r_ARVALID <= grp_sha256_hash_fu_135_m_axi_data_ARVALID;
        else 
            INPUT_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_RREADY_assign_proc : process(ap_CS_fsm_state5, grp_sha256_hash_fu_135_m_axi_data_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_r_RREADY <= grp_sha256_hash_fu_135_m_axi_data_RREADY;
        else 
            INPUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_AWVALID_assign_proc : process(grp_sha256_done_fu_114_m_axi_hash_AWVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_r_AWVALID <= grp_sha256_done_fu_114_m_axi_hash_AWVALID;
        else 
            OUTPUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_BREADY_assign_proc : process(grp_sha256_done_fu_114_m_axi_hash_BREADY, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_r_BREADY <= grp_sha256_done_fu_114_m_axi_hash_BREADY;
        else 
            OUTPUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_WVALID_assign_proc : process(grp_sha256_done_fu_114_m_axi_hash_WVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_r_WVALID <= grp_sha256_done_fu_114_m_axi_hash_WVALID;
        else 
            OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(grp_sha256_done_fu_114_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha256_done_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha256_done_fu_114_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha256_done_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_sha256_done_fu_114_ap_start <= grp_sha256_done_fu_114_ap_start_reg;
    grp_sha256_hash_fu_135_ap_start <= grp_sha256_hash_fu_135_ap_start_reg;

    hash_0_ack_out_assign_proc : process(grp_sha256_done_fu_114_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha256_done_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            hash_0_ack_out <= ap_const_logic_1;
        else 
            hash_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    indvarinc_fu_146_p2 <= std_logic_vector(unsigned(invdar_reg_103) + unsigned(ap_const_lv6_1));

    len_0_ack_out_assign_proc : process(grp_sha256_done_fu_114_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha256_done_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            len_0_ack_out <= ap_const_logic_1;
        else 
            len_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    msg_0_ack_out_assign_proc : process(grp_sha256_done_fu_114_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha256_done_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            msg_0_ack_out <= ap_const_logic_1;
        else 
            msg_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_sha256_done_fu_114_sha256_buf_address0, grp_sha256_hash_fu_135_sha256_buf_address0, ap_CS_fsm_state7, tmp_fu_152_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sha256_buf_address0 <= tmp_fu_152_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_address0 <= grp_sha256_hash_fu_135_sha256_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_address0 <= grp_sha256_done_fu_114_sha256_buf_address0;
        else 
            sha256_buf_address0 <= "XXXXXX";
        end if; 
    end process;


    sha256_buf_address1_assign_proc : process(ap_CS_fsm_state5, grp_sha256_done_fu_114_sha256_buf_address1, grp_sha256_hash_fu_135_sha256_buf_address1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_address1 <= grp_sha256_hash_fu_135_sha256_buf_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_address1 <= grp_sha256_done_fu_114_sha256_buf_address1;
        else 
            sha256_buf_address1 <= "XXXXXX";
        end if; 
    end process;


    sha256_buf_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_sha256_done_fu_114_sha256_buf_ce0, grp_sha256_hash_fu_135_sha256_buf_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sha256_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_ce0 <= grp_sha256_hash_fu_135_sha256_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_ce0 <= grp_sha256_done_fu_114_sha256_buf_ce0;
        else 
            sha256_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_ce1_assign_proc : process(ap_CS_fsm_state5, grp_sha256_done_fu_114_sha256_buf_ce1, grp_sha256_hash_fu_135_sha256_buf_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_ce1 <= grp_sha256_hash_fu_135_sha256_buf_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_ce1 <= grp_sha256_done_fu_114_sha256_buf_ce1;
        else 
            sha256_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_sha256_done_fu_114_sha256_buf_d0, grp_sha256_hash_fu_135_sha256_buf_d0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sha256_buf_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_d0 <= grp_sha256_hash_fu_135_sha256_buf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_d0 <= grp_sha256_done_fu_114_sha256_buf_d0;
        else 
            sha256_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sha256_buf_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_sha256_done_fu_114_sha256_buf_we0, grp_sha256_hash_fu_135_sha256_buf_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sha256_buf_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha256_buf_we0 <= grp_sha256_hash_fu_135_sha256_buf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_we0 <= grp_sha256_done_fu_114_sha256_buf_we0;
        else 
            sha256_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_we1_assign_proc : process(grp_sha256_done_fu_114_sha256_buf_we1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha256_buf_we1 <= grp_sha256_done_fu_114_sha256_buf_we1;
        else 
            sha256_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_103),64));
    tmp_s_fu_157_p2 <= "1" when (invdar_reg_103 = ap_const_lv6_3F) else "0";
end behav;
