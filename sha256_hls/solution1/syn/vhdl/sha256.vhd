-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    msg_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    msg_ce0 : OUT STD_LOGIC;
    msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    hash_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hash_ce0 : OUT STD_LOGIC;
    hash_we0 : OUT STD_LOGIC;
    hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    hash_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hash_ce1 : OUT STD_LOGIC;
    hash_we1 : OUT STD_LOGIC;
    hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3477,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=22135,HLS_SYN_LUT=46546,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_98_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sha256_bits_1_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sha256_hash_fu_90_ap_ready : STD_LOGIC;
    signal grp_sha256_hash_fu_90_ap_done : STD_LOGIC;
    signal sha256_len_0_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_0_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_1_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_2_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_3_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_4_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_5_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_6_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256hash_7_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256_bits_0_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sha256_buf_ce0 : STD_LOGIC;
    signal sha256_buf_we0 : STD_LOGIC;
    signal sha256_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256_buf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sha256_buf_ce1 : STD_LOGIC;
    signal sha256_buf_we1 : STD_LOGIC;
    signal sha256_buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_done_fu_72_ap_start : STD_LOGIC;
    signal grp_sha256_done_fu_72_ap_done : STD_LOGIC;
    signal grp_sha256_done_fu_72_ap_idle : STD_LOGIC;
    signal grp_sha256_done_fu_72_ap_ready : STD_LOGIC;
    signal grp_sha256_done_fu_72_sha256_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_done_fu_72_sha256_buf_ce0 : STD_LOGIC;
    signal grp_sha256_done_fu_72_sha256_buf_we0 : STD_LOGIC;
    signal grp_sha256_done_fu_72_sha256_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_done_fu_72_sha256_buf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_done_fu_72_sha256_buf_ce1 : STD_LOGIC;
    signal grp_sha256_done_fu_72_sha256_buf_we1 : STD_LOGIC;
    signal grp_sha256_done_fu_72_sha256_buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_done_fu_72_hash_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha256_done_fu_72_hash_ce0 : STD_LOGIC;
    signal grp_sha256_done_fu_72_hash_we0 : STD_LOGIC;
    signal grp_sha256_done_fu_72_hash_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_done_fu_72_hash_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha256_done_fu_72_hash_ce1 : STD_LOGIC;
    signal grp_sha256_done_fu_72_hash_we1 : STD_LOGIC;
    signal grp_sha256_done_fu_72_hash_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_hash_fu_90_ap_start : STD_LOGIC;
    signal grp_sha256_hash_fu_90_ap_idle : STD_LOGIC;
    signal grp_sha256_hash_fu_90_sha256_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_hash_fu_90_sha256_buf_ce0 : STD_LOGIC;
    signal grp_sha256_hash_fu_90_sha256_buf_we0 : STD_LOGIC;
    signal grp_sha256_hash_fu_90_sha256_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_hash_fu_90_sha256_buf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_hash_fu_90_sha256_buf_ce1 : STD_LOGIC;
    signal grp_sha256_hash_fu_90_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_hash_fu_90_data_ce0 : STD_LOGIC;
    signal grp_sha256_hash_fu_90_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_hash_fu_90_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_61 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_done_fu_72_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_sha256_hash_fu_90_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component sha256_done IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce0 : OUT STD_LOGIC;
        sha256_buf_we0 : OUT STD_LOGIC;
        sha256_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce1 : OUT STD_LOGIC;
        sha256_buf_we1 : OUT STD_LOGIC;
        sha256_buf_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256hash_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256hash_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256_bits_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256_bits_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sha256_len : IN STD_LOGIC_VECTOR (31 downto 0);
        hash_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        hash_ce0 : OUT STD_LOGIC;
        hash_we0 : OUT STD_LOGIC;
        hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        hash_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        hash_ce1 : OUT STD_LOGIC;
        hash_we1 : OUT STD_LOGIC;
        hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_hash IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha256_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce0 : OUT STD_LOGIC;
        sha256_buf_we0 : OUT STD_LOGIC;
        sha256_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sha256_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sha256_buf_ce1 : OUT STD_LOGIC;
        sha256_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        len : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_sha256_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sha256_buf_U : component sha256_sha256_buf
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sha256_buf_address0,
        ce0 => sha256_buf_ce0,
        we0 => sha256_buf_we0,
        d0 => sha256_buf_d0,
        q0 => sha256_buf_q0,
        address1 => sha256_buf_address1,
        ce1 => sha256_buf_ce1,
        we1 => sha256_buf_we1,
        d1 => grp_sha256_done_fu_72_sha256_buf_d1,
        q1 => sha256_buf_q1);

    grp_sha256_done_fu_72 : component sha256_done
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_done_fu_72_ap_start,
        ap_done => grp_sha256_done_fu_72_ap_done,
        ap_idle => grp_sha256_done_fu_72_ap_idle,
        ap_ready => grp_sha256_done_fu_72_ap_ready,
        sha256_buf_address0 => grp_sha256_done_fu_72_sha256_buf_address0,
        sha256_buf_ce0 => grp_sha256_done_fu_72_sha256_buf_ce0,
        sha256_buf_we0 => grp_sha256_done_fu_72_sha256_buf_we0,
        sha256_buf_d0 => grp_sha256_done_fu_72_sha256_buf_d0,
        sha256_buf_q0 => sha256_buf_q0,
        sha256_buf_address1 => grp_sha256_done_fu_72_sha256_buf_address1,
        sha256_buf_ce1 => grp_sha256_done_fu_72_sha256_buf_ce1,
        sha256_buf_we1 => grp_sha256_done_fu_72_sha256_buf_we1,
        sha256_buf_d1 => grp_sha256_done_fu_72_sha256_buf_d1,
        sha256_buf_q1 => sha256_buf_q1,
        sha256hash_0_read => sha256hash_0_reg_182,
        sha256hash_1_read => sha256hash_1_reg_187,
        sha256hash_2_read => sha256hash_2_reg_192,
        sha256hash_3_read => sha256hash_3_reg_197,
        sha256hash_4_read => sha256hash_4_reg_202,
        sha256hash_5_read => sha256hash_5_reg_207,
        sha256hash_6_read => sha256hash_6_reg_212,
        sha256hash_7_read => sha256hash_7_reg_217,
        sha256_bits_0_read => sha256_bits_0_reg_222,
        sha256_bits_1_read => sha256_bits_1_reg_172,
        sha256_len => sha256_len_0_reg_177,
        hash_address0 => grp_sha256_done_fu_72_hash_address0,
        hash_ce0 => grp_sha256_done_fu_72_hash_ce0,
        hash_we0 => grp_sha256_done_fu_72_hash_we0,
        hash_d0 => grp_sha256_done_fu_72_hash_d0,
        hash_address1 => grp_sha256_done_fu_72_hash_address1,
        hash_ce1 => grp_sha256_done_fu_72_hash_ce1,
        hash_we1 => grp_sha256_done_fu_72_hash_we1,
        hash_d1 => grp_sha256_done_fu_72_hash_d1);

    grp_sha256_hash_fu_90 : component sha256_hash
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_hash_fu_90_ap_start,
        ap_done => grp_sha256_hash_fu_90_ap_done,
        ap_idle => grp_sha256_hash_fu_90_ap_idle,
        ap_ready => grp_sha256_hash_fu_90_ap_ready,
        sha256_buf_address0 => grp_sha256_hash_fu_90_sha256_buf_address0,
        sha256_buf_ce0 => grp_sha256_hash_fu_90_sha256_buf_ce0,
        sha256_buf_we0 => grp_sha256_hash_fu_90_sha256_buf_we0,
        sha256_buf_d0 => grp_sha256_hash_fu_90_sha256_buf_d0,
        sha256_buf_q0 => sha256_buf_q0,
        sha256_buf_address1 => grp_sha256_hash_fu_90_sha256_buf_address1,
        sha256_buf_ce1 => grp_sha256_hash_fu_90_sha256_buf_ce1,
        sha256_buf_q1 => sha256_buf_q1,
        data_address0 => grp_sha256_hash_fu_90_data_address0,
        data_ce0 => grp_sha256_hash_fu_90_data_ce0,
        data_q0 => msg_q0,
        len => len,
        ap_return_0 => grp_sha256_hash_fu_90_ap_return_0,
        ap_return_1 => grp_sha256_hash_fu_90_ap_return_1,
        ap_return_2 => grp_sha256_hash_fu_90_ap_return_2,
        ap_return_3 => grp_sha256_hash_fu_90_ap_return_3,
        ap_return_4 => grp_sha256_hash_fu_90_ap_return_4,
        ap_return_5 => grp_sha256_hash_fu_90_ap_return_5,
        ap_return_6 => grp_sha256_hash_fu_90_ap_return_6,
        ap_return_7 => grp_sha256_hash_fu_90_ap_return_7,
        ap_return_8 => grp_sha256_hash_fu_90_ap_return_8,
        ap_return_9 => grp_sha256_hash_fu_90_ap_return_9,
        ap_return_10 => grp_sha256_hash_fu_90_ap_return_10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_done_fu_72_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_done_fu_72_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_sha256_done_fu_72_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_done_fu_72_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_done_fu_72_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_hash_fu_90_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_hash_fu_90_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sha256_hash_fu_90_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_hash_fu_90_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_hash_fu_90_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    invdar_reg_61_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_109_p2 = ap_const_lv1_0))) then 
                invdar_reg_61 <= indvarinc_fu_98_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_61 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha256_hash_fu_90_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sha256_bits_0_reg_222 <= grp_sha256_hash_fu_90_ap_return_10;
                sha256_bits_1_reg_172 <= grp_sha256_hash_fu_90_ap_return_1;
                sha256_len_0_reg_177 <= grp_sha256_hash_fu_90_ap_return_0;
                sha256hash_0_reg_182 <= grp_sha256_hash_fu_90_ap_return_2;
                sha256hash_1_reg_187 <= grp_sha256_hash_fu_90_ap_return_3;
                sha256hash_2_reg_192 <= grp_sha256_hash_fu_90_ap_return_4;
                sha256hash_3_reg_197 <= grp_sha256_hash_fu_90_ap_return_5;
                sha256hash_4_reg_202 <= grp_sha256_hash_fu_90_ap_return_6;
                sha256hash_5_reg_207 <= grp_sha256_hash_fu_90_ap_return_7;
                sha256hash_6_reg_212 <= grp_sha256_hash_fu_90_ap_return_8;
                sha256hash_7_reg_217 <= grp_sha256_hash_fu_90_ap_return_9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_hash_fu_90_ap_done, grp_sha256_done_fu_72_ap_done, tmp_s_fu_109_p2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_109_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_sha256_hash_fu_90_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_sha256_done_fu_72_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(grp_sha256_done_fu_72_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_sha256_done_fu_72_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha256_done_fu_72_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_sha256_done_fu_72_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha256_done_fu_72_ap_start <= grp_sha256_done_fu_72_ap_start_reg;
    grp_sha256_hash_fu_90_ap_start <= grp_sha256_hash_fu_90_ap_start_reg;
    hash_address0 <= grp_sha256_done_fu_72_hash_address0;
    hash_address1 <= grp_sha256_done_fu_72_hash_address1;
    hash_ce0 <= grp_sha256_done_fu_72_hash_ce0;
    hash_ce1 <= grp_sha256_done_fu_72_hash_ce1;
    hash_d0 <= grp_sha256_done_fu_72_hash_d0;
    hash_d1 <= grp_sha256_done_fu_72_hash_d1;
    hash_we0 <= grp_sha256_done_fu_72_hash_we0;
    hash_we1 <= grp_sha256_done_fu_72_hash_we1;
    indvarinc_fu_98_p2 <= std_logic_vector(unsigned(invdar_reg_61) + unsigned(ap_const_lv6_1));
    msg_address0 <= grp_sha256_hash_fu_90_data_address0;
    msg_ce0 <= grp_sha256_hash_fu_90_data_ce0;

    sha256_buf_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_done_fu_72_sha256_buf_address0, grp_sha256_hash_fu_90_sha256_buf_address0, ap_CS_fsm_state6, tmp_fu_104_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha256_buf_address0 <= tmp_fu_104_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha256_buf_address0 <= grp_sha256_hash_fu_90_sha256_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_address0 <= grp_sha256_done_fu_72_sha256_buf_address0;
        else 
            sha256_buf_address0 <= "XXXXXX";
        end if; 
    end process;


    sha256_buf_address1_assign_proc : process(ap_CS_fsm_state4, grp_sha256_done_fu_72_sha256_buf_address1, grp_sha256_hash_fu_90_sha256_buf_address1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha256_buf_address1 <= grp_sha256_hash_fu_90_sha256_buf_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_address1 <= grp_sha256_done_fu_72_sha256_buf_address1;
        else 
            sha256_buf_address1 <= "XXXXXX";
        end if; 
    end process;


    sha256_buf_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_done_fu_72_sha256_buf_ce0, grp_sha256_hash_fu_90_sha256_buf_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha256_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha256_buf_ce0 <= grp_sha256_hash_fu_90_sha256_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_ce0 <= grp_sha256_done_fu_72_sha256_buf_ce0;
        else 
            sha256_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_ce1_assign_proc : process(ap_CS_fsm_state4, grp_sha256_done_fu_72_sha256_buf_ce1, grp_sha256_hash_fu_90_sha256_buf_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha256_buf_ce1 <= grp_sha256_hash_fu_90_sha256_buf_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_ce1 <= grp_sha256_done_fu_72_sha256_buf_ce1;
        else 
            sha256_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_done_fu_72_sha256_buf_d0, grp_sha256_hash_fu_90_sha256_buf_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha256_buf_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha256_buf_d0 <= grp_sha256_hash_fu_90_sha256_buf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_d0 <= grp_sha256_done_fu_72_sha256_buf_d0;
        else 
            sha256_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sha256_buf_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_done_fu_72_sha256_buf_we0, grp_sha256_hash_fu_90_sha256_buf_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha256_buf_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha256_buf_we0 <= grp_sha256_hash_fu_90_sha256_buf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_we0 <= grp_sha256_done_fu_72_sha256_buf_we0;
        else 
            sha256_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256_buf_we1_assign_proc : process(grp_sha256_done_fu_72_sha256_buf_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sha256_buf_we1 <= grp_sha256_done_fu_72_sha256_buf_we1;
        else 
            sha256_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_61),64));
    tmp_s_fu_109_p2 <= "1" when (invdar_reg_61 = ap_const_lv6_3F) else "0";
end behav;
