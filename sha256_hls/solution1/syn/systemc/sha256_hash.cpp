// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_hash.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_hash::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_hash::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> sha256_hash::ap_ST_fsm_state1 = "1";
const sc_lv<11> sha256_hash::ap_ST_fsm_state2 = "10";
const sc_lv<11> sha256_hash::ap_ST_fsm_state3 = "100";
const sc_lv<11> sha256_hash::ap_ST_fsm_state4 = "1000";
const sc_lv<11> sha256_hash::ap_ST_fsm_state5 = "10000";
const sc_lv<11> sha256_hash::ap_ST_fsm_state6 = "100000";
const sc_lv<11> sha256_hash::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> sha256_hash::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> sha256_hash::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> sha256_hash::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> sha256_hash::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> sha256_hash::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sha256_hash::ap_const_lv1_0 = "0";
const sc_lv<3> sha256_hash::ap_const_lv3_0 = "000";
const sc_lv<2> sha256_hash::ap_const_lv2_0 = "00";
const sc_lv<4> sha256_hash::ap_const_lv4_0 = "0000";
const sc_lv<8> sha256_hash::ap_const_lv8_0 = "00000000";
const sc_lv<32> sha256_hash::ap_const_lv32_7 = "111";
const sc_lv<32> sha256_hash::ap_const_lv32_8 = "1000";
const sc_lv<32> sha256_hash::ap_const_lv32_9 = "1001";
const sc_lv<32> sha256_hash::ap_const_lv32_6 = "110";
const sc_lv<32> sha256_hash::ap_const_lv32_A = "1010";
const sc_lv<1> sha256_hash::ap_const_lv1_1 = "1";
const bool sha256_hash::ap_const_boolean_0 = false;
const sc_lv<32> sha256_hash::ap_const_lv32_5BE0CD19 = "1011011111000001100110100011001";
const sc_lv<32> sha256_hash::ap_const_lv32_1F83D9AB = "11111100000111101100110101011";
const sc_lv<32> sha256_hash::ap_const_lv32_9B05688C = "10011011000001010110100010001100";
const sc_lv<32> sha256_hash::ap_const_lv32_510E527F = "1010001000011100101001001111111";
const sc_lv<32> sha256_hash::ap_const_lv32_A54FF53A = "10100101010011111111010100111010";
const sc_lv<32> sha256_hash::ap_const_lv32_3C6EF372 = "111100011011101111001101110010";
const sc_lv<32> sha256_hash::ap_const_lv32_BB67AE85 = "10111011011001111010111010000101";
const sc_lv<32> sha256_hash::ap_const_lv32_6A09E667 = "1101010000010011110011001100111";
const sc_lv<32> sha256_hash::ap_const_lv32_1 = "1";
const sc_lv<32> sha256_hash::ap_const_lv32_FFFFFFBF = "11111111111111111111111110111111";
const sc_lv<32> sha256_hash::ap_const_lv32_40 = "1000000";
const bool sha256_hash::ap_const_boolean_1 = true;

sha256_hash::sha256_hash(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_p_hash_fu_166 = new p_hash("grp_p_hash_fu_166");
    grp_p_hash_fu_166->ap_clk(ap_clk);
    grp_p_hash_fu_166->ap_rst(ap_rst);
    grp_p_hash_fu_166->ap_start(grp_p_hash_fu_166_ap_start);
    grp_p_hash_fu_166->ap_done(grp_p_hash_fu_166_ap_done);
    grp_p_hash_fu_166->ap_idle(grp_p_hash_fu_166_ap_idle);
    grp_p_hash_fu_166->ap_ready(grp_p_hash_fu_166_ap_ready);
    grp_p_hash_fu_166->sha256_buf_address0(grp_p_hash_fu_166_sha256_buf_address0);
    grp_p_hash_fu_166->sha256_buf_ce0(grp_p_hash_fu_166_sha256_buf_ce0);
    grp_p_hash_fu_166->sha256_buf_q0(sha256_buf_q0);
    grp_p_hash_fu_166->sha256_buf_address1(grp_p_hash_fu_166_sha256_buf_address1);
    grp_p_hash_fu_166->sha256_buf_ce1(grp_p_hash_fu_166_sha256_buf_ce1);
    grp_p_hash_fu_166->sha256_buf_q1(sha256_buf_q1);
    grp_p_hash_fu_166->sha256hash_0_read(sha256hash_load_1_reg_637);
    grp_p_hash_fu_166->sha256hash_1_read(sha256hash_1_load_1_reg_632);
    grp_p_hash_fu_166->sha256hash_2_read(sha256hash_2_load_1_reg_627);
    grp_p_hash_fu_166->sha256hash_3_read(sha256hash_3_load_1_reg_622);
    grp_p_hash_fu_166->sha256hash_4_read(sha256hash_4_load_1_reg_617);
    grp_p_hash_fu_166->sha256hash_5_read(sha256hash_5_load_1_reg_612);
    grp_p_hash_fu_166->sha256hash_6_read(sha256hash_6_load_1_reg_607);
    grp_p_hash_fu_166->sha256hash_7_read(sha256hash_7_load_1_reg_602);
    grp_p_hash_fu_166->ap_return_0(grp_p_hash_fu_166_ap_return_0);
    grp_p_hash_fu_166->ap_return_1(grp_p_hash_fu_166_ap_return_1);
    grp_p_hash_fu_166->ap_return_2(grp_p_hash_fu_166_ap_return_2);
    grp_p_hash_fu_166->ap_return_3(grp_p_hash_fu_166_ap_return_3);
    grp_p_hash_fu_166->ap_return_4(grp_p_hash_fu_166_ap_return_4);
    grp_p_hash_fu_166->ap_return_5(grp_p_hash_fu_166_ap_return_5);
    grp_p_hash_fu_166->ap_return_6(grp_p_hash_fu_166_ap_return_6);
    grp_p_hash_fu_166->ap_return_7(grp_p_hash_fu_166_ap_return_7);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state11_on_subcall_done);
    sensitive << ( tmp_3_reg_598 );
    sensitive << ( grp_p_hash_fu_166_ap_done );

    SC_METHOD(thread_ap_block_state8);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( exitcond_fu_289_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256_len_0_write_s_fu_74 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256_bits_1_read_s_fu_114 );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256_bits_0_read_s_fu_78 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256hash_fu_110 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256hash_1_fu_106 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256hash_2_fu_102 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256hash_3_fu_98 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256hash_4_fu_94 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256hash_5_fu_90 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256hash_6_fu_86 );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( sha256hash_7_fu_82 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_data_ARREADY);
    sensitive << ( m_axi_data_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_data_ARREADY );

    SC_METHOD(thread_data_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_ARREADY );

    SC_METHOD(thread_data_blk_n_R);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );

    SC_METHOD(thread_exitcond_fu_289_p2);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( len );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( i_reg_155 );

    SC_METHOD(thread_grp_p_hash_fu_166_ap_start);
    sensitive << ( grp_p_hash_fu_166_ap_start_reg );

    SC_METHOD(thread_i_1_fu_294_p2);
    sensitive << ( i_reg_155 );

    SC_METHOD(thread_m_axi_data_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_228_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_data_ARREADY );

    SC_METHOD(thread_m_axi_data_ARBURST);

    SC_METHOD(thread_m_axi_data_ARCACHE);

    SC_METHOD(thread_m_axi_data_ARID);

    SC_METHOD(thread_m_axi_data_ARLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( len );
    sensitive << ( ap_reg_ioackin_m_axi_data_ARREADY );

    SC_METHOD(thread_m_axi_data_ARLOCK);

    SC_METHOD(thread_m_axi_data_ARPROT);

    SC_METHOD(thread_m_axi_data_ARQOS);

    SC_METHOD(thread_m_axi_data_ARREGION);

    SC_METHOD(thread_m_axi_data_ARSIZE);

    SC_METHOD(thread_m_axi_data_ARUSER);

    SC_METHOD(thread_m_axi_data_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_data_ARREADY );

    SC_METHOD(thread_m_axi_data_AWADDR);

    SC_METHOD(thread_m_axi_data_AWBURST);

    SC_METHOD(thread_m_axi_data_AWCACHE);

    SC_METHOD(thread_m_axi_data_AWID);

    SC_METHOD(thread_m_axi_data_AWLEN);

    SC_METHOD(thread_m_axi_data_AWLOCK);

    SC_METHOD(thread_m_axi_data_AWPROT);

    SC_METHOD(thread_m_axi_data_AWQOS);

    SC_METHOD(thread_m_axi_data_AWREGION);

    SC_METHOD(thread_m_axi_data_AWSIZE);

    SC_METHOD(thread_m_axi_data_AWUSER);

    SC_METHOD(thread_m_axi_data_AWVALID);

    SC_METHOD(thread_m_axi_data_BREADY);

    SC_METHOD(thread_m_axi_data_RREADY);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );

    SC_METHOD(thread_m_axi_data_WDATA);

    SC_METHOD(thread_m_axi_data_WID);

    SC_METHOD(thread_m_axi_data_WLAST);

    SC_METHOD(thread_m_axi_data_WSTRB);

    SC_METHOD(thread_m_axi_data_WUSER);

    SC_METHOD(thread_m_axi_data_WVALID);

    SC_METHOD(thread_sha256_bits_0_write_fu_440_p2);
    sensitive << ( sha256_bits_0_read_s_fu_78 );

    SC_METHOD(thread_sha256_buf_address0);
    sensitive << ( tmp_3_reg_598 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_p_hash_fu_166_sha256_buf_address0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_1_fu_366_p1 );

    SC_METHOD(thread_sha256_buf_address1);
    sensitive << ( tmp_3_reg_598 );
    sensitive << ( grp_p_hash_fu_166_sha256_buf_address1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_sha256_buf_ce0);
    sensitive << ( tmp_3_reg_598 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_p_hash_fu_166_sha256_buf_ce0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_sha256_buf_ce1);
    sensitive << ( tmp_3_reg_598 );
    sensitive << ( grp_p_hash_fu_166_sha256_buf_ce1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_sha256_buf_d0);
    sensitive << ( data_addr_read_reg_593 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_sha256_buf_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_sl_fu_371_p2);
    sensitive << ( sha256_len_0_write_s_fu_74 );

    SC_METHOD(thread_tmp_1_fu_366_p1);
    sensitive << ( sha256_len_0_write_s_fu_74 );

    SC_METHOD(thread_tmp_3_fu_377_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sl_fu_371_p2 );

    SC_METHOD(thread_tmp_89_i_fu_426_p2);
    sensitive << ( sha256_bits_1_read_s_fu_114 );

    SC_METHOD(thread_tmp_95_read1_i_fu_432_p3);
    sensitive << ( sha256_bits_1_read_s_fu_114 );
    sensitive << ( tmp_i_fu_420_p2 );
    sensitive << ( tmp_89_i_fu_426_p2 );

    SC_METHOD(thread_tmp_fu_228_p1);
    sensitive << ( data_offset );

    SC_METHOD(thread_tmp_i_fu_420_p2);
    sensitive << ( tmp_3_reg_598 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_state11_on_subcall_done );
    sensitive << ( sha256_bits_0_read_s_fu_78 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_289_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_data_ARREADY );
    sensitive << ( tmp_3_fu_377_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_state11_on_subcall_done );

    ap_CS_fsm = "00000000001";
    grp_p_hash_fu_166_ap_start_reg = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_data_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_hash_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sha256_buf_address0, "(port)sha256_buf_address0");
    sc_trace(mVcdFile, sha256_buf_ce0, "(port)sha256_buf_ce0");
    sc_trace(mVcdFile, sha256_buf_we0, "(port)sha256_buf_we0");
    sc_trace(mVcdFile, sha256_buf_d0, "(port)sha256_buf_d0");
    sc_trace(mVcdFile, sha256_buf_q0, "(port)sha256_buf_q0");
    sc_trace(mVcdFile, sha256_buf_address1, "(port)sha256_buf_address1");
    sc_trace(mVcdFile, sha256_buf_ce1, "(port)sha256_buf_ce1");
    sc_trace(mVcdFile, sha256_buf_q1, "(port)sha256_buf_q1");
    sc_trace(mVcdFile, m_axi_data_AWVALID, "(port)m_axi_data_AWVALID");
    sc_trace(mVcdFile, m_axi_data_AWREADY, "(port)m_axi_data_AWREADY");
    sc_trace(mVcdFile, m_axi_data_AWADDR, "(port)m_axi_data_AWADDR");
    sc_trace(mVcdFile, m_axi_data_AWID, "(port)m_axi_data_AWID");
    sc_trace(mVcdFile, m_axi_data_AWLEN, "(port)m_axi_data_AWLEN");
    sc_trace(mVcdFile, m_axi_data_AWSIZE, "(port)m_axi_data_AWSIZE");
    sc_trace(mVcdFile, m_axi_data_AWBURST, "(port)m_axi_data_AWBURST");
    sc_trace(mVcdFile, m_axi_data_AWLOCK, "(port)m_axi_data_AWLOCK");
    sc_trace(mVcdFile, m_axi_data_AWCACHE, "(port)m_axi_data_AWCACHE");
    sc_trace(mVcdFile, m_axi_data_AWPROT, "(port)m_axi_data_AWPROT");
    sc_trace(mVcdFile, m_axi_data_AWQOS, "(port)m_axi_data_AWQOS");
    sc_trace(mVcdFile, m_axi_data_AWREGION, "(port)m_axi_data_AWREGION");
    sc_trace(mVcdFile, m_axi_data_AWUSER, "(port)m_axi_data_AWUSER");
    sc_trace(mVcdFile, m_axi_data_WVALID, "(port)m_axi_data_WVALID");
    sc_trace(mVcdFile, m_axi_data_WREADY, "(port)m_axi_data_WREADY");
    sc_trace(mVcdFile, m_axi_data_WDATA, "(port)m_axi_data_WDATA");
    sc_trace(mVcdFile, m_axi_data_WSTRB, "(port)m_axi_data_WSTRB");
    sc_trace(mVcdFile, m_axi_data_WLAST, "(port)m_axi_data_WLAST");
    sc_trace(mVcdFile, m_axi_data_WID, "(port)m_axi_data_WID");
    sc_trace(mVcdFile, m_axi_data_WUSER, "(port)m_axi_data_WUSER");
    sc_trace(mVcdFile, m_axi_data_ARVALID, "(port)m_axi_data_ARVALID");
    sc_trace(mVcdFile, m_axi_data_ARREADY, "(port)m_axi_data_ARREADY");
    sc_trace(mVcdFile, m_axi_data_ARADDR, "(port)m_axi_data_ARADDR");
    sc_trace(mVcdFile, m_axi_data_ARID, "(port)m_axi_data_ARID");
    sc_trace(mVcdFile, m_axi_data_ARLEN, "(port)m_axi_data_ARLEN");
    sc_trace(mVcdFile, m_axi_data_ARSIZE, "(port)m_axi_data_ARSIZE");
    sc_trace(mVcdFile, m_axi_data_ARBURST, "(port)m_axi_data_ARBURST");
    sc_trace(mVcdFile, m_axi_data_ARLOCK, "(port)m_axi_data_ARLOCK");
    sc_trace(mVcdFile, m_axi_data_ARCACHE, "(port)m_axi_data_ARCACHE");
    sc_trace(mVcdFile, m_axi_data_ARPROT, "(port)m_axi_data_ARPROT");
    sc_trace(mVcdFile, m_axi_data_ARQOS, "(port)m_axi_data_ARQOS");
    sc_trace(mVcdFile, m_axi_data_ARREGION, "(port)m_axi_data_ARREGION");
    sc_trace(mVcdFile, m_axi_data_ARUSER, "(port)m_axi_data_ARUSER");
    sc_trace(mVcdFile, m_axi_data_RVALID, "(port)m_axi_data_RVALID");
    sc_trace(mVcdFile, m_axi_data_RREADY, "(port)m_axi_data_RREADY");
    sc_trace(mVcdFile, m_axi_data_RDATA, "(port)m_axi_data_RDATA");
    sc_trace(mVcdFile, m_axi_data_RLAST, "(port)m_axi_data_RLAST");
    sc_trace(mVcdFile, m_axi_data_RID, "(port)m_axi_data_RID");
    sc_trace(mVcdFile, m_axi_data_RUSER, "(port)m_axi_data_RUSER");
    sc_trace(mVcdFile, m_axi_data_RRESP, "(port)m_axi_data_RRESP");
    sc_trace(mVcdFile, m_axi_data_BVALID, "(port)m_axi_data_BVALID");
    sc_trace(mVcdFile, m_axi_data_BREADY, "(port)m_axi_data_BREADY");
    sc_trace(mVcdFile, m_axi_data_BRESP, "(port)m_axi_data_BRESP");
    sc_trace(mVcdFile, m_axi_data_BID, "(port)m_axi_data_BID");
    sc_trace(mVcdFile, m_axi_data_BUSER, "(port)m_axi_data_BUSER");
    sc_trace(mVcdFile, data_offset, "(port)data_offset");
    sc_trace(mVcdFile, len, "(port)len");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, data_blk_n_AR, "data_blk_n_AR");
    sc_trace(mVcdFile, data_blk_n_R, "data_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, exitcond_fu_289_p2, "exitcond_fu_289_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_data_ARREADY, "ap_sig_ioackin_m_axi_data_ARREADY");
    sc_trace(mVcdFile, i_1_fu_294_p2, "i_1_fu_294_p2");
    sc_trace(mVcdFile, i_1_reg_588, "i_1_reg_588");
    sc_trace(mVcdFile, ap_block_state8, "ap_block_state8");
    sc_trace(mVcdFile, data_addr_read_reg_593, "data_addr_read_reg_593");
    sc_trace(mVcdFile, tmp_3_fu_377_p2, "tmp_3_fu_377_p2");
    sc_trace(mVcdFile, tmp_3_reg_598, "tmp_3_reg_598");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, sha256hash_7_load_1_reg_602, "sha256hash_7_load_1_reg_602");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, sha256hash_6_load_1_reg_607, "sha256hash_6_load_1_reg_607");
    sc_trace(mVcdFile, sha256hash_5_load_1_reg_612, "sha256hash_5_load_1_reg_612");
    sc_trace(mVcdFile, sha256hash_4_load_1_reg_617, "sha256hash_4_load_1_reg_617");
    sc_trace(mVcdFile, sha256hash_3_load_1_reg_622, "sha256hash_3_load_1_reg_622");
    sc_trace(mVcdFile, sha256hash_2_load_1_reg_627, "sha256hash_2_load_1_reg_627");
    sc_trace(mVcdFile, sha256hash_1_load_1_reg_632, "sha256hash_1_load_1_reg_632");
    sc_trace(mVcdFile, sha256hash_load_1_reg_637, "sha256hash_load_1_reg_637");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_start, "grp_p_hash_fu_166_ap_start");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_done, "grp_p_hash_fu_166_ap_done");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_idle, "grp_p_hash_fu_166_ap_idle");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_ready, "grp_p_hash_fu_166_ap_ready");
    sc_trace(mVcdFile, grp_p_hash_fu_166_sha256_buf_address0, "grp_p_hash_fu_166_sha256_buf_address0");
    sc_trace(mVcdFile, grp_p_hash_fu_166_sha256_buf_ce0, "grp_p_hash_fu_166_sha256_buf_ce0");
    sc_trace(mVcdFile, grp_p_hash_fu_166_sha256_buf_address1, "grp_p_hash_fu_166_sha256_buf_address1");
    sc_trace(mVcdFile, grp_p_hash_fu_166_sha256_buf_ce1, "grp_p_hash_fu_166_sha256_buf_ce1");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_return_0, "grp_p_hash_fu_166_ap_return_0");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_return_1, "grp_p_hash_fu_166_ap_return_1");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_return_2, "grp_p_hash_fu_166_ap_return_2");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_return_3, "grp_p_hash_fu_166_ap_return_3");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_return_4, "grp_p_hash_fu_166_ap_return_4");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_return_5, "grp_p_hash_fu_166_ap_return_5");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_return_6, "grp_p_hash_fu_166_ap_return_6");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_return_7, "grp_p_hash_fu_166_ap_return_7");
    sc_trace(mVcdFile, i_reg_155, "i_reg_155");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_block_state11_on_subcall_done, "ap_block_state11_on_subcall_done");
    sc_trace(mVcdFile, grp_p_hash_fu_166_ap_start_reg, "grp_p_hash_fu_166_ap_start_reg");
    sc_trace(mVcdFile, tmp_1_fu_366_p1, "tmp_1_fu_366_p1");
    sc_trace(mVcdFile, tmp_fu_228_p1, "tmp_fu_228_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_data_ARREADY, "ap_reg_ioackin_m_axi_data_ARREADY");
    sc_trace(mVcdFile, sha256_len_0_write_s_fu_74, "sha256_len_0_write_s_fu_74");
    sc_trace(mVcdFile, sl_fu_371_p2, "sl_fu_371_p2");
    sc_trace(mVcdFile, sha256_bits_0_read_s_fu_78, "sha256_bits_0_read_s_fu_78");
    sc_trace(mVcdFile, sha256_bits_0_write_fu_440_p2, "sha256_bits_0_write_fu_440_p2");
    sc_trace(mVcdFile, sha256hash_7_fu_82, "sha256hash_7_fu_82");
    sc_trace(mVcdFile, sha256hash_6_fu_86, "sha256hash_6_fu_86");
    sc_trace(mVcdFile, sha256hash_5_fu_90, "sha256hash_5_fu_90");
    sc_trace(mVcdFile, sha256hash_4_fu_94, "sha256hash_4_fu_94");
    sc_trace(mVcdFile, sha256hash_3_fu_98, "sha256hash_3_fu_98");
    sc_trace(mVcdFile, sha256hash_2_fu_102, "sha256hash_2_fu_102");
    sc_trace(mVcdFile, sha256hash_1_fu_106, "sha256hash_1_fu_106");
    sc_trace(mVcdFile, sha256hash_fu_110, "sha256hash_fu_110");
    sc_trace(mVcdFile, sha256_bits_1_read_s_fu_114, "sha256_bits_1_read_s_fu_114");
    sc_trace(mVcdFile, tmp_95_read1_i_fu_432_p3, "tmp_95_read1_i_fu_432_p3");
    sc_trace(mVcdFile, tmp_i_fu_420_p2, "tmp_i_fu_420_p2");
    sc_trace(mVcdFile, tmp_89_i_fu_426_p2, "tmp_89_i_fu_426_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sha256_hash::~sha256_hash() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_p_hash_fu_166;
}

void sha256_hash::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_data_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read()))) {
                ap_reg_ioackin_m_axi_data_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_data_ARREADY.read()))) {
                ap_reg_ioackin_m_axi_data_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_p_hash_fu_166_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            grp_p_hash_fu_166_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_p_hash_fu_166_ap_ready.read())) {
            grp_p_hash_fu_166_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        i_reg_155 = i_1_reg_588.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_reg_155 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256_bits_0_read_s_fu_78 = sha256_bits_0_write_fu_440_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256_bits_0_read_s_fu_78 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256_bits_1_read_s_fu_114 = tmp_95_read1_i_fu_432_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256_bits_1_read_s_fu_114 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_377_p2.read()))) {
        sha256_len_0_write_s_fu_74 = sl_fu_371_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                 esl_seteq<1,1,1>(tmp_3_fu_377_p2.read(), ap_const_lv1_1)))) {
        sha256_len_0_write_s_fu_74 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256hash_1_fu_106 = grp_p_hash_fu_166_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256hash_1_fu_106 = ap_const_lv32_BB67AE85;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256hash_2_fu_102 = grp_p_hash_fu_166_ap_return_2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256hash_2_fu_102 = ap_const_lv32_3C6EF372;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256hash_3_fu_98 = grp_p_hash_fu_166_ap_return_3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256hash_3_fu_98 = ap_const_lv32_A54FF53A;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256hash_4_fu_94 = grp_p_hash_fu_166_ap_return_4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256hash_4_fu_94 = ap_const_lv32_510E527F;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256hash_5_fu_90 = grp_p_hash_fu_166_ap_return_5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256hash_5_fu_90 = ap_const_lv32_9B05688C;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256hash_6_fu_86 = grp_p_hash_fu_166_ap_return_6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256hash_6_fu_86 = ap_const_lv32_1F83D9AB;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256hash_7_fu_82 = grp_p_hash_fu_166_ap_return_7.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256hash_7_fu_82 = ap_const_lv32_5BE0CD19;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        sha256hash_fu_110 = grp_p_hash_fu_166_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
        sha256hash_fu_110 = ap_const_lv32_6A09E667;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())))) {
        data_addr_read_reg_593 = m_axi_data_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())))) {
        i_1_reg_588 = i_1_fu_294_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sha256hash_1_load_1_reg_632 = sha256hash_1_fu_106.read();
        sha256hash_2_load_1_reg_627 = sha256hash_2_fu_102.read();
        sha256hash_3_load_1_reg_622 = sha256hash_3_fu_98.read();
        sha256hash_4_load_1_reg_617 = sha256hash_4_fu_94.read();
        sha256hash_5_load_1_reg_612 = sha256hash_5_fu_90.read();
        sha256hash_6_load_1_reg_607 = sha256hash_6_fu_86.read();
        sha256hash_7_load_1_reg_602 = sha256hash_7_fu_82.read();
        sha256hash_load_1_reg_637 = sha256hash_fu_110.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_3_reg_598 = tmp_3_fu_377_p2.read();
    }
}

void sha256_hash::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_hash::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sha256_hash::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sha256_hash::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256_hash::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256_hash::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256_hash::thread_ap_block_state11_on_subcall_done() {
    ap_block_state11_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_p_hash_fu_166_ap_done.read()) && esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1));
}

void sha256_hash::thread_ap_block_state8() {
    ap_block_state8 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read()));
}

void sha256_hash::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())) && 
          esl_seteq<1,1,1>(exitcond_fu_289_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_hash::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_hash::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())) && 
         esl_seteq<1,1,1>(exitcond_fu_289_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_hash::thread_ap_return_0() {
    ap_return_0 = sha256_len_0_write_s_fu_74.read();
}

void sha256_hash::thread_ap_return_1() {
    ap_return_1 = sha256_bits_1_read_s_fu_114.read();
}

void sha256_hash::thread_ap_return_10() {
    ap_return_10 = sha256_bits_0_read_s_fu_78.read();
}

void sha256_hash::thread_ap_return_2() {
    ap_return_2 = sha256hash_fu_110.read();
}

void sha256_hash::thread_ap_return_3() {
    ap_return_3 = sha256hash_1_fu_106.read();
}

void sha256_hash::thread_ap_return_4() {
    ap_return_4 = sha256hash_2_fu_102.read();
}

void sha256_hash::thread_ap_return_5() {
    ap_return_5 = sha256hash_3_fu_98.read();
}

void sha256_hash::thread_ap_return_6() {
    ap_return_6 = sha256hash_4_fu_94.read();
}

void sha256_hash::thread_ap_return_7() {
    ap_return_7 = sha256hash_5_fu_90.read();
}

void sha256_hash::thread_ap_return_8() {
    ap_return_8 = sha256hash_6_fu_86.read();
}

void sha256_hash::thread_ap_return_9() {
    ap_return_9 = sha256hash_7_fu_82.read();
}

void sha256_hash::thread_ap_sig_ioackin_m_axi_data_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_data_ARREADY.read())) {
        ap_sig_ioackin_m_axi_data_ARREADY = m_axi_data_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_data_ARREADY = ap_const_logic_1;
    }
}

void sha256_hash::thread_data_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        data_blk_n_AR = m_axi_data_ARREADY.read();
    } else {
        data_blk_n_AR = ap_const_logic_1;
    }
}

void sha256_hash::thread_data_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()))) {
        data_blk_n_R = m_axi_data_RVALID.read();
    } else {
        data_blk_n_R = ap_const_logic_1;
    }
}

void sha256_hash::thread_exitcond_fu_289_p2() {
    exitcond_fu_289_p2 = (!i_reg_155.read().is_01() || !len.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_155.read() == len.read());
}

void sha256_hash::thread_grp_p_hash_fu_166_ap_start() {
    grp_p_hash_fu_166_ap_start = grp_p_hash_fu_166_ap_start_reg.read();
}

void sha256_hash::thread_i_1_fu_294_p2() {
    i_1_fu_294_p2 = (!i_reg_155.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_155.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_hash::thread_m_axi_data_ARADDR() {
    m_axi_data_ARADDR =  (sc_lv<32>) (tmp_fu_228_p1.read());
}

void sha256_hash::thread_m_axi_data_ARBURST() {
    m_axi_data_ARBURST = ap_const_lv2_0;
}

void sha256_hash::thread_m_axi_data_ARCACHE() {
    m_axi_data_ARCACHE = ap_const_lv4_0;
}

void sha256_hash::thread_m_axi_data_ARID() {
    m_axi_data_ARID = ap_const_lv1_0;
}

void sha256_hash::thread_m_axi_data_ARLEN() {
    m_axi_data_ARLEN = len.read();
}

void sha256_hash::thread_m_axi_data_ARLOCK() {
    m_axi_data_ARLOCK = ap_const_lv2_0;
}

void sha256_hash::thread_m_axi_data_ARPROT() {
    m_axi_data_ARPROT = ap_const_lv3_0;
}

void sha256_hash::thread_m_axi_data_ARQOS() {
    m_axi_data_ARQOS = ap_const_lv4_0;
}

void sha256_hash::thread_m_axi_data_ARREGION() {
    m_axi_data_ARREGION = ap_const_lv4_0;
}

void sha256_hash::thread_m_axi_data_ARSIZE() {
    m_axi_data_ARSIZE = ap_const_lv3_0;
}

void sha256_hash::thread_m_axi_data_ARUSER() {
    m_axi_data_ARUSER = ap_const_lv1_0;
}

void sha256_hash::thread_m_axi_data_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_data_ARREADY.read()))) {
        m_axi_data_ARVALID = ap_const_logic_1;
    } else {
        m_axi_data_ARVALID = ap_const_logic_0;
    }
}

void sha256_hash::thread_m_axi_data_AWADDR() {
    m_axi_data_AWADDR = ap_const_lv32_0;
}

void sha256_hash::thread_m_axi_data_AWBURST() {
    m_axi_data_AWBURST = ap_const_lv2_0;
}

void sha256_hash::thread_m_axi_data_AWCACHE() {
    m_axi_data_AWCACHE = ap_const_lv4_0;
}

void sha256_hash::thread_m_axi_data_AWID() {
    m_axi_data_AWID = ap_const_lv1_0;
}

void sha256_hash::thread_m_axi_data_AWLEN() {
    m_axi_data_AWLEN = ap_const_lv32_0;
}

void sha256_hash::thread_m_axi_data_AWLOCK() {
    m_axi_data_AWLOCK = ap_const_lv2_0;
}

void sha256_hash::thread_m_axi_data_AWPROT() {
    m_axi_data_AWPROT = ap_const_lv3_0;
}

void sha256_hash::thread_m_axi_data_AWQOS() {
    m_axi_data_AWQOS = ap_const_lv4_0;
}

void sha256_hash::thread_m_axi_data_AWREGION() {
    m_axi_data_AWREGION = ap_const_lv4_0;
}

void sha256_hash::thread_m_axi_data_AWSIZE() {
    m_axi_data_AWSIZE = ap_const_lv3_0;
}

void sha256_hash::thread_m_axi_data_AWUSER() {
    m_axi_data_AWUSER = ap_const_lv1_0;
}

void sha256_hash::thread_m_axi_data_AWVALID() {
    m_axi_data_AWVALID = ap_const_logic_0;
}

void sha256_hash::thread_m_axi_data_BREADY() {
    m_axi_data_BREADY = ap_const_logic_0;
}

void sha256_hash::thread_m_axi_data_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())))) {
        m_axi_data_RREADY = ap_const_logic_1;
    } else {
        m_axi_data_RREADY = ap_const_logic_0;
    }
}

void sha256_hash::thread_m_axi_data_WDATA() {
    m_axi_data_WDATA = ap_const_lv8_0;
}

void sha256_hash::thread_m_axi_data_WID() {
    m_axi_data_WID = ap_const_lv1_0;
}

void sha256_hash::thread_m_axi_data_WLAST() {
    m_axi_data_WLAST = ap_const_logic_0;
}

void sha256_hash::thread_m_axi_data_WSTRB() {
    m_axi_data_WSTRB = ap_const_lv1_0;
}

void sha256_hash::thread_m_axi_data_WUSER() {
    m_axi_data_WUSER = ap_const_lv1_0;
}

void sha256_hash::thread_m_axi_data_WVALID() {
    m_axi_data_WVALID = ap_const_logic_0;
}

void sha256_hash::thread_sha256_bits_0_write_fu_440_p2() {
    sha256_bits_0_write_fu_440_p2 = (!sha256_bits_0_read_s_fu_78.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<32>(): (sc_biguint<32>(sha256_bits_0_read_s_fu_78.read()) + sc_biguint<32>(ap_const_lv32_40));
}

void sha256_hash::thread_sha256_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sha256_buf_address0 =  (sc_lv<6>) (tmp_1_fu_366_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1))) {
        sha256_buf_address0 = grp_p_hash_fu_166_sha256_buf_address0.read();
    } else {
        sha256_buf_address0 = "XXXXXX";
    }
}

void sha256_hash::thread_sha256_buf_address1() {
    sha256_buf_address1 = grp_p_hash_fu_166_sha256_buf_address1.read();
}

void sha256_hash::thread_sha256_buf_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sha256_buf_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1))) {
        sha256_buf_ce0 = grp_p_hash_fu_166_sha256_buf_ce0.read();
    } else {
        sha256_buf_ce0 = ap_const_logic_0;
    }
}

void sha256_hash::thread_sha256_buf_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_598.read(), ap_const_lv1_1))) {
        sha256_buf_ce1 = grp_p_hash_fu_166_sha256_buf_ce1.read();
    } else {
        sha256_buf_ce1 = ap_const_logic_0;
    }
}

void sha256_hash::thread_sha256_buf_d0() {
    sha256_buf_d0 = data_addr_read_reg_593.read();
}

void sha256_hash::thread_sha256_buf_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sha256_buf_we0 = ap_const_logic_1;
    } else {
        sha256_buf_we0 = ap_const_logic_0;
    }
}

void sha256_hash::thread_sl_fu_371_p2() {
    sl_fu_371_p2 = (!sha256_len_0_write_s_fu_74.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(sha256_len_0_write_s_fu_74.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_hash::thread_tmp_1_fu_366_p1() {
    tmp_1_fu_366_p1 = esl_zext<64,32>(sha256_len_0_write_s_fu_74.read());
}

void sha256_hash::thread_tmp_3_fu_377_p2() {
    tmp_3_fu_377_p2 = (!sl_fu_371_p2.read().is_01() || !ap_const_lv32_8.is_01())? sc_lv<1>(): sc_lv<1>(sl_fu_371_p2.read() == ap_const_lv32_8);
}

void sha256_hash::thread_tmp_89_i_fu_426_p2() {
    tmp_89_i_fu_426_p2 = (!sha256_bits_1_read_s_fu_114.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(sha256_bits_1_read_s_fu_114.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_hash::thread_tmp_95_read1_i_fu_432_p3() {
    tmp_95_read1_i_fu_432_p3 = (!tmp_i_fu_420_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_i_fu_420_p2.read()[0].to_bool())? tmp_89_i_fu_426_p2.read(): sha256_bits_1_read_s_fu_114.read());
}

void sha256_hash::thread_tmp_fu_228_p1() {
    tmp_fu_228_p1 = esl_sext<64,32>(data_offset.read());
}

void sha256_hash::thread_tmp_i_fu_420_p2() {
    tmp_i_fu_420_p2 = (!sha256_bits_0_read_s_fu_78.read().is_01() || !ap_const_lv32_FFFFFFBF.is_01())? sc_lv<1>(): (sc_biguint<32>(sha256_bits_0_read_s_fu_78.read()) > sc_biguint<32>(ap_const_lv32_FFFFFFBF));
}

void sha256_hash::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())) && esl_seteq<1,1,1>(exitcond_fu_289_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_289_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_377_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

}

