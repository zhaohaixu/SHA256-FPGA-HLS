// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> sha256::ap_ST_fsm_state1 = "1";
const sc_lv<6> sha256::ap_ST_fsm_state2 = "10";
const sc_lv<6> sha256::ap_ST_fsm_state3 = "100";
const sc_lv<6> sha256::ap_ST_fsm_state4 = "1000";
const sc_lv<6> sha256::ap_ST_fsm_state5 = "10000";
const sc_lv<6> sha256::ap_ST_fsm_state6 = "100000";
const sc_lv<32> sha256::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha256::ap_const_lv32_1 = "1";
const sc_lv<32> sha256::ap_const_lv32_3 = "11";
const sc_lv<6> sha256::ap_const_lv6_0 = "000000";
const sc_lv<1> sha256::ap_const_lv1_0 = "0";
const sc_lv<32> sha256::ap_const_lv32_4 = "100";
const sc_lv<32> sha256::ap_const_lv32_5 = "101";
const sc_lv<32> sha256::ap_const_lv32_2 = "10";
const sc_lv<8> sha256::ap_const_lv8_0 = "00000000";
const sc_lv<6> sha256::ap_const_lv6_1 = "1";
const sc_lv<6> sha256::ap_const_lv6_3F = "111111";
const sc_lv<1> sha256::ap_const_lv1_1 = "1";
const bool sha256::ap_const_boolean_1 = true;

sha256::sha256(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sha256_buf_U = new sha256_sha256_buf("sha256_buf_U");
    sha256_buf_U->clk(ap_clk);
    sha256_buf_U->reset(ap_rst);
    sha256_buf_U->address0(sha256_buf_address0);
    sha256_buf_U->ce0(sha256_buf_ce0);
    sha256_buf_U->we0(sha256_buf_we0);
    sha256_buf_U->d0(sha256_buf_d0);
    sha256_buf_U->q0(sha256_buf_q0);
    sha256_buf_U->address1(sha256_buf_address1);
    sha256_buf_U->ce1(sha256_buf_ce1);
    sha256_buf_U->we1(sha256_buf_we1);
    sha256_buf_U->d1(grp_sha256_done_fu_72_sha256_buf_d1);
    sha256_buf_U->q1(sha256_buf_q1);
    grp_sha256_done_fu_72 = new sha256_done("grp_sha256_done_fu_72");
    grp_sha256_done_fu_72->ap_clk(ap_clk);
    grp_sha256_done_fu_72->ap_rst(ap_rst);
    grp_sha256_done_fu_72->ap_start(grp_sha256_done_fu_72_ap_start);
    grp_sha256_done_fu_72->ap_done(grp_sha256_done_fu_72_ap_done);
    grp_sha256_done_fu_72->ap_idle(grp_sha256_done_fu_72_ap_idle);
    grp_sha256_done_fu_72->ap_ready(grp_sha256_done_fu_72_ap_ready);
    grp_sha256_done_fu_72->sha256_buf_address0(grp_sha256_done_fu_72_sha256_buf_address0);
    grp_sha256_done_fu_72->sha256_buf_ce0(grp_sha256_done_fu_72_sha256_buf_ce0);
    grp_sha256_done_fu_72->sha256_buf_we0(grp_sha256_done_fu_72_sha256_buf_we0);
    grp_sha256_done_fu_72->sha256_buf_d0(grp_sha256_done_fu_72_sha256_buf_d0);
    grp_sha256_done_fu_72->sha256_buf_q0(sha256_buf_q0);
    grp_sha256_done_fu_72->sha256_buf_address1(grp_sha256_done_fu_72_sha256_buf_address1);
    grp_sha256_done_fu_72->sha256_buf_ce1(grp_sha256_done_fu_72_sha256_buf_ce1);
    grp_sha256_done_fu_72->sha256_buf_we1(grp_sha256_done_fu_72_sha256_buf_we1);
    grp_sha256_done_fu_72->sha256_buf_d1(grp_sha256_done_fu_72_sha256_buf_d1);
    grp_sha256_done_fu_72->sha256_buf_q1(sha256_buf_q1);
    grp_sha256_done_fu_72->sha256hash_0_read(sha256hash_0_reg_182);
    grp_sha256_done_fu_72->sha256hash_1_read(sha256hash_1_reg_187);
    grp_sha256_done_fu_72->sha256hash_2_read(sha256hash_2_reg_192);
    grp_sha256_done_fu_72->sha256hash_3_read(sha256hash_3_reg_197);
    grp_sha256_done_fu_72->sha256hash_4_read(sha256hash_4_reg_202);
    grp_sha256_done_fu_72->sha256hash_5_read(sha256hash_5_reg_207);
    grp_sha256_done_fu_72->sha256hash_6_read(sha256hash_6_reg_212);
    grp_sha256_done_fu_72->sha256hash_7_read(sha256hash_7_reg_217);
    grp_sha256_done_fu_72->sha256_bits_0_read(sha256_bits_0_reg_222);
    grp_sha256_done_fu_72->sha256_bits_1_read(sha256_bits_1_reg_172);
    grp_sha256_done_fu_72->sha256_len(sha256_len_0_reg_177);
    grp_sha256_done_fu_72->hash_address0(grp_sha256_done_fu_72_hash_address0);
    grp_sha256_done_fu_72->hash_ce0(grp_sha256_done_fu_72_hash_ce0);
    grp_sha256_done_fu_72->hash_we0(grp_sha256_done_fu_72_hash_we0);
    grp_sha256_done_fu_72->hash_d0(grp_sha256_done_fu_72_hash_d0);
    grp_sha256_done_fu_72->hash_address1(grp_sha256_done_fu_72_hash_address1);
    grp_sha256_done_fu_72->hash_ce1(grp_sha256_done_fu_72_hash_ce1);
    grp_sha256_done_fu_72->hash_we1(grp_sha256_done_fu_72_hash_we1);
    grp_sha256_done_fu_72->hash_d1(grp_sha256_done_fu_72_hash_d1);
    grp_sha256_hash_fu_90 = new sha256_hash("grp_sha256_hash_fu_90");
    grp_sha256_hash_fu_90->ap_clk(ap_clk);
    grp_sha256_hash_fu_90->ap_rst(ap_rst);
    grp_sha256_hash_fu_90->ap_start(grp_sha256_hash_fu_90_ap_start);
    grp_sha256_hash_fu_90->ap_done(grp_sha256_hash_fu_90_ap_done);
    grp_sha256_hash_fu_90->ap_idle(grp_sha256_hash_fu_90_ap_idle);
    grp_sha256_hash_fu_90->ap_ready(grp_sha256_hash_fu_90_ap_ready);
    grp_sha256_hash_fu_90->sha256_buf_address0(grp_sha256_hash_fu_90_sha256_buf_address0);
    grp_sha256_hash_fu_90->sha256_buf_ce0(grp_sha256_hash_fu_90_sha256_buf_ce0);
    grp_sha256_hash_fu_90->sha256_buf_we0(grp_sha256_hash_fu_90_sha256_buf_we0);
    grp_sha256_hash_fu_90->sha256_buf_d0(grp_sha256_hash_fu_90_sha256_buf_d0);
    grp_sha256_hash_fu_90->sha256_buf_q0(sha256_buf_q0);
    grp_sha256_hash_fu_90->sha256_buf_address1(grp_sha256_hash_fu_90_sha256_buf_address1);
    grp_sha256_hash_fu_90->sha256_buf_ce1(grp_sha256_hash_fu_90_sha256_buf_ce1);
    grp_sha256_hash_fu_90->sha256_buf_q1(sha256_buf_q1);
    grp_sha256_hash_fu_90->data_address0(grp_sha256_hash_fu_90_data_address0);
    grp_sha256_hash_fu_90->data_ce0(grp_sha256_hash_fu_90_data_ce0);
    grp_sha256_hash_fu_90->data_q0(msg_q0);
    grp_sha256_hash_fu_90->len(len);
    grp_sha256_hash_fu_90->ap_return_0(grp_sha256_hash_fu_90_ap_return_0);
    grp_sha256_hash_fu_90->ap_return_1(grp_sha256_hash_fu_90_ap_return_1);
    grp_sha256_hash_fu_90->ap_return_2(grp_sha256_hash_fu_90_ap_return_2);
    grp_sha256_hash_fu_90->ap_return_3(grp_sha256_hash_fu_90_ap_return_3);
    grp_sha256_hash_fu_90->ap_return_4(grp_sha256_hash_fu_90_ap_return_4);
    grp_sha256_hash_fu_90->ap_return_5(grp_sha256_hash_fu_90_ap_return_5);
    grp_sha256_hash_fu_90->ap_return_6(grp_sha256_hash_fu_90_ap_return_6);
    grp_sha256_hash_fu_90->ap_return_7(grp_sha256_hash_fu_90_ap_return_7);
    grp_sha256_hash_fu_90->ap_return_8(grp_sha256_hash_fu_90_ap_return_8);
    grp_sha256_hash_fu_90->ap_return_9(grp_sha256_hash_fu_90_ap_return_9);
    grp_sha256_hash_fu_90->ap_return_10(grp_sha256_hash_fu_90_ap_return_10);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_sha256_done_fu_72_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_sha256_done_fu_72_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_sha256_done_fu_72_ap_start);
    sensitive << ( grp_sha256_done_fu_72_ap_start_reg );

    SC_METHOD(thread_grp_sha256_hash_fu_90_ap_start);
    sensitive << ( grp_sha256_hash_fu_90_ap_start_reg );

    SC_METHOD(thread_hash_address0);
    sensitive << ( grp_sha256_done_fu_72_hash_address0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_address1);
    sensitive << ( grp_sha256_done_fu_72_hash_address1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_ce0);
    sensitive << ( grp_sha256_done_fu_72_hash_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_ce1);
    sensitive << ( grp_sha256_done_fu_72_hash_ce1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_d0);
    sensitive << ( grp_sha256_done_fu_72_hash_d0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_d1);
    sensitive << ( grp_sha256_done_fu_72_hash_d1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_we0);
    sensitive << ( grp_sha256_done_fu_72_hash_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_we1);
    sensitive << ( grp_sha256_done_fu_72_hash_we1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_indvarinc_fu_98_p2);
    sensitive << ( invdar_reg_61 );

    SC_METHOD(thread_msg_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_hash_fu_90_data_address0 );

    SC_METHOD(thread_msg_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_hash_fu_90_data_ce0 );

    SC_METHOD(thread_sha256_buf_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_done_fu_72_sha256_buf_address0 );
    sensitive << ( grp_sha256_hash_fu_90_sha256_buf_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_fu_104_p1 );

    SC_METHOD(thread_sha256_buf_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_done_fu_72_sha256_buf_address1 );
    sensitive << ( grp_sha256_hash_fu_90_sha256_buf_address1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sha256_buf_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_done_fu_72_sha256_buf_ce0 );
    sensitive << ( grp_sha256_hash_fu_90_sha256_buf_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sha256_buf_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_done_fu_72_sha256_buf_ce1 );
    sensitive << ( grp_sha256_hash_fu_90_sha256_buf_ce1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sha256_buf_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_done_fu_72_sha256_buf_d0 );
    sensitive << ( grp_sha256_hash_fu_90_sha256_buf_d0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sha256_buf_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_done_fu_72_sha256_buf_we0 );
    sensitive << ( grp_sha256_hash_fu_90_sha256_buf_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sha256_buf_we1);
    sensitive << ( grp_sha256_done_fu_72_sha256_buf_we1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_fu_104_p1);
    sensitive << ( invdar_reg_61 );

    SC_METHOD(thread_tmp_s_fu_109_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_61 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_hash_fu_90_ap_done );
    sensitive << ( grp_sha256_done_fu_72_ap_done );
    sensitive << ( tmp_s_fu_109_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    grp_sha256_done_fu_72_ap_start_reg = SC_LOGIC_0;
    grp_sha256_hash_fu_90_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, msg_address0, "(port)msg_address0");
    sc_trace(mVcdFile, msg_ce0, "(port)msg_ce0");
    sc_trace(mVcdFile, msg_q0, "(port)msg_q0");
    sc_trace(mVcdFile, len, "(port)len");
    sc_trace(mVcdFile, hash_address0, "(port)hash_address0");
    sc_trace(mVcdFile, hash_ce0, "(port)hash_ce0");
    sc_trace(mVcdFile, hash_we0, "(port)hash_we0");
    sc_trace(mVcdFile, hash_d0, "(port)hash_d0");
    sc_trace(mVcdFile, hash_address1, "(port)hash_address1");
    sc_trace(mVcdFile, hash_ce1, "(port)hash_ce1");
    sc_trace(mVcdFile, hash_we1, "(port)hash_we1");
    sc_trace(mVcdFile, hash_d1, "(port)hash_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvarinc_fu_98_p2, "indvarinc_fu_98_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sha256_bits_1_reg_172, "sha256_bits_1_reg_172");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_ready, "grp_sha256_hash_fu_90_ap_ready");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_done, "grp_sha256_hash_fu_90_ap_done");
    sc_trace(mVcdFile, sha256_len_0_reg_177, "sha256_len_0_reg_177");
    sc_trace(mVcdFile, sha256hash_0_reg_182, "sha256hash_0_reg_182");
    sc_trace(mVcdFile, sha256hash_1_reg_187, "sha256hash_1_reg_187");
    sc_trace(mVcdFile, sha256hash_2_reg_192, "sha256hash_2_reg_192");
    sc_trace(mVcdFile, sha256hash_3_reg_197, "sha256hash_3_reg_197");
    sc_trace(mVcdFile, sha256hash_4_reg_202, "sha256hash_4_reg_202");
    sc_trace(mVcdFile, sha256hash_5_reg_207, "sha256hash_5_reg_207");
    sc_trace(mVcdFile, sha256hash_6_reg_212, "sha256hash_6_reg_212");
    sc_trace(mVcdFile, sha256hash_7_reg_217, "sha256hash_7_reg_217");
    sc_trace(mVcdFile, sha256_bits_0_reg_222, "sha256_bits_0_reg_222");
    sc_trace(mVcdFile, sha256_buf_address0, "sha256_buf_address0");
    sc_trace(mVcdFile, sha256_buf_ce0, "sha256_buf_ce0");
    sc_trace(mVcdFile, sha256_buf_we0, "sha256_buf_we0");
    sc_trace(mVcdFile, sha256_buf_d0, "sha256_buf_d0");
    sc_trace(mVcdFile, sha256_buf_q0, "sha256_buf_q0");
    sc_trace(mVcdFile, sha256_buf_address1, "sha256_buf_address1");
    sc_trace(mVcdFile, sha256_buf_ce1, "sha256_buf_ce1");
    sc_trace(mVcdFile, sha256_buf_we1, "sha256_buf_we1");
    sc_trace(mVcdFile, sha256_buf_q1, "sha256_buf_q1");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_ap_start, "grp_sha256_done_fu_72_ap_start");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_ap_done, "grp_sha256_done_fu_72_ap_done");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_ap_idle, "grp_sha256_done_fu_72_ap_idle");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_ap_ready, "grp_sha256_done_fu_72_ap_ready");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_sha256_buf_address0, "grp_sha256_done_fu_72_sha256_buf_address0");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_sha256_buf_ce0, "grp_sha256_done_fu_72_sha256_buf_ce0");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_sha256_buf_we0, "grp_sha256_done_fu_72_sha256_buf_we0");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_sha256_buf_d0, "grp_sha256_done_fu_72_sha256_buf_d0");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_sha256_buf_address1, "grp_sha256_done_fu_72_sha256_buf_address1");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_sha256_buf_ce1, "grp_sha256_done_fu_72_sha256_buf_ce1");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_sha256_buf_we1, "grp_sha256_done_fu_72_sha256_buf_we1");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_sha256_buf_d1, "grp_sha256_done_fu_72_sha256_buf_d1");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_hash_address0, "grp_sha256_done_fu_72_hash_address0");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_hash_ce0, "grp_sha256_done_fu_72_hash_ce0");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_hash_we0, "grp_sha256_done_fu_72_hash_we0");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_hash_d0, "grp_sha256_done_fu_72_hash_d0");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_hash_address1, "grp_sha256_done_fu_72_hash_address1");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_hash_ce1, "grp_sha256_done_fu_72_hash_ce1");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_hash_we1, "grp_sha256_done_fu_72_hash_we1");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_hash_d1, "grp_sha256_done_fu_72_hash_d1");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_start, "grp_sha256_hash_fu_90_ap_start");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_idle, "grp_sha256_hash_fu_90_ap_idle");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_sha256_buf_address0, "grp_sha256_hash_fu_90_sha256_buf_address0");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_sha256_buf_ce0, "grp_sha256_hash_fu_90_sha256_buf_ce0");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_sha256_buf_we0, "grp_sha256_hash_fu_90_sha256_buf_we0");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_sha256_buf_d0, "grp_sha256_hash_fu_90_sha256_buf_d0");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_sha256_buf_address1, "grp_sha256_hash_fu_90_sha256_buf_address1");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_sha256_buf_ce1, "grp_sha256_hash_fu_90_sha256_buf_ce1");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_data_address0, "grp_sha256_hash_fu_90_data_address0");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_data_ce0, "grp_sha256_hash_fu_90_data_ce0");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_0, "grp_sha256_hash_fu_90_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_1, "grp_sha256_hash_fu_90_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_2, "grp_sha256_hash_fu_90_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_3, "grp_sha256_hash_fu_90_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_4, "grp_sha256_hash_fu_90_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_5, "grp_sha256_hash_fu_90_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_6, "grp_sha256_hash_fu_90_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_7, "grp_sha256_hash_fu_90_ap_return_7");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_8, "grp_sha256_hash_fu_90_ap_return_8");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_9, "grp_sha256_hash_fu_90_ap_return_9");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_return_10, "grp_sha256_hash_fu_90_ap_return_10");
    sc_trace(mVcdFile, invdar_reg_61, "invdar_reg_61");
    sc_trace(mVcdFile, tmp_s_fu_109_p2, "tmp_s_fu_109_p2");
    sc_trace(mVcdFile, grp_sha256_done_fu_72_ap_start_reg, "grp_sha256_done_fu_72_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_sha256_hash_fu_90_ap_start_reg, "grp_sha256_hash_fu_90_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_104_p1, "tmp_fu_104_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sha256.hdltvin.dat");
    mHdltvoutHandle.open("sha256.hdltvout.dat");
}

sha256::~sha256() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sha256_buf_U;
    delete grp_sha256_done_fu_72;
    delete grp_sha256_hash_fu_90;
}

void sha256::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha256_done_fu_72_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            grp_sha256_done_fu_72_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_done_fu_72_ap_ready.read())) {
            grp_sha256_done_fu_72_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha256_hash_fu_90_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_sha256_hash_fu_90_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_hash_fu_90_ap_ready.read())) {
            grp_sha256_hash_fu_90_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_109_p2.read(), ap_const_lv1_0))) {
        invdar_reg_61 = indvarinc_fu_98_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        invdar_reg_61 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_sha256_hash_fu_90_ap_done.read(), ap_const_logic_1))) {
        sha256_bits_0_reg_222 = grp_sha256_hash_fu_90_ap_return_10.read();
        sha256_bits_1_reg_172 = grp_sha256_hash_fu_90_ap_return_1.read();
        sha256_len_0_reg_177 = grp_sha256_hash_fu_90_ap_return_0.read();
        sha256hash_0_reg_182 = grp_sha256_hash_fu_90_ap_return_2.read();
        sha256hash_1_reg_187 = grp_sha256_hash_fu_90_ap_return_3.read();
        sha256hash_2_reg_192 = grp_sha256_hash_fu_90_ap_return_4.read();
        sha256hash_3_reg_197 = grp_sha256_hash_fu_90_ap_return_5.read();
        sha256hash_4_reg_202 = grp_sha256_hash_fu_90_ap_return_6.read();
        sha256hash_5_reg_207 = grp_sha256_hash_fu_90_ap_return_7.read();
        sha256hash_6_reg_212 = grp_sha256_hash_fu_90_ap_return_8.read();
        sha256hash_7_reg_217 = grp_sha256_hash_fu_90_ap_return_9.read();
    }
}

void sha256::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_sha256_done_fu_72_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_sha256_done_fu_72_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256::thread_grp_sha256_done_fu_72_ap_start() {
    grp_sha256_done_fu_72_ap_start = grp_sha256_done_fu_72_ap_start_reg.read();
}

void sha256::thread_grp_sha256_hash_fu_90_ap_start() {
    grp_sha256_hash_fu_90_ap_start = grp_sha256_hash_fu_90_ap_start_reg.read();
}

void sha256::thread_hash_address0() {
    hash_address0 = grp_sha256_done_fu_72_hash_address0.read();
}

void sha256::thread_hash_address1() {
    hash_address1 = grp_sha256_done_fu_72_hash_address1.read();
}

void sha256::thread_hash_ce0() {
    hash_ce0 = grp_sha256_done_fu_72_hash_ce0.read();
}

void sha256::thread_hash_ce1() {
    hash_ce1 = grp_sha256_done_fu_72_hash_ce1.read();
}

void sha256::thread_hash_d0() {
    hash_d0 = grp_sha256_done_fu_72_hash_d0.read();
}

void sha256::thread_hash_d1() {
    hash_d1 = grp_sha256_done_fu_72_hash_d1.read();
}

void sha256::thread_hash_we0() {
    hash_we0 = grp_sha256_done_fu_72_hash_we0.read();
}

void sha256::thread_hash_we1() {
    hash_we1 = grp_sha256_done_fu_72_hash_we1.read();
}

void sha256::thread_indvarinc_fu_98_p2() {
    indvarinc_fu_98_p2 = (!invdar_reg_61.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(invdar_reg_61.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void sha256::thread_msg_address0() {
    msg_address0 = grp_sha256_hash_fu_90_data_address0.read();
}

void sha256::thread_msg_ce0() {
    msg_ce0 = grp_sha256_hash_fu_90_data_ce0.read();
}

void sha256::thread_sha256_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sha256_buf_address0 =  (sc_lv<6>) (tmp_fu_104_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha256_buf_address0 = grp_sha256_hash_fu_90_sha256_buf_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_address0 = grp_sha256_done_fu_72_sha256_buf_address0.read();
    } else {
        sha256_buf_address0 = "XXXXXX";
    }
}

void sha256::thread_sha256_buf_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha256_buf_address1 = grp_sha256_hash_fu_90_sha256_buf_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_address1 = grp_sha256_done_fu_72_sha256_buf_address1.read();
    } else {
        sha256_buf_address1 = "XXXXXX";
    }
}

void sha256::thread_sha256_buf_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sha256_buf_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha256_buf_ce0 = grp_sha256_hash_fu_90_sha256_buf_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_ce0 = grp_sha256_done_fu_72_sha256_buf_ce0.read();
    } else {
        sha256_buf_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_sha256_buf_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha256_buf_ce1 = grp_sha256_hash_fu_90_sha256_buf_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_ce1 = grp_sha256_done_fu_72_sha256_buf_ce1.read();
    } else {
        sha256_buf_ce1 = ap_const_logic_0;
    }
}

void sha256::thread_sha256_buf_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sha256_buf_d0 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha256_buf_d0 = grp_sha256_hash_fu_90_sha256_buf_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_d0 = grp_sha256_done_fu_72_sha256_buf_d0.read();
    } else {
        sha256_buf_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256::thread_sha256_buf_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sha256_buf_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha256_buf_we0 = grp_sha256_hash_fu_90_sha256_buf_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_we0 = grp_sha256_done_fu_72_sha256_buf_we0.read();
    } else {
        sha256_buf_we0 = ap_const_logic_0;
    }
}

void sha256::thread_sha256_buf_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_we1 = grp_sha256_done_fu_72_sha256_buf_we1.read();
    } else {
        sha256_buf_we1 = ap_const_logic_0;
    }
}

void sha256::thread_tmp_fu_104_p1() {
    tmp_fu_104_p1 = esl_zext<64,6>(invdar_reg_61.read());
}

void sha256::thread_tmp_s_fu_109_p2() {
    tmp_s_fu_109_p2 = (!invdar_reg_61.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_61.read() == ap_const_lv6_3F);
}

void sha256::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_s_fu_109_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_sha256_hash_fu_90_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_sha256_done_fu_72_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void sha256::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"msg_address0\" :  \"" << msg_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"msg_ce0\" :  \"" << msg_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"msg_q0\" :  \"" << msg_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"len\" :  \"" << len.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_address0\" :  \"" << hash_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_ce0\" :  \"" << hash_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_we0\" :  \"" << hash_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_d0\" :  \"" << hash_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_address1\" :  \"" << hash_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_ce1\" :  \"" << hash_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_we1\" :  \"" << hash_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_d1\" :  \"" << hash_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

