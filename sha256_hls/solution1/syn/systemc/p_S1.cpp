// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "p_S1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic p_S1::ap_const_logic_1 = sc_dt::Log_1;
const bool p_S1::ap_const_boolean_1 = true;
const sc_lv<32> p_S1::ap_const_lv32_6 = "110";
const sc_lv<32> p_S1::ap_const_lv32_1F = "11111";
const sc_lv<32> p_S1::ap_const_lv32_B = "1011";
const sc_lv<32> p_S1::ap_const_lv32_19 = "11001";
const sc_logic p_S1::ap_const_logic_0 = sc_dt::Log_0;

p_S1::p_S1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_49_i3_fu_66_p3 );

    SC_METHOD(thread_tmp_365_fu_40_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_366_fu_62_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_367_fu_84_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_49_i3_fu_66_p3);
    sensitive << ( tmp_366_fu_62_p1 );
    sensitive << ( tmp_i1_fu_52_p4 );

    SC_METHOD(thread_tmp_49_i6_fu_88_p3);
    sensitive << ( tmp_367_fu_84_p1 );
    sensitive << ( tmp_i4_fu_74_p4 );

    SC_METHOD(thread_tmp_49_i_fu_44_p3);
    sensitive << ( tmp_365_fu_40_p1 );
    sensitive << ( tmp_i_fu_30_p4 );

    SC_METHOD(thread_tmp_fu_96_p2);
    sensitive << ( tmp_49_i_fu_44_p3 );
    sensitive << ( tmp_49_i6_fu_88_p3 );

    SC_METHOD(thread_tmp_i1_fu_52_p4);
    sensitive << ( x );

    SC_METHOD(thread_tmp_i4_fu_74_p4);
    sensitive << ( x );

    SC_METHOD(thread_tmp_i_fu_30_p4);
    sensitive << ( x );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "p_S1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_365_fu_40_p1, "tmp_365_fu_40_p1");
    sc_trace(mVcdFile, tmp_i_fu_30_p4, "tmp_i_fu_30_p4");
    sc_trace(mVcdFile, tmp_366_fu_62_p1, "tmp_366_fu_62_p1");
    sc_trace(mVcdFile, tmp_i1_fu_52_p4, "tmp_i1_fu_52_p4");
    sc_trace(mVcdFile, tmp_367_fu_84_p1, "tmp_367_fu_84_p1");
    sc_trace(mVcdFile, tmp_i4_fu_74_p4, "tmp_i4_fu_74_p4");
    sc_trace(mVcdFile, tmp_49_i_fu_44_p3, "tmp_49_i_fu_44_p3");
    sc_trace(mVcdFile, tmp_49_i6_fu_88_p3, "tmp_49_i6_fu_88_p3");
    sc_trace(mVcdFile, tmp_fu_96_p2, "tmp_fu_96_p2");
    sc_trace(mVcdFile, tmp_49_i3_fu_66_p3, "tmp_49_i3_fu_66_p3");
#endif

    }
}

p_S1::~p_S1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void p_S1::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void p_S1::thread_ap_return() {
    ap_return = (tmp_fu_96_p2.read() ^ tmp_49_i3_fu_66_p3.read());
}

void p_S1::thread_tmp_365_fu_40_p1() {
    tmp_365_fu_40_p1 = x.read().range(6-1, 0);
}

void p_S1::thread_tmp_366_fu_62_p1() {
    tmp_366_fu_62_p1 = x.read().range(11-1, 0);
}

void p_S1::thread_tmp_367_fu_84_p1() {
    tmp_367_fu_84_p1 = x.read().range(25-1, 0);
}

void p_S1::thread_tmp_49_i3_fu_66_p3() {
    tmp_49_i3_fu_66_p3 = esl_concat<11,21>(tmp_366_fu_62_p1.read(), tmp_i1_fu_52_p4.read());
}

void p_S1::thread_tmp_49_i6_fu_88_p3() {
    tmp_49_i6_fu_88_p3 = esl_concat<25,7>(tmp_367_fu_84_p1.read(), tmp_i4_fu_74_p4.read());
}

void p_S1::thread_tmp_49_i_fu_44_p3() {
    tmp_49_i_fu_44_p3 = esl_concat<6,26>(tmp_365_fu_40_p1.read(), tmp_i_fu_30_p4.read());
}

void p_S1::thread_tmp_fu_96_p2() {
    tmp_fu_96_p2 = (tmp_49_i_fu_44_p3.read() ^ tmp_49_i6_fu_88_p3.read());
}

void p_S1::thread_tmp_i1_fu_52_p4() {
    tmp_i1_fu_52_p4 = x.read().range(31, 11);
}

void p_S1::thread_tmp_i4_fu_74_p4() {
    tmp_i4_fu_74_p4 = x.read().range(31, 25);
}

void p_S1::thread_tmp_i_fu_30_p4() {
    tmp_i_fu_30_p4 = x.read().range(31, 6);
}

}

