// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_done.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_done::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_done::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> sha256_done::ap_ST_fsm_state1 = "1";
const sc_lv<19> sha256_done::ap_ST_fsm_state2 = "10";
const sc_lv<19> sha256_done::ap_ST_fsm_state3 = "100";
const sc_lv<19> sha256_done::ap_ST_fsm_state4 = "1000";
const sc_lv<19> sha256_done::ap_ST_fsm_state5 = "10000";
const sc_lv<19> sha256_done::ap_ST_fsm_state6 = "100000";
const sc_lv<19> sha256_done::ap_ST_fsm_state7 = "1000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state8 = "10000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state9 = "100000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state10 = "1000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state11 = "10000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state12 = "100000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_pp0_stage0 = "10000000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state17 = "100000000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state18 = "1000000000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state19 = "10000000000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state20 = "100000000000000000";
const sc_lv<19> sha256_done::ap_ST_fsm_state21 = "1000000000000000000";
const bool sha256_done::ap_const_boolean_1 = true;
const sc_lv<32> sha256_done::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sha256_done::ap_const_lv1_0 = "0";
const sc_lv<3> sha256_done::ap_const_lv3_0 = "000";
const sc_lv<2> sha256_done::ap_const_lv2_0 = "00";
const sc_lv<4> sha256_done::ap_const_lv4_0 = "0000";
const sc_lv<32> sha256_done::ap_const_lv32_9 = "1001";
const sc_lv<1> sha256_done::ap_const_lv1_1 = "1";
const bool sha256_done::ap_const_boolean_0 = false;
const sc_lv<32> sha256_done::ap_const_lv32_12 = "10010";
const sc_lv<32> sha256_done::ap_const_lv32_2 = "10";
const sc_lv<32> sha256_done::ap_const_lv32_8 = "1000";
const sc_lv<32> sha256_done::ap_const_lv32_1 = "1";
const sc_lv<32> sha256_done::ap_const_lv32_3 = "11";
const sc_lv<32> sha256_done::ap_const_lv32_D = "1101";
const sc_lv<32> sha256_done::ap_const_lv32_C = "1100";
const sc_lv<6> sha256_done::ap_const_lv6_18 = "11000";
const sc_lv<6> sha256_done::ap_const_lv6_0 = "000000";
const sc_lv<32> sha256_done::ap_const_lv32_7 = "111";
const sc_lv<64> sha256_done::ap_const_lv64_3F = "111111";
const sc_lv<64> sha256_done::ap_const_lv64_3E = "111110";
const sc_lv<64> sha256_done::ap_const_lv64_3D = "111101";
const sc_lv<32> sha256_done::ap_const_lv32_4 = "100";
const sc_lv<64> sha256_done::ap_const_lv64_3C = "111100";
const sc_lv<64> sha256_done::ap_const_lv64_3B = "111011";
const sc_lv<32> sha256_done::ap_const_lv32_5 = "101";
const sc_lv<64> sha256_done::ap_const_lv64_3A = "111010";
const sc_lv<64> sha256_done::ap_const_lv64_39 = "111001";
const sc_lv<32> sha256_done::ap_const_lv32_6 = "110";
const sc_lv<64> sha256_done::ap_const_lv64_38 = "111000";
const sc_lv<32> sha256_done::ap_const_lv32_A = "1010";
const sc_lv<32> sha256_done::ap_const_lv32_B = "1011";
const sc_lv<32> sha256_done::ap_const_lv32_20 = "100000";
const sc_lv<8> sha256_done::ap_const_lv8_80 = "10000000";
const sc_lv<8> sha256_done::ap_const_lv8_0 = "00000000";
const sc_lv<32> sha256_done::ap_const_lv32_37 = "110111";
const sc_lv<4> sha256_done::ap_const_lv4_8 = "1000";
const sc_lv<4> sha256_done::ap_const_lv4_1 = "1";
const sc_lv<32> sha256_done::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> sha256_done::ap_const_lv32_F = "1111";
const sc_lv<32> sha256_done::ap_const_lv32_10 = "10000";
const sc_lv<32> sha256_done::ap_const_lv32_17 = "10111";
const sc_lv<32> sha256_done::ap_const_lv32_18 = "11000";
const sc_lv<32> sha256_done::ap_const_lv32_1F = "11111";
const sc_lv<11> sha256_done::ap_const_lv11_4FE = "10011111110";
const sc_lv<3> sha256_done::ap_const_lv3_4 = "100";
const sc_lv<3> sha256_done::ap_const_lv3_1 = "1";
const sc_lv<6> sha256_done::ap_const_lv6_38 = "111000";
const sc_lv<2> sha256_done::ap_const_lv2_2 = "10";
const sc_lv<5> sha256_done::ap_const_lv5_14 = "10100";
const sc_lv<6> sha256_done::ap_const_lv6_20 = "100000";
const sc_lv<6> sha256_done::ap_const_lv6_1 = "1";

sha256_done::sha256_done(sc_module_name name) : sc_module(name), mVcdFile(0) {
    hash_tmp_U = new sha256_done_hash_bkb("hash_tmp_U");
    hash_tmp_U->clk(ap_clk);
    hash_tmp_U->reset(ap_rst);
    hash_tmp_U->address0(hash_tmp_address0);
    hash_tmp_U->ce0(hash_tmp_ce0);
    hash_tmp_U->we0(hash_tmp_we0);
    hash_tmp_U->d0(hash_tmp_d0);
    hash_tmp_U->q0(hash_tmp_q0);
    hash_tmp_U->address1(hash_tmp_address1);
    hash_tmp_U->ce1(hash_tmp_ce1);
    hash_tmp_U->we1(hash_tmp_we1);
    hash_tmp_U->d1(hash_tmp_d1);
    grp_p_hash_fu_579 = new p_hash("grp_p_hash_fu_579");
    grp_p_hash_fu_579->ap_clk(ap_clk);
    grp_p_hash_fu_579->ap_rst(ap_rst);
    grp_p_hash_fu_579->ap_start(grp_p_hash_fu_579_ap_start);
    grp_p_hash_fu_579->ap_done(grp_p_hash_fu_579_ap_done);
    grp_p_hash_fu_579->ap_idle(grp_p_hash_fu_579_ap_idle);
    grp_p_hash_fu_579->ap_ready(grp_p_hash_fu_579_ap_ready);
    grp_p_hash_fu_579->sha256_buf_address0(grp_p_hash_fu_579_sha256_buf_address0);
    grp_p_hash_fu_579->sha256_buf_ce0(grp_p_hash_fu_579_sha256_buf_ce0);
    grp_p_hash_fu_579->sha256_buf_q0(sha256_buf_q0);
    grp_p_hash_fu_579->sha256_buf_address1(grp_p_hash_fu_579_sha256_buf_address1);
    grp_p_hash_fu_579->sha256_buf_ce1(grp_p_hash_fu_579_sha256_buf_ce1);
    grp_p_hash_fu_579->sha256_buf_q1(sha256_buf_q1);
    grp_p_hash_fu_579->sha256hash_0_read(grp_p_hash_fu_579_sha256hash_0_read);
    grp_p_hash_fu_579->sha256hash_1_read(grp_p_hash_fu_579_sha256hash_1_read);
    grp_p_hash_fu_579->sha256hash_2_read(grp_p_hash_fu_579_sha256hash_2_read);
    grp_p_hash_fu_579->sha256hash_3_read(grp_p_hash_fu_579_sha256hash_3_read);
    grp_p_hash_fu_579->sha256hash_4_read(grp_p_hash_fu_579_sha256hash_4_read);
    grp_p_hash_fu_579->sha256hash_5_read(grp_p_hash_fu_579_sha256hash_5_read);
    grp_p_hash_fu_579->sha256hash_6_read(grp_p_hash_fu_579_sha256hash_6_read);
    grp_p_hash_fu_579->sha256hash_7_read(grp_p_hash_fu_579_sha256hash_7_read);
    grp_p_hash_fu_579->ap_return_0(grp_p_hash_fu_579_ap_return_0);
    grp_p_hash_fu_579->ap_return_1(grp_p_hash_fu_579_ap_return_1);
    grp_p_hash_fu_579->ap_return_2(grp_p_hash_fu_579_ap_return_2);
    grp_p_hash_fu_579->ap_return_3(grp_p_hash_fu_579_ap_return_3);
    grp_p_hash_fu_579->ap_return_4(grp_p_hash_fu_579_ap_return_4);
    grp_p_hash_fu_579->ap_return_5(grp_p_hash_fu_579_ap_return_5);
    grp_p_hash_fu_579->ap_return_6(grp_p_hash_fu_579_ap_return_6);
    grp_p_hash_fu_579->ap_return_7(grp_p_hash_fu_579_ap_return_7);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_state10_io);
    sensitive << ( ap_sig_ioackin_m_axi_hash_AWREADY );
    sensitive << ( ap_predicate_op178_writereq_state10 );

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state15_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( tmp_22_reg_1312_pp0_iter1_reg );
    sensitive << ( ap_sig_ioackin_m_axi_hash_WREADY );

    SC_METHOD(thread_ap_block_state16_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state14);
    sensitive << ( tmp_22_fu_1093_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_op178_writereq_state10);
    sensitive << ( tmp_2_fu_909_p2 );
    sensitive << ( ptr_cmp_reg_1248 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_hash_AWREADY);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_hash_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_hash_WREADY);
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_hash_WREADY );

    SC_METHOD(thread_exitcond_fu_708_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_in_reg_445 );

    SC_METHOD(thread_grp_p_hash_fu_579_ap_start);
    sensitive << ( grp_p_hash_fu_579_ap_start_reg );

    SC_METHOD(thread_grp_p_hash_fu_579_sha256hash_0_read);
    sensitive << ( sha256hash_0_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sha256hash_reg_465 );

    SC_METHOD(thread_grp_p_hash_fu_579_sha256hash_1_read);
    sensitive << ( sha256hash_1_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sha256hash_1_reg_475 );

    SC_METHOD(thread_grp_p_hash_fu_579_sha256hash_2_read);
    sensitive << ( sha256hash_2_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sha256hash_2_reg_485 );

    SC_METHOD(thread_grp_p_hash_fu_579_sha256hash_3_read);
    sensitive << ( sha256hash_3_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sha256hash_3_reg_495 );

    SC_METHOD(thread_grp_p_hash_fu_579_sha256hash_4_read);
    sensitive << ( sha256hash_4_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sha256hash_4_reg_505 );

    SC_METHOD(thread_grp_p_hash_fu_579_sha256hash_5_read);
    sensitive << ( sha256hash_5_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sha256hash_5_reg_515 );

    SC_METHOD(thread_grp_p_hash_fu_579_sha256hash_6_read);
    sensitive << ( sha256hash_6_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sha256hash_6_reg_525 );

    SC_METHOD(thread_grp_p_hash_fu_579_sha256hash_7_read);
    sensitive << ( sha256hash_7_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sha256hash_7_reg_535 );

    SC_METHOD(thread_hash_blk_n_AW);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_2_fu_909_p2 );
    sensitive << ( ptr_cmp_reg_1248 );

    SC_METHOD(thread_hash_blk_n_B);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_hash_blk_n_W);
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_22_reg_1312_pp0_iter1_reg );

    SC_METHOD(thread_hash_tmp_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_9_fu_956_p1 );
    sensitive << ( tmp_3_fu_1041_p1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_15_fu_1062_p1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_19_fu_1080_p1 );
    sensitive << ( tmp_24_fu_1105_p1 );

    SC_METHOD(thread_hash_tmp_address1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_11_fu_980_p1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_13_fu_1049_p1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_17_fu_1072_p1 );
    sensitive << ( tmp_21_fu_1088_p1 );

    SC_METHOD(thread_hash_tmp_ce0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_block_state10_io );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_hash_tmp_ce1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_block_state10_io );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_hash_tmp_d0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_36_reg_1266 );
    sensitive << ( tmp_40_reg_1287 );
    sensitive << ( tmp_42_reg_1297 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_37_fu_945_p1 );

    SC_METHOD(thread_hash_tmp_d1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_39_reg_1282 );
    sensitive << ( tmp_41_reg_1292 );
    sensitive << ( tmp_43_reg_1302 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_38_fu_967_p1 );

    SC_METHOD(thread_hash_tmp_we0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_2_fu_909_p2 );
    sensitive << ( ptr_cmp_reg_1248 );
    sensitive << ( ap_block_state10_io );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_hash_tmp_we1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_2_fu_909_p2 );
    sensitive << ( ptr_cmp_reg_1248 );
    sensitive << ( ap_block_state10_io );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_i_1_cast3_fu_905_p1);
    sensitive << ( i_1_reg_545 );

    SC_METHOD(thread_i_3_fu_915_p2);
    sensitive << ( i_1_reg_545 );

    SC_METHOD(thread_i_4_fu_1099_p2);
    sensitive << ( i_2_reg_568 );

    SC_METHOD(thread_i_fu_702_p2);
    sensitive << ( i_0_in_reg_445 );

    SC_METHOD(thread_j_1_fu_730_p2);
    sensitive << ( j1_reg_454 );

    SC_METHOD(thread_j_2_fu_1035_p2);
    sensitive << ( n_assign_1_reg_557 );

    SC_METHOD(thread_j_cast_fu_693_p1);
    sensitive << ( j_fu_689_p1 );

    SC_METHOD(thread_j_fu_689_p1);
    sensitive << ( sha256_len );

    SC_METHOD(thread_m_axi_hash_ARADDR);

    SC_METHOD(thread_m_axi_hash_ARBURST);

    SC_METHOD(thread_m_axi_hash_ARCACHE);

    SC_METHOD(thread_m_axi_hash_ARID);

    SC_METHOD(thread_m_axi_hash_ARLEN);

    SC_METHOD(thread_m_axi_hash_ARLOCK);

    SC_METHOD(thread_m_axi_hash_ARPROT);

    SC_METHOD(thread_m_axi_hash_ARQOS);

    SC_METHOD(thread_m_axi_hash_ARREGION);

    SC_METHOD(thread_m_axi_hash_ARSIZE);

    SC_METHOD(thread_m_axi_hash_ARUSER);

    SC_METHOD(thread_m_axi_hash_ARVALID);

    SC_METHOD(thread_m_axi_hash_AWADDR);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( hash_addr_reg_1187 );
    sensitive << ( ap_predicate_op178_writereq_state10 );
    sensitive << ( ap_reg_ioackin_m_axi_hash_AWREADY );

    SC_METHOD(thread_m_axi_hash_AWBURST);

    SC_METHOD(thread_m_axi_hash_AWCACHE);

    SC_METHOD(thread_m_axi_hash_AWID);

    SC_METHOD(thread_m_axi_hash_AWLEN);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_predicate_op178_writereq_state10 );
    sensitive << ( ap_reg_ioackin_m_axi_hash_AWREADY );

    SC_METHOD(thread_m_axi_hash_AWLOCK);

    SC_METHOD(thread_m_axi_hash_AWPROT);

    SC_METHOD(thread_m_axi_hash_AWQOS);

    SC_METHOD(thread_m_axi_hash_AWREGION);

    SC_METHOD(thread_m_axi_hash_AWSIZE);

    SC_METHOD(thread_m_axi_hash_AWUSER);

    SC_METHOD(thread_m_axi_hash_AWVALID);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_predicate_op178_writereq_state10 );
    sensitive << ( ap_reg_ioackin_m_axi_hash_AWREADY );

    SC_METHOD(thread_m_axi_hash_BREADY);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_m_axi_hash_RREADY);

    SC_METHOD(thread_m_axi_hash_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_22_reg_1312_pp0_iter1_reg );
    sensitive << ( hash_tmp_load_reg_1326 );
    sensitive << ( ap_reg_ioackin_m_axi_hash_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_hash_WID);

    SC_METHOD(thread_m_axi_hash_WLAST);

    SC_METHOD(thread_m_axi_hash_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_22_reg_1312_pp0_iter1_reg );
    sensitive << ( ap_reg_ioackin_m_axi_hash_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_hash_WUSER);

    SC_METHOD(thread_m_axi_hash_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_22_reg_1312_pp0_iter1_reg );
    sensitive << ( ap_reg_ioackin_m_axi_hash_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ptr_cmp_fu_900_p2);
    sensitive << ( tmp_10_reg_1182 );
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_724_p2 );

    SC_METHOD(thread_sha256_bits_0_write_1_fu_816_p2);
    sensitive << ( tmp_25_fu_803_p3 );
    sensitive << ( tmp_32_fu_797_p1 );

    SC_METHOD(thread_sha256_bits_0_write_2_fu_822_p2);
    sensitive << ( tmp_14_fu_789_p3 );
    sensitive << ( tmp_30_fu_783_p1 );

    SC_METHOD(thread_sha256_bits_0_write_fu_811_p2);
    sensitive << ( sha256_bits_0_read );
    sensitive << ( tmp_18_fu_741_p2 );

    SC_METHOD(thread_sha256_buf_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( exitcond_fu_708_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_724_p2 );
    sensitive << ( grp_p_hash_fu_579_sha256_buf_address0 );
    sensitive << ( tmp_fu_697_p1 );
    sensitive << ( tmp_6_fu_714_p1 );
    sensitive << ( tmp_8_fu_736_p1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sha256_buf_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_p_hash_fu_579_sha256_buf_address1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sha256_buf_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( exitcond_fu_708_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_724_p2 );
    sensitive << ( grp_p_hash_fu_579_sha256_buf_ce0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sha256_buf_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_p_hash_fu_579_sha256_buf_ce1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sha256_buf_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( exitcond_fu_708_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_724_p2 );
    sensitive << ( tmp_48_i6_reg_1223 );
    sensitive << ( tmp_48_i9_reg_1233 );
    sensitive << ( tmp_48_i3_reg_1243 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_48_i_fu_828_p2 );

    SC_METHOD(thread_sha256_buf_d1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_48_i4_reg_1218 );
    sensitive << ( tmp_34_reg_1228 );
    sensitive << ( tmp_48_i1_reg_1238 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sha256_bits_0_write_2_fu_822_p2 );

    SC_METHOD(thread_sha256_buf_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( exitcond_fu_708_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_724_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sha256_buf_we1);
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_724_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_tmp_10_fu_679_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( hash_offset );

    SC_METHOD(thread_tmp_10_fu_679_p1);
    sensitive << ( tmp_10_fu_679_p0 );

    SC_METHOD(thread_tmp_11_fu_980_p1);
    sensitive << ( tmp_27_fu_972_p3 );

    SC_METHOD(thread_tmp_12_cast9_fu_1046_p1);
    sensitive << ( tmp_4_reg_1271 );

    SC_METHOD(thread_tmp_12_fu_775_p3);
    sensitive << ( tmp_26_fu_772_p1 );

    SC_METHOD(thread_tmp_13_fu_1049_p1);
    sensitive << ( tmp_12_cast9_fu_1046_p1 );

    SC_METHOD(thread_tmp_14_fu_789_p3);
    sensitive << ( tmp_31_fu_786_p1 );

    SC_METHOD(thread_tmp_15_fu_1062_p1);
    sensitive << ( tmp_28_fu_1054_p3 );

    SC_METHOD(thread_tmp_16_fu_1067_p2);
    sensitive << ( i_1_cast3_reg_1252 );

    SC_METHOD(thread_tmp_17_fu_1072_p1);
    sensitive << ( tmp_16_fu_1067_p2 );

    SC_METHOD(thread_tmp_18_cast8_fu_1077_p1);
    sensitive << ( tmp_27_reg_1277 );

    SC_METHOD(thread_tmp_18_fu_741_p2);
    sensitive << ( sha256_len );

    SC_METHOD(thread_tmp_19_fu_1080_p1);
    sensitive << ( tmp_18_cast8_fu_1077_p1 );

    SC_METHOD(thread_tmp_20_cast7_fu_1085_p1);
    sensitive << ( tmp_4_reg_1271 );

    SC_METHOD(thread_tmp_20_fu_769_p1);
    sensitive << ( sha256_bits_0_read );

    SC_METHOD(thread_tmp_21_fu_1088_p1);
    sensitive << ( tmp_20_cast7_fu_1085_p1 );

    SC_METHOD(thread_tmp_22_fu_1093_p2);
    sensitive << ( i_2_reg_568 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_24_fu_1105_p1);
    sensitive << ( i_2_reg_568 );

    SC_METHOD(thread_tmp_25_fu_803_p3);
    sensitive << ( tmp_33_fu_800_p1 );

    SC_METHOD(thread_tmp_26_fu_772_p1);
    sensitive << ( sha256_len );

    SC_METHOD(thread_tmp_27_fu_972_p3);
    sensitive << ( i_1_reg_545 );

    SC_METHOD(thread_tmp_28_fu_1054_p3);
    sensitive << ( i_1_reg_545 );

    SC_METHOD(thread_tmp_2_fu_909_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ptr_cmp_reg_1248 );
    sensitive << ( ap_block_state10_io );
    sensitive << ( i_1_reg_545 );

    SC_METHOD(thread_tmp_30_fu_783_p1);
    sensitive << ( sha256_bits_0_read );

    SC_METHOD(thread_tmp_31_fu_786_p1);
    sensitive << ( sha256_len );

    SC_METHOD(thread_tmp_32_fu_797_p1);
    sensitive << ( sha256_bits_0_read );

    SC_METHOD(thread_tmp_33_fu_800_p1);
    sensitive << ( sha256_len );

    SC_METHOD(thread_tmp_34_fu_866_p1);
    sensitive << ( x_assign_1_fu_762_p3 );

    SC_METHOD(thread_tmp_35_fu_921_p1);
    sensitive << ( n_assign_1_reg_557 );

    SC_METHOD(thread_tmp_36_fu_935_p1);
    sensitive << ( tmp_i6_fu_929_p2 );

    SC_METHOD(thread_tmp_37_fu_945_p1);
    sensitive << ( tmp_i7_fu_939_p2 );

    SC_METHOD(thread_tmp_38_fu_967_p1);
    sensitive << ( tmp_i9_fu_961_p2 );

    SC_METHOD(thread_tmp_39_fu_991_p1);
    sensitive << ( tmp_i1_fu_985_p2 );

    SC_METHOD(thread_tmp_3_fu_1041_p1);
    sensitive << ( i_1_reg_545 );

    SC_METHOD(thread_tmp_40_fu_1001_p1);
    sensitive << ( tmp_i2_fu_995_p2 );

    SC_METHOD(thread_tmp_41_fu_1011_p1);
    sensitive << ( tmp_i3_fu_1005_p2 );

    SC_METHOD(thread_tmp_42_fu_1021_p1);
    sensitive << ( tmp_i4_fu_1015_p2 );

    SC_METHOD(thread_tmp_43_fu_1031_p1);
    sensitive << ( tmp_i5_fu_1025_p2 );

    SC_METHOD(thread_tmp_48_i_fu_828_p2);
    sensitive << ( tmp_12_fu_775_p3 );
    sensitive << ( tmp_20_fu_769_p1 );

    SC_METHOD(thread_tmp_4_fu_950_p2);
    sensitive << ( i_1_reg_545 );

    SC_METHOD(thread_tmp_5_fu_719_p2);
    sensitive << ( sha256_len );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_708_p2 );

    SC_METHOD(thread_tmp_6_fu_714_p1);
    sensitive << ( i_fu_702_p2 );

    SC_METHOD(thread_tmp_7_fu_724_p2);
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j1_reg_454 );

    SC_METHOD(thread_tmp_89_i_fu_757_p2);
    sensitive << ( sha256_bits_1_read );

    SC_METHOD(thread_tmp_8_fu_736_p1);
    sensitive << ( j1_reg_454 );

    SC_METHOD(thread_tmp_9_fu_956_p1);
    sensitive << ( tmp_4_fu_950_p2 );

    SC_METHOD(thread_tmp_fu_697_p1);
    sensitive << ( j_fu_689_p1 );

    SC_METHOD(thread_tmp_i1_cast_fu_925_p1);
    sensitive << ( tmp_35_fu_921_p1 );

    SC_METHOD(thread_tmp_i1_fu_985_p2);
    sensitive << ( reg_650 );
    sensitive << ( tmp_i1_cast_fu_925_p1 );

    SC_METHOD(thread_tmp_i2_fu_995_p2);
    sensitive << ( reg_655 );
    sensitive << ( tmp_i1_cast_fu_925_p1 );

    SC_METHOD(thread_tmp_i3_fu_1005_p2);
    sensitive << ( reg_660 );
    sensitive << ( tmp_i1_cast_fu_925_p1 );

    SC_METHOD(thread_tmp_i4_fu_1015_p2);
    sensitive << ( reg_665 );
    sensitive << ( tmp_i1_cast_fu_925_p1 );

    SC_METHOD(thread_tmp_i5_fu_1025_p2);
    sensitive << ( reg_670 );
    sensitive << ( tmp_i1_cast_fu_925_p1 );

    SC_METHOD(thread_tmp_i6_fu_929_p2);
    sensitive << ( reg_635 );
    sensitive << ( tmp_i1_cast_fu_925_p1 );

    SC_METHOD(thread_tmp_i7_fu_939_p2);
    sensitive << ( reg_640 );
    sensitive << ( tmp_i1_cast_fu_925_p1 );

    SC_METHOD(thread_tmp_i9_fu_961_p2);
    sensitive << ( reg_645 );
    sensitive << ( tmp_i1_cast_fu_925_p1 );

    SC_METHOD(thread_tmp_i_9_fu_752_p2);
    sensitive << ( sha256_bits_0_read );
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_724_p2 );
    sensitive << ( tmp_i_fu_746_p2 );

    SC_METHOD(thread_tmp_i_fu_746_p2);
    sensitive << ( tmp_18_fu_741_p2 );

    SC_METHOD(thread_tmp_s_fu_675_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( hash_offset );

    SC_METHOD(thread_tmp_s_fu_675_p1);
    sensitive << ( tmp_s_fu_675_p0 );

    SC_METHOD(thread_x_assign_1_fu_762_p3);
    sensitive << ( sha256_bits_1_read );
    sensitive << ( tmp_i_9_fu_752_p2 );
    sensitive << ( tmp_89_i_fu_757_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_2_fu_909_p2 );
    sensitive << ( ptr_cmp_reg_1248 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_p_hash_fu_579_ap_done );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_fu_719_p2 );
    sensitive << ( tmp_5_reg_1206 );
    sensitive << ( exitcond_fu_708_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_724_p2 );
    sensitive << ( ap_block_state10_io );
    sensitive << ( tmp_22_fu_1093_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_CS_fsm = "0000000000000000001";
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    grp_p_hash_fu_579_ap_start_reg = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_hash_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_hash_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_done_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sha256_buf_address0, "(port)sha256_buf_address0");
    sc_trace(mVcdFile, sha256_buf_ce0, "(port)sha256_buf_ce0");
    sc_trace(mVcdFile, sha256_buf_we0, "(port)sha256_buf_we0");
    sc_trace(mVcdFile, sha256_buf_d0, "(port)sha256_buf_d0");
    sc_trace(mVcdFile, sha256_buf_q0, "(port)sha256_buf_q0");
    sc_trace(mVcdFile, sha256_buf_address1, "(port)sha256_buf_address1");
    sc_trace(mVcdFile, sha256_buf_ce1, "(port)sha256_buf_ce1");
    sc_trace(mVcdFile, sha256_buf_we1, "(port)sha256_buf_we1");
    sc_trace(mVcdFile, sha256_buf_d1, "(port)sha256_buf_d1");
    sc_trace(mVcdFile, sha256_buf_q1, "(port)sha256_buf_q1");
    sc_trace(mVcdFile, sha256hash_0_read, "(port)sha256hash_0_read");
    sc_trace(mVcdFile, sha256hash_1_read, "(port)sha256hash_1_read");
    sc_trace(mVcdFile, sha256hash_2_read, "(port)sha256hash_2_read");
    sc_trace(mVcdFile, sha256hash_3_read, "(port)sha256hash_3_read");
    sc_trace(mVcdFile, sha256hash_4_read, "(port)sha256hash_4_read");
    sc_trace(mVcdFile, sha256hash_5_read, "(port)sha256hash_5_read");
    sc_trace(mVcdFile, sha256hash_6_read, "(port)sha256hash_6_read");
    sc_trace(mVcdFile, sha256hash_7_read, "(port)sha256hash_7_read");
    sc_trace(mVcdFile, sha256_bits_0_read, "(port)sha256_bits_0_read");
    sc_trace(mVcdFile, sha256_bits_1_read, "(port)sha256_bits_1_read");
    sc_trace(mVcdFile, sha256_len, "(port)sha256_len");
    sc_trace(mVcdFile, m_axi_hash_AWVALID, "(port)m_axi_hash_AWVALID");
    sc_trace(mVcdFile, m_axi_hash_AWREADY, "(port)m_axi_hash_AWREADY");
    sc_trace(mVcdFile, m_axi_hash_AWADDR, "(port)m_axi_hash_AWADDR");
    sc_trace(mVcdFile, m_axi_hash_AWID, "(port)m_axi_hash_AWID");
    sc_trace(mVcdFile, m_axi_hash_AWLEN, "(port)m_axi_hash_AWLEN");
    sc_trace(mVcdFile, m_axi_hash_AWSIZE, "(port)m_axi_hash_AWSIZE");
    sc_trace(mVcdFile, m_axi_hash_AWBURST, "(port)m_axi_hash_AWBURST");
    sc_trace(mVcdFile, m_axi_hash_AWLOCK, "(port)m_axi_hash_AWLOCK");
    sc_trace(mVcdFile, m_axi_hash_AWCACHE, "(port)m_axi_hash_AWCACHE");
    sc_trace(mVcdFile, m_axi_hash_AWPROT, "(port)m_axi_hash_AWPROT");
    sc_trace(mVcdFile, m_axi_hash_AWQOS, "(port)m_axi_hash_AWQOS");
    sc_trace(mVcdFile, m_axi_hash_AWREGION, "(port)m_axi_hash_AWREGION");
    sc_trace(mVcdFile, m_axi_hash_AWUSER, "(port)m_axi_hash_AWUSER");
    sc_trace(mVcdFile, m_axi_hash_WVALID, "(port)m_axi_hash_WVALID");
    sc_trace(mVcdFile, m_axi_hash_WREADY, "(port)m_axi_hash_WREADY");
    sc_trace(mVcdFile, m_axi_hash_WDATA, "(port)m_axi_hash_WDATA");
    sc_trace(mVcdFile, m_axi_hash_WSTRB, "(port)m_axi_hash_WSTRB");
    sc_trace(mVcdFile, m_axi_hash_WLAST, "(port)m_axi_hash_WLAST");
    sc_trace(mVcdFile, m_axi_hash_WID, "(port)m_axi_hash_WID");
    sc_trace(mVcdFile, m_axi_hash_WUSER, "(port)m_axi_hash_WUSER");
    sc_trace(mVcdFile, m_axi_hash_ARVALID, "(port)m_axi_hash_ARVALID");
    sc_trace(mVcdFile, m_axi_hash_ARREADY, "(port)m_axi_hash_ARREADY");
    sc_trace(mVcdFile, m_axi_hash_ARADDR, "(port)m_axi_hash_ARADDR");
    sc_trace(mVcdFile, m_axi_hash_ARID, "(port)m_axi_hash_ARID");
    sc_trace(mVcdFile, m_axi_hash_ARLEN, "(port)m_axi_hash_ARLEN");
    sc_trace(mVcdFile, m_axi_hash_ARSIZE, "(port)m_axi_hash_ARSIZE");
    sc_trace(mVcdFile, m_axi_hash_ARBURST, "(port)m_axi_hash_ARBURST");
    sc_trace(mVcdFile, m_axi_hash_ARLOCK, "(port)m_axi_hash_ARLOCK");
    sc_trace(mVcdFile, m_axi_hash_ARCACHE, "(port)m_axi_hash_ARCACHE");
    sc_trace(mVcdFile, m_axi_hash_ARPROT, "(port)m_axi_hash_ARPROT");
    sc_trace(mVcdFile, m_axi_hash_ARQOS, "(port)m_axi_hash_ARQOS");
    sc_trace(mVcdFile, m_axi_hash_ARREGION, "(port)m_axi_hash_ARREGION");
    sc_trace(mVcdFile, m_axi_hash_ARUSER, "(port)m_axi_hash_ARUSER");
    sc_trace(mVcdFile, m_axi_hash_RVALID, "(port)m_axi_hash_RVALID");
    sc_trace(mVcdFile, m_axi_hash_RREADY, "(port)m_axi_hash_RREADY");
    sc_trace(mVcdFile, m_axi_hash_RDATA, "(port)m_axi_hash_RDATA");
    sc_trace(mVcdFile, m_axi_hash_RLAST, "(port)m_axi_hash_RLAST");
    sc_trace(mVcdFile, m_axi_hash_RID, "(port)m_axi_hash_RID");
    sc_trace(mVcdFile, m_axi_hash_RUSER, "(port)m_axi_hash_RUSER");
    sc_trace(mVcdFile, m_axi_hash_RRESP, "(port)m_axi_hash_RRESP");
    sc_trace(mVcdFile, m_axi_hash_BVALID, "(port)m_axi_hash_BVALID");
    sc_trace(mVcdFile, m_axi_hash_BREADY, "(port)m_axi_hash_BREADY");
    sc_trace(mVcdFile, m_axi_hash_BRESP, "(port)m_axi_hash_BRESP");
    sc_trace(mVcdFile, m_axi_hash_BID, "(port)m_axi_hash_BID");
    sc_trace(mVcdFile, m_axi_hash_BUSER, "(port)m_axi_hash_BUSER");
    sc_trace(mVcdFile, hash_offset, "(port)hash_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, hash_blk_n_AW, "hash_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_2_fu_909_p2, "tmp_2_fu_909_p2");
    sc_trace(mVcdFile, ptr_cmp_reg_1248, "ptr_cmp_reg_1248");
    sc_trace(mVcdFile, hash_blk_n_W, "hash_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_22_reg_1312, "tmp_22_reg_1312");
    sc_trace(mVcdFile, tmp_22_reg_1312_pp0_iter1_reg, "tmp_22_reg_1312_pp0_iter1_reg");
    sc_trace(mVcdFile, hash_blk_n_B, "hash_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, i_2_reg_568, "i_2_reg_568");
    sc_trace(mVcdFile, reg_635, "reg_635");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_ready, "grp_p_hash_fu_579_ap_ready");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_done, "grp_p_hash_fu_579_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, reg_640, "reg_640");
    sc_trace(mVcdFile, reg_645, "reg_645");
    sc_trace(mVcdFile, reg_650, "reg_650");
    sc_trace(mVcdFile, reg_655, "reg_655");
    sc_trace(mVcdFile, reg_660, "reg_660");
    sc_trace(mVcdFile, reg_665, "reg_665");
    sc_trace(mVcdFile, reg_670, "reg_670");
    sc_trace(mVcdFile, tmp_10_fu_679_p1, "tmp_10_fu_679_p1");
    sc_trace(mVcdFile, tmp_10_reg_1182, "tmp_10_reg_1182");
    sc_trace(mVcdFile, hash_addr_reg_1187, "hash_addr_reg_1187");
    sc_trace(mVcdFile, j_cast_fu_693_p1, "j_cast_fu_693_p1");
    sc_trace(mVcdFile, i_fu_702_p2, "i_fu_702_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_5_fu_719_p2, "tmp_5_fu_719_p2");
    sc_trace(mVcdFile, tmp_5_reg_1206, "tmp_5_reg_1206");
    sc_trace(mVcdFile, exitcond_fu_708_p2, "exitcond_fu_708_p2");
    sc_trace(mVcdFile, j_1_fu_730_p2, "j_1_fu_730_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_48_i4_reg_1218, "tmp_48_i4_reg_1218");
    sc_trace(mVcdFile, tmp_7_fu_724_p2, "tmp_7_fu_724_p2");
    sc_trace(mVcdFile, tmp_48_i6_reg_1223, "tmp_48_i6_reg_1223");
    sc_trace(mVcdFile, tmp_34_fu_866_p1, "tmp_34_fu_866_p1");
    sc_trace(mVcdFile, tmp_34_reg_1228, "tmp_34_reg_1228");
    sc_trace(mVcdFile, tmp_48_i9_reg_1233, "tmp_48_i9_reg_1233");
    sc_trace(mVcdFile, tmp_48_i1_reg_1238, "tmp_48_i1_reg_1238");
    sc_trace(mVcdFile, tmp_48_i3_reg_1243, "tmp_48_i3_reg_1243");
    sc_trace(mVcdFile, ptr_cmp_fu_900_p2, "ptr_cmp_fu_900_p2");
    sc_trace(mVcdFile, i_1_cast3_fu_905_p1, "i_1_cast3_fu_905_p1");
    sc_trace(mVcdFile, i_1_cast3_reg_1252, "i_1_cast3_reg_1252");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_hash_AWREADY, "ap_sig_ioackin_m_axi_hash_AWREADY");
    sc_trace(mVcdFile, ap_predicate_op178_writereq_state10, "ap_predicate_op178_writereq_state10");
    sc_trace(mVcdFile, ap_block_state10_io, "ap_block_state10_io");
    sc_trace(mVcdFile, i_3_fu_915_p2, "i_3_fu_915_p2");
    sc_trace(mVcdFile, i_3_reg_1261, "i_3_reg_1261");
    sc_trace(mVcdFile, tmp_36_fu_935_p1, "tmp_36_fu_935_p1");
    sc_trace(mVcdFile, tmp_36_reg_1266, "tmp_36_reg_1266");
    sc_trace(mVcdFile, tmp_4_fu_950_p2, "tmp_4_fu_950_p2");
    sc_trace(mVcdFile, tmp_4_reg_1271, "tmp_4_reg_1271");
    sc_trace(mVcdFile, tmp_27_fu_972_p3, "tmp_27_fu_972_p3");
    sc_trace(mVcdFile, tmp_27_reg_1277, "tmp_27_reg_1277");
    sc_trace(mVcdFile, tmp_39_fu_991_p1, "tmp_39_fu_991_p1");
    sc_trace(mVcdFile, tmp_39_reg_1282, "tmp_39_reg_1282");
    sc_trace(mVcdFile, tmp_40_fu_1001_p1, "tmp_40_fu_1001_p1");
    sc_trace(mVcdFile, tmp_40_reg_1287, "tmp_40_reg_1287");
    sc_trace(mVcdFile, tmp_41_fu_1011_p1, "tmp_41_fu_1011_p1");
    sc_trace(mVcdFile, tmp_41_reg_1292, "tmp_41_reg_1292");
    sc_trace(mVcdFile, tmp_42_fu_1021_p1, "tmp_42_fu_1021_p1");
    sc_trace(mVcdFile, tmp_42_reg_1297, "tmp_42_reg_1297");
    sc_trace(mVcdFile, tmp_43_fu_1031_p1, "tmp_43_fu_1031_p1");
    sc_trace(mVcdFile, tmp_43_reg_1302, "tmp_43_reg_1302");
    sc_trace(mVcdFile, j_2_fu_1035_p2, "j_2_fu_1035_p2");
    sc_trace(mVcdFile, j_2_reg_1307, "j_2_reg_1307");
    sc_trace(mVcdFile, tmp_22_fu_1093_p2, "tmp_22_fu_1093_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter0, "ap_block_state14_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage0_iter1, "ap_block_state15_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage0_iter2, "ap_block_state16_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_hash_WREADY, "ap_sig_ioackin_m_axi_hash_WREADY");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_4_fu_1099_p2, "i_4_fu_1099_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, hash_tmp_q0, "hash_tmp_q0");
    sc_trace(mVcdFile, hash_tmp_load_reg_1326, "hash_tmp_load_reg_1326");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state14, "ap_condition_pp0_exit_iter0_state14");
    sc_trace(mVcdFile, hash_tmp_address0, "hash_tmp_address0");
    sc_trace(mVcdFile, hash_tmp_ce0, "hash_tmp_ce0");
    sc_trace(mVcdFile, hash_tmp_we0, "hash_tmp_we0");
    sc_trace(mVcdFile, hash_tmp_d0, "hash_tmp_d0");
    sc_trace(mVcdFile, hash_tmp_address1, "hash_tmp_address1");
    sc_trace(mVcdFile, hash_tmp_ce1, "hash_tmp_ce1");
    sc_trace(mVcdFile, hash_tmp_we1, "hash_tmp_we1");
    sc_trace(mVcdFile, hash_tmp_d1, "hash_tmp_d1");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_start, "grp_p_hash_fu_579_ap_start");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_idle, "grp_p_hash_fu_579_ap_idle");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256_buf_address0, "grp_p_hash_fu_579_sha256_buf_address0");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256_buf_ce0, "grp_p_hash_fu_579_sha256_buf_ce0");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256_buf_address1, "grp_p_hash_fu_579_sha256_buf_address1");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256_buf_ce1, "grp_p_hash_fu_579_sha256_buf_ce1");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256hash_0_read, "grp_p_hash_fu_579_sha256hash_0_read");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256hash_1_read, "grp_p_hash_fu_579_sha256hash_1_read");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256hash_2_read, "grp_p_hash_fu_579_sha256hash_2_read");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256hash_3_read, "grp_p_hash_fu_579_sha256hash_3_read");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256hash_4_read, "grp_p_hash_fu_579_sha256hash_4_read");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256hash_5_read, "grp_p_hash_fu_579_sha256hash_5_read");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256hash_6_read, "grp_p_hash_fu_579_sha256hash_6_read");
    sc_trace(mVcdFile, grp_p_hash_fu_579_sha256hash_7_read, "grp_p_hash_fu_579_sha256hash_7_read");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_return_0, "grp_p_hash_fu_579_ap_return_0");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_return_1, "grp_p_hash_fu_579_ap_return_1");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_return_2, "grp_p_hash_fu_579_ap_return_2");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_return_3, "grp_p_hash_fu_579_ap_return_3");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_return_4, "grp_p_hash_fu_579_ap_return_4");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_return_5, "grp_p_hash_fu_579_ap_return_5");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_return_6, "grp_p_hash_fu_579_ap_return_6");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_return_7, "grp_p_hash_fu_579_ap_return_7");
    sc_trace(mVcdFile, i_0_in_reg_445, "i_0_in_reg_445");
    sc_trace(mVcdFile, j1_reg_454, "j1_reg_454");
    sc_trace(mVcdFile, sha256hash_reg_465, "sha256hash_reg_465");
    sc_trace(mVcdFile, sha256hash_1_reg_475, "sha256hash_1_reg_475");
    sc_trace(mVcdFile, sha256hash_2_reg_485, "sha256hash_2_reg_485");
    sc_trace(mVcdFile, sha256hash_3_reg_495, "sha256hash_3_reg_495");
    sc_trace(mVcdFile, sha256hash_4_reg_505, "sha256hash_4_reg_505");
    sc_trace(mVcdFile, sha256hash_5_reg_515, "sha256hash_5_reg_515");
    sc_trace(mVcdFile, sha256hash_6_reg_525, "sha256hash_6_reg_525");
    sc_trace(mVcdFile, sha256hash_7_reg_535, "sha256hash_7_reg_535");
    sc_trace(mVcdFile, i_1_reg_545, "i_1_reg_545");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, n_assign_1_reg_557, "n_assign_1_reg_557");
    sc_trace(mVcdFile, grp_p_hash_fu_579_ap_start_reg, "grp_p_hash_fu_579_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_fu_697_p1, "tmp_fu_697_p1");
    sc_trace(mVcdFile, tmp_6_fu_714_p1, "tmp_6_fu_714_p1");
    sc_trace(mVcdFile, tmp_8_fu_736_p1, "tmp_8_fu_736_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_9_fu_956_p1, "tmp_9_fu_956_p1");
    sc_trace(mVcdFile, tmp_11_fu_980_p1, "tmp_11_fu_980_p1");
    sc_trace(mVcdFile, tmp_3_fu_1041_p1, "tmp_3_fu_1041_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_13_fu_1049_p1, "tmp_13_fu_1049_p1");
    sc_trace(mVcdFile, tmp_15_fu_1062_p1, "tmp_15_fu_1062_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_17_fu_1072_p1, "tmp_17_fu_1072_p1");
    sc_trace(mVcdFile, tmp_19_fu_1080_p1, "tmp_19_fu_1080_p1");
    sc_trace(mVcdFile, tmp_21_fu_1088_p1, "tmp_21_fu_1088_p1");
    sc_trace(mVcdFile, tmp_24_fu_1105_p1, "tmp_24_fu_1105_p1");
    sc_trace(mVcdFile, tmp_s_fu_675_p1, "tmp_s_fu_675_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_hash_AWREADY, "ap_reg_ioackin_m_axi_hash_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_hash_WREADY, "ap_reg_ioackin_m_axi_hash_WREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_48_i_fu_828_p2, "tmp_48_i_fu_828_p2");
    sc_trace(mVcdFile, tmp_37_fu_945_p1, "tmp_37_fu_945_p1");
    sc_trace(mVcdFile, tmp_38_fu_967_p1, "tmp_38_fu_967_p1");
    sc_trace(mVcdFile, tmp_s_fu_675_p0, "tmp_s_fu_675_p0");
    sc_trace(mVcdFile, tmp_10_fu_679_p0, "tmp_10_fu_679_p0");
    sc_trace(mVcdFile, j_fu_689_p1, "j_fu_689_p1");
    sc_trace(mVcdFile, tmp_18_fu_741_p2, "tmp_18_fu_741_p2");
    sc_trace(mVcdFile, tmp_i_fu_746_p2, "tmp_i_fu_746_p2");
    sc_trace(mVcdFile, tmp_i_9_fu_752_p2, "tmp_i_9_fu_752_p2");
    sc_trace(mVcdFile, tmp_89_i_fu_757_p2, "tmp_89_i_fu_757_p2");
    sc_trace(mVcdFile, tmp_26_fu_772_p1, "tmp_26_fu_772_p1");
    sc_trace(mVcdFile, tmp_31_fu_786_p1, "tmp_31_fu_786_p1");
    sc_trace(mVcdFile, tmp_33_fu_800_p1, "tmp_33_fu_800_p1");
    sc_trace(mVcdFile, tmp_25_fu_803_p3, "tmp_25_fu_803_p3");
    sc_trace(mVcdFile, tmp_32_fu_797_p1, "tmp_32_fu_797_p1");
    sc_trace(mVcdFile, tmp_14_fu_789_p3, "tmp_14_fu_789_p3");
    sc_trace(mVcdFile, tmp_30_fu_783_p1, "tmp_30_fu_783_p1");
    sc_trace(mVcdFile, tmp_12_fu_775_p3, "tmp_12_fu_775_p3");
    sc_trace(mVcdFile, tmp_20_fu_769_p1, "tmp_20_fu_769_p1");
    sc_trace(mVcdFile, sha256_bits_0_write_2_fu_822_p2, "sha256_bits_0_write_2_fu_822_p2");
    sc_trace(mVcdFile, sha256_bits_0_write_1_fu_816_p2, "sha256_bits_0_write_1_fu_816_p2");
    sc_trace(mVcdFile, sha256_bits_0_write_fu_811_p2, "sha256_bits_0_write_fu_811_p2");
    sc_trace(mVcdFile, x_assign_1_fu_762_p3, "x_assign_1_fu_762_p3");
    sc_trace(mVcdFile, tmp_35_fu_921_p1, "tmp_35_fu_921_p1");
    sc_trace(mVcdFile, tmp_i1_cast_fu_925_p1, "tmp_i1_cast_fu_925_p1");
    sc_trace(mVcdFile, tmp_i6_fu_929_p2, "tmp_i6_fu_929_p2");
    sc_trace(mVcdFile, tmp_i7_fu_939_p2, "tmp_i7_fu_939_p2");
    sc_trace(mVcdFile, tmp_i9_fu_961_p2, "tmp_i9_fu_961_p2");
    sc_trace(mVcdFile, tmp_i1_fu_985_p2, "tmp_i1_fu_985_p2");
    sc_trace(mVcdFile, tmp_i2_fu_995_p2, "tmp_i2_fu_995_p2");
    sc_trace(mVcdFile, tmp_i3_fu_1005_p2, "tmp_i3_fu_1005_p2");
    sc_trace(mVcdFile, tmp_i4_fu_1015_p2, "tmp_i4_fu_1015_p2");
    sc_trace(mVcdFile, tmp_i5_fu_1025_p2, "tmp_i5_fu_1025_p2");
    sc_trace(mVcdFile, tmp_12_cast9_fu_1046_p1, "tmp_12_cast9_fu_1046_p1");
    sc_trace(mVcdFile, tmp_28_fu_1054_p3, "tmp_28_fu_1054_p3");
    sc_trace(mVcdFile, tmp_16_fu_1067_p2, "tmp_16_fu_1067_p2");
    sc_trace(mVcdFile, tmp_18_cast8_fu_1077_p1, "tmp_18_cast8_fu_1077_p1");
    sc_trace(mVcdFile, tmp_20_cast7_fu_1085_p1, "tmp_20_cast7_fu_1085_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

sha256_done::~sha256_done() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete hash_tmp_U;
    delete grp_p_hash_fu_579;
}

void sha256_done::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state14.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                    (esl_seteq<1,1,1>(tmp_2_fu_909_p2.read(), ap_const_lv1_1) || 
                     esl_seteq<1,1,1>(ap_const_lv1_1, ptr_cmp_reg_1248.read())) && 
                    esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state14.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state14.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                    (esl_seteq<1,1,1>(tmp_2_fu_909_p2.read(), ap_const_lv1_1) || 
                     esl_seteq<1,1,1>(ap_const_lv1_1, ptr_cmp_reg_1248.read())) && 
                    esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_hash_AWREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op178_writereq_state10.read()))) {
            if (esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_hash_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_hash_AWREADY.read())) {
                ap_reg_ioackin_m_axi_hash_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_hash_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_22_reg_1312_pp0_iter1_reg.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_hash_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_hash_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_hash_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_p_hash_fu_579_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_719_p2.read())) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
            grp_p_hash_fu_579_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_p_hash_fu_579_ap_ready.read())) {
            grp_p_hash_fu_579_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_708_p2.read()))) {
        i_0_in_reg_445 = i_fu_702_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_in_reg_445 = j_cast_fu_693_p1.read();
    }
    if ((esl_seteq<1,1,1>(grp_p_hash_fu_579_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ptr_cmp_reg_1248.read()))) {
        i_1_reg_545 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_1_reg_545 = i_3_reg_1261.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_22_fu_1093_p2.read()))) {
        i_2_reg_568 = i_4_fu_1099_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                (esl_seteq<1,1,1>(tmp_2_fu_909_p2.read(), ap_const_lv1_1) || 
                 esl_seteq<1,1,1>(ap_const_lv1_1, ptr_cmp_reg_1248.read())) && 
                esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0))) {
        i_2_reg_568 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_724_p2.read()))) {
        j1_reg_454 = j_1_fu_730_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(grp_p_hash_fu_579_ap_done.read(), ap_const_logic_1))) {
        j1_reg_454 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(grp_p_hash_fu_579_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ptr_cmp_reg_1248.read()))) {
        n_assign_1_reg_557 = ap_const_lv6_18;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        n_assign_1_reg_557 = j_2_reg_1307.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()))) {
        sha256hash_1_reg_475 = reg_640.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
        sha256hash_1_reg_475 = sha256hash_1_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()))) {
        sha256hash_2_reg_485 = reg_645.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
        sha256hash_2_reg_485 = sha256hash_2_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()))) {
        sha256hash_3_reg_495 = reg_650.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
        sha256hash_3_reg_495 = sha256hash_3_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()))) {
        sha256hash_4_reg_505 = reg_655.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
        sha256hash_4_reg_505 = sha256hash_4_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()))) {
        sha256hash_5_reg_515 = reg_660.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
        sha256hash_5_reg_515 = sha256hash_5_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()))) {
        sha256hash_6_reg_525 = reg_665.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
        sha256hash_6_reg_525 = sha256hash_6_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()))) {
        sha256hash_7_reg_535 = reg_670.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
        sha256hash_7_reg_535 = sha256hash_7_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()))) {
        sha256hash_reg_465 = reg_635.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
        sha256hash_reg_465 = sha256hash_0_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        hash_addr_reg_1187 =  (sc_lv<32>) (tmp_s_fu_675_p1.read());
        tmp_10_reg_1182 = tmp_10_fu_679_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_22_reg_1312.read()))) {
        hash_tmp_load_reg_1326 = hash_tmp_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, ptr_cmp_reg_1248.read()))) {
        i_1_cast3_reg_1252 = i_1_cast3_fu_905_p1.read();
        i_3_reg_1261 = i_3_fu_915_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, ptr_cmp_reg_1248.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_909_p2.read()))) {
        j_2_reg_1307 = j_2_fu_1035_p2.read();
        tmp_27_reg_1277 = tmp_27_fu_972_p3.read();
        tmp_36_reg_1266 = tmp_36_fu_935_p1.read();
        tmp_39_reg_1282 = tmp_39_fu_991_p1.read();
        tmp_40_reg_1287 = tmp_40_fu_1001_p1.read();
        tmp_41_reg_1292 = tmp_41_fu_1011_p1.read();
        tmp_42_reg_1297 = tmp_42_fu_1021_p1.read();
        tmp_43_reg_1302 = tmp_43_fu_1031_p1.read();
        tmp_4_reg_1271 = tmp_4_fu_950_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_1206.read())))) {
        ptr_cmp_reg_1248 = ptr_cmp_fu_900_p2.read();
        tmp_34_reg_1228 = tmp_34_fu_866_p1.read();
        tmp_48_i1_reg_1238 = x_assign_1_fu_762_p3.read().range(23, 16);
        tmp_48_i3_reg_1243 = x_assign_1_fu_762_p3.read().range(31, 24);
        tmp_48_i4_reg_1218 = sha256_bits_0_write_1_fu_816_p2.read().range(23, 16);
        tmp_48_i6_reg_1223 = sha256_bits_0_write_fu_811_p2.read().range(31, 24);
        tmp_48_i9_reg_1233 = x_assign_1_fu_762_p3.read().range(15, 8);
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
  esl_seteq<1,1,1>(grp_p_hash_fu_579_ap_done.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(grp_p_hash_fu_579_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())))) {
        reg_635 = grp_p_hash_fu_579_ap_return_0.read();
        reg_640 = grp_p_hash_fu_579_ap_return_1.read();
        reg_645 = grp_p_hash_fu_579_ap_return_2.read();
        reg_650 = grp_p_hash_fu_579_ap_return_3.read();
        reg_655 = grp_p_hash_fu_579_ap_return_4.read();
        reg_660 = grp_p_hash_fu_579_ap_return_5.read();
        reg_665 = grp_p_hash_fu_579_ap_return_6.read();
        reg_670 = grp_p_hash_fu_579_ap_return_7.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_22_reg_1312 = tmp_22_fu_1093_p2.read();
        tmp_22_reg_1312_pp0_iter1_reg = tmp_22_reg_1312.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()))) {
        tmp_5_reg_1206 = tmp_5_fu_719_p2.read();
    }
}

void sha256_done::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[13];
}

void sha256_done::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_done::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sha256_done::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sha256_done::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void sha256_done::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void sha256_done::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256_done::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[18];
}

void sha256_done::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256_done::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256_done::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256_done::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256_done::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256_done::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256_done::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256_done::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_done::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_done::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()));
}

void sha256_done::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()));
}

void sha256_done::thread_ap_block_state10_io() {
    ap_block_state10_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_hash_AWREADY.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op178_writereq_state10.read()));
}

void sha256_done::thread_ap_block_state14_pp0_stage0_iter0() {
    ap_block_state14_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_done::thread_ap_block_state15_pp0_stage0_iter1() {
    ap_block_state15_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_done::thread_ap_block_state16_io() {
    ap_block_state16_io = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_22_reg_1312_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_hash_WREADY.read()));
}

void sha256_done::thread_ap_block_state16_pp0_stage0_iter2() {
    ap_block_state16_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_done::thread_ap_condition_pp0_exit_iter0_state14() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_22_fu_1093_p2.read())) {
        ap_condition_pp0_exit_iter0_state14 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state14 = ap_const_logic_0;
    }
}

void sha256_done::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(m_axi_hash_BVALID.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_done::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void sha256_done::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_done::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void sha256_done::thread_ap_predicate_op178_writereq_state10() {
    ap_predicate_op178_writereq_state10 = (esl_seteq<1,1,1>(tmp_2_fu_909_p2.read(), ap_const_lv1_1) || esl_seteq<1,1,1>(ap_const_lv1_1, ptr_cmp_reg_1248.read()));
}

void sha256_done::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(m_axi_hash_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_done::thread_ap_sig_ioackin_m_axi_hash_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_hash_AWREADY.read())) {
        ap_sig_ioackin_m_axi_hash_AWREADY = m_axi_hash_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_hash_AWREADY = ap_const_logic_1;
    }
}

void sha256_done::thread_ap_sig_ioackin_m_axi_hash_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_hash_WREADY.read())) {
        ap_sig_ioackin_m_axi_hash_WREADY = m_axi_hash_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_hash_WREADY = ap_const_logic_1;
    }
}

void sha256_done::thread_exitcond_fu_708_p2() {
    exitcond_fu_708_p2 = (!i_0_in_reg_445.read().is_01() || !ap_const_lv32_7.is_01())? sc_lv<1>(): sc_lv<1>(i_0_in_reg_445.read() == ap_const_lv32_7);
}

void sha256_done::thread_grp_p_hash_fu_579_ap_start() {
    grp_p_hash_fu_579_ap_start = grp_p_hash_fu_579_ap_start_reg.read();
}

void sha256_done::thread_grp_p_hash_fu_579_sha256hash_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_p_hash_fu_579_sha256hash_0_read = sha256hash_reg_465.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_p_hash_fu_579_sha256hash_0_read = sha256hash_0_read.read();
    } else {
        grp_p_hash_fu_579_sha256hash_0_read = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sha256_done::thread_grp_p_hash_fu_579_sha256hash_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_p_hash_fu_579_sha256hash_1_read = sha256hash_1_reg_475.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_p_hash_fu_579_sha256hash_1_read = sha256hash_1_read.read();
    } else {
        grp_p_hash_fu_579_sha256hash_1_read = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sha256_done::thread_grp_p_hash_fu_579_sha256hash_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_p_hash_fu_579_sha256hash_2_read = sha256hash_2_reg_485.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_p_hash_fu_579_sha256hash_2_read = sha256hash_2_read.read();
    } else {
        grp_p_hash_fu_579_sha256hash_2_read = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sha256_done::thread_grp_p_hash_fu_579_sha256hash_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_p_hash_fu_579_sha256hash_3_read = sha256hash_3_reg_495.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_p_hash_fu_579_sha256hash_3_read = sha256hash_3_read.read();
    } else {
        grp_p_hash_fu_579_sha256hash_3_read = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sha256_done::thread_grp_p_hash_fu_579_sha256hash_4_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_p_hash_fu_579_sha256hash_4_read = sha256hash_4_reg_505.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_p_hash_fu_579_sha256hash_4_read = sha256hash_4_read.read();
    } else {
        grp_p_hash_fu_579_sha256hash_4_read = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sha256_done::thread_grp_p_hash_fu_579_sha256hash_5_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_p_hash_fu_579_sha256hash_5_read = sha256hash_5_reg_515.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_p_hash_fu_579_sha256hash_5_read = sha256hash_5_read.read();
    } else {
        grp_p_hash_fu_579_sha256hash_5_read = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sha256_done::thread_grp_p_hash_fu_579_sha256hash_6_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_p_hash_fu_579_sha256hash_6_read = sha256hash_6_reg_525.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_p_hash_fu_579_sha256hash_6_read = sha256hash_6_read.read();
    } else {
        grp_p_hash_fu_579_sha256hash_6_read = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sha256_done::thread_grp_p_hash_fu_579_sha256hash_7_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_p_hash_fu_579_sha256hash_7_read = sha256hash_7_reg_535.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_p_hash_fu_579_sha256hash_7_read = sha256hash_7_read.read();
    } else {
        grp_p_hash_fu_579_sha256hash_7_read = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void sha256_done::thread_hash_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         (esl_seteq<1,1,1>(tmp_2_fu_909_p2.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(ap_const_lv1_1, ptr_cmp_reg_1248.read())))) {
        hash_blk_n_AW = m_axi_hash_AWREADY.read();
    } else {
        hash_blk_n_AW = ap_const_logic_1;
    }
}

void sha256_done::thread_hash_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        hash_blk_n_B = m_axi_hash_BVALID.read();
    } else {
        hash_blk_n_B = ap_const_logic_1;
    }
}

void sha256_done::thread_hash_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_22_reg_1312_pp0_iter1_reg.read()))) {
        hash_blk_n_W = m_axi_hash_WREADY.read();
    } else {
        hash_blk_n_W = ap_const_logic_1;
    }
}

void sha256_done::thread_hash_tmp_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        hash_tmp_address0 =  (sc_lv<5>) (tmp_24_fu_1105_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        hash_tmp_address0 =  (sc_lv<5>) (tmp_19_fu_1080_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        hash_tmp_address0 =  (sc_lv<5>) (tmp_15_fu_1062_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        hash_tmp_address0 =  (sc_lv<5>) (tmp_3_fu_1041_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        hash_tmp_address0 =  (sc_lv<5>) (tmp_9_fu_956_p1.read());
    } else {
        hash_tmp_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void sha256_done::thread_hash_tmp_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        hash_tmp_address1 =  (sc_lv<5>) (tmp_21_fu_1088_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        hash_tmp_address1 =  (sc_lv<5>) (tmp_17_fu_1072_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        hash_tmp_address1 =  (sc_lv<5>) (tmp_13_fu_1049_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        hash_tmp_address1 =  (sc_lv<5>) (tmp_11_fu_980_p1.read());
    } else {
        hash_tmp_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void sha256_done::thread_hash_tmp_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        hash_tmp_ce0 = ap_const_logic_1;
    } else {
        hash_tmp_ce0 = ap_const_logic_0;
    }
}

void sha256_done::thread_hash_tmp_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        hash_tmp_ce1 = ap_const_logic_1;
    } else {
        hash_tmp_ce1 = ap_const_logic_0;
    }
}

void sha256_done::thread_hash_tmp_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        hash_tmp_d0 = tmp_42_reg_1297.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        hash_tmp_d0 = tmp_40_reg_1287.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        hash_tmp_d0 = tmp_36_reg_1266.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        hash_tmp_d0 = tmp_37_fu_945_p1.read();
    } else {
        hash_tmp_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_done::thread_hash_tmp_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        hash_tmp_d1 = tmp_43_reg_1302.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        hash_tmp_d1 = tmp_41_reg_1292.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        hash_tmp_d1 = tmp_39_reg_1282.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        hash_tmp_d1 = tmp_38_fu_967_p1.read();
    } else {
        hash_tmp_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_done::thread_hash_tmp_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ptr_cmp_reg_1248.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_909_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        hash_tmp_we0 = ap_const_logic_1;
    } else {
        hash_tmp_we0 = ap_const_logic_0;
    }
}

void sha256_done::thread_hash_tmp_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ptr_cmp_reg_1248.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_909_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        hash_tmp_we1 = ap_const_logic_1;
    } else {
        hash_tmp_we1 = ap_const_logic_0;
    }
}

void sha256_done::thread_i_1_cast3_fu_905_p1() {
    i_1_cast3_fu_905_p1 = esl_zext<5,3>(i_1_reg_545.read());
}

void sha256_done::thread_i_3_fu_915_p2() {
    i_3_fu_915_p2 = (!i_1_reg_545.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_545.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void sha256_done::thread_i_4_fu_1099_p2() {
    i_4_fu_1099_p2 = (!i_2_reg_568.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_2_reg_568.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void sha256_done::thread_i_fu_702_p2() {
    i_fu_702_p2 = (!i_0_in_reg_445.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_in_reg_445.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_done::thread_j_1_fu_730_p2() {
    j_1_fu_730_p2 = (!j1_reg_454.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j1_reg_454.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void sha256_done::thread_j_2_fu_1035_p2() {
    j_2_fu_1035_p2 = (!ap_const_lv6_38.is_01() || !n_assign_1_reg_557.read().is_01())? sc_lv<6>(): (sc_bigint<6>(ap_const_lv6_38) + sc_biguint<6>(n_assign_1_reg_557.read()));
}

void sha256_done::thread_j_cast_fu_693_p1() {
    j_cast_fu_693_p1 = esl_zext<32,3>(j_fu_689_p1.read());
}

void sha256_done::thread_j_fu_689_p1() {
    j_fu_689_p1 = sha256_len.read().range(3-1, 0);
}

void sha256_done::thread_m_axi_hash_ARADDR() {
    m_axi_hash_ARADDR = ap_const_lv32_0;
}

void sha256_done::thread_m_axi_hash_ARBURST() {
    m_axi_hash_ARBURST = ap_const_lv2_0;
}

void sha256_done::thread_m_axi_hash_ARCACHE() {
    m_axi_hash_ARCACHE = ap_const_lv4_0;
}

void sha256_done::thread_m_axi_hash_ARID() {
    m_axi_hash_ARID = ap_const_lv1_0;
}

void sha256_done::thread_m_axi_hash_ARLEN() {
    m_axi_hash_ARLEN = ap_const_lv32_0;
}

void sha256_done::thread_m_axi_hash_ARLOCK() {
    m_axi_hash_ARLOCK = ap_const_lv2_0;
}

void sha256_done::thread_m_axi_hash_ARPROT() {
    m_axi_hash_ARPROT = ap_const_lv3_0;
}

void sha256_done::thread_m_axi_hash_ARQOS() {
    m_axi_hash_ARQOS = ap_const_lv4_0;
}

void sha256_done::thread_m_axi_hash_ARREGION() {
    m_axi_hash_ARREGION = ap_const_lv4_0;
}

void sha256_done::thread_m_axi_hash_ARSIZE() {
    m_axi_hash_ARSIZE = ap_const_lv3_0;
}

void sha256_done::thread_m_axi_hash_ARUSER() {
    m_axi_hash_ARUSER = ap_const_lv1_0;
}

void sha256_done::thread_m_axi_hash_ARVALID() {
    m_axi_hash_ARVALID = ap_const_logic_0;
}

void sha256_done::thread_m_axi_hash_AWADDR() {
    m_axi_hash_AWADDR = hash_addr_reg_1187.read();
}

void sha256_done::thread_m_axi_hash_AWBURST() {
    m_axi_hash_AWBURST = ap_const_lv2_0;
}

void sha256_done::thread_m_axi_hash_AWCACHE() {
    m_axi_hash_AWCACHE = ap_const_lv4_0;
}

void sha256_done::thread_m_axi_hash_AWID() {
    m_axi_hash_AWID = ap_const_lv1_0;
}

void sha256_done::thread_m_axi_hash_AWLEN() {
    m_axi_hash_AWLEN = ap_const_lv32_20;
}

void sha256_done::thread_m_axi_hash_AWLOCK() {
    m_axi_hash_AWLOCK = ap_const_lv2_0;
}

void sha256_done::thread_m_axi_hash_AWPROT() {
    m_axi_hash_AWPROT = ap_const_lv3_0;
}

void sha256_done::thread_m_axi_hash_AWQOS() {
    m_axi_hash_AWQOS = ap_const_lv4_0;
}

void sha256_done::thread_m_axi_hash_AWREGION() {
    m_axi_hash_AWREGION = ap_const_lv4_0;
}

void sha256_done::thread_m_axi_hash_AWSIZE() {
    m_axi_hash_AWSIZE = ap_const_lv3_0;
}

void sha256_done::thread_m_axi_hash_AWUSER() {
    m_axi_hash_AWUSER = ap_const_lv1_0;
}

void sha256_done::thread_m_axi_hash_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op178_writereq_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_hash_AWREADY.read()))) {
        m_axi_hash_AWVALID = ap_const_logic_1;
    } else {
        m_axi_hash_AWVALID = ap_const_logic_0;
    }
}

void sha256_done::thread_m_axi_hash_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(m_axi_hash_BVALID.read(), ap_const_logic_1))) {
        m_axi_hash_BREADY = ap_const_logic_1;
    } else {
        m_axi_hash_BREADY = ap_const_logic_0;
    }
}

void sha256_done::thread_m_axi_hash_RREADY() {
    m_axi_hash_RREADY = ap_const_logic_0;
}

void sha256_done::thread_m_axi_hash_WDATA() {
    m_axi_hash_WDATA = hash_tmp_load_reg_1326.read();
}

void sha256_done::thread_m_axi_hash_WID() {
    m_axi_hash_WID = ap_const_lv1_0;
}

void sha256_done::thread_m_axi_hash_WLAST() {
    m_axi_hash_WLAST = ap_const_logic_0;
}

void sha256_done::thread_m_axi_hash_WSTRB() {
    m_axi_hash_WSTRB = ap_const_lv1_1;
}

void sha256_done::thread_m_axi_hash_WUSER() {
    m_axi_hash_WUSER = ap_const_lv1_0;
}

void sha256_done::thread_m_axi_hash_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_22_reg_1312_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_hash_WREADY.read()))) {
        m_axi_hash_WVALID = ap_const_logic_1;
    } else {
        m_axi_hash_WVALID = ap_const_logic_0;
    }
}

void sha256_done::thread_ptr_cmp_fu_900_p2() {
    ptr_cmp_fu_900_p2 = (!tmp_10_reg_1182.read().is_01() || !ap_const_lv11_4FE.is_01())? sc_lv<1>(): sc_lv<1>(tmp_10_reg_1182.read() == ap_const_lv11_4FE);
}

void sha256_done::thread_sha256_bits_0_write_1_fu_816_p2() {
    sha256_bits_0_write_1_fu_816_p2 = (!tmp_25_fu_803_p3.read().is_01() || !tmp_32_fu_797_p1.read().is_01())? sc_lv<24>(): (sc_biguint<24>(tmp_25_fu_803_p3.read()) + sc_biguint<24>(tmp_32_fu_797_p1.read()));
}

void sha256_done::thread_sha256_bits_0_write_2_fu_822_p2() {
    sha256_bits_0_write_2_fu_822_p2 = (!tmp_14_fu_789_p3.read().is_01() || !tmp_30_fu_783_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_14_fu_789_p3.read()) + sc_biguint<16>(tmp_30_fu_783_p1.read()));
}

void sha256_done::thread_sha256_bits_0_write_fu_811_p2() {
    sha256_bits_0_write_fu_811_p2 = (!sha256_bits_0_read.read().is_01() || !tmp_18_fu_741_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sha256_bits_0_read.read()) + sc_biguint<32>(tmp_18_fu_741_p2.read()));
}

void sha256_done::thread_sha256_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha256_buf_address0 =  (sc_lv<6>) (ap_const_lv64_38);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_address0 =  (sc_lv<6>) (ap_const_lv64_3A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sha256_buf_address0 =  (sc_lv<6>) (ap_const_lv64_3C);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()) || 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_1206.read())))) {
        sha256_buf_address0 =  (sc_lv<6>) (ap_const_lv64_3F);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_724_p2.read()))) {
        sha256_buf_address0 =  (sc_lv<6>) (tmp_8_fu_736_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_708_p2.read()))) {
        sha256_buf_address0 =  (sc_lv<6>) (tmp_6_fu_714_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        sha256_buf_address0 =  (sc_lv<6>) (tmp_fu_697_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        sha256_buf_address0 = grp_p_hash_fu_579_sha256_buf_address0.read();
    } else {
        sha256_buf_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void sha256_done::thread_sha256_buf_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha256_buf_address1 =  (sc_lv<6>) (ap_const_lv64_39);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_address1 =  (sc_lv<6>) (ap_const_lv64_3B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sha256_buf_address1 =  (sc_lv<6>) (ap_const_lv64_3D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha256_buf_address1 =  (sc_lv<6>) (ap_const_lv64_3E);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        sha256_buf_address1 = grp_p_hash_fu_579_sha256_buf_address1.read();
    } else {
        sha256_buf_address1 =  (sc_lv<6>) ("XXXXXX");
    }
}

void sha256_done::thread_sha256_buf_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()) || 
           esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_1206.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_708_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_724_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sha256_buf_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        sha256_buf_ce0 = grp_p_hash_fu_579_sha256_buf_ce0.read();
    } else {
        sha256_buf_ce0 = ap_const_logic_0;
    }
}

void sha256_done::thread_sha256_buf_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sha256_buf_ce1 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        sha256_buf_ce1 = grp_p_hash_fu_579_sha256_buf_ce1.read();
    } else {
        sha256_buf_ce1 = ap_const_logic_0;
    }
}

void sha256_done::thread_sha256_buf_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha256_buf_d0 = tmp_48_i3_reg_1243.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_d0 = tmp_48_i9_reg_1233.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sha256_buf_d0 = tmp_48_i6_reg_1223.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()) || 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_1206.read())))) {
        sha256_buf_d0 = tmp_48_i_fu_828_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_708_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_724_p2.read())))) {
        sha256_buf_d0 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        sha256_buf_d0 = ap_const_lv8_80;
    } else {
        sha256_buf_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_done::thread_sha256_buf_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha256_buf_d1 = tmp_48_i1_reg_1238.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sha256_buf_d1 = tmp_34_reg_1228.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sha256_buf_d1 = tmp_48_i4_reg_1218.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha256_buf_d1 = sha256_bits_0_write_2_fu_822_p2.read().range(15, 8);
    } else {
        sha256_buf_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_done::thread_sha256_buf_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()) || 
           esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_1206.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_708_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_reg_1206.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_724_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sha256_buf_we0 = ap_const_logic_1;
    } else {
        sha256_buf_we0 = ap_const_logic_0;
    }
}

void sha256_done::thread_sha256_buf_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()) || 
           esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_1206.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sha256_buf_we1 = ap_const_logic_1;
    } else {
        sha256_buf_we1 = ap_const_logic_0;
    }
}

void sha256_done::thread_tmp_10_fu_679_p0() {
    tmp_10_fu_679_p0 = hash_offset.read();
}

void sha256_done::thread_tmp_10_fu_679_p1() {
    tmp_10_fu_679_p1 = tmp_10_fu_679_p0.read().range(11-1, 0);
}

void sha256_done::thread_tmp_11_fu_980_p1() {
    tmp_11_fu_980_p1 = esl_zext<64,4>(tmp_27_fu_972_p3.read());
}

void sha256_done::thread_tmp_12_cast9_fu_1046_p1() {
    tmp_12_cast9_fu_1046_p1 = esl_sext<4,3>(tmp_4_reg_1271.read());
}

void sha256_done::thread_tmp_12_fu_775_p3() {
    tmp_12_fu_775_p3 = esl_concat<5,3>(tmp_26_fu_772_p1.read(), ap_const_lv3_0);
}

void sha256_done::thread_tmp_13_fu_1049_p1() {
    tmp_13_fu_1049_p1 = esl_zext<64,4>(tmp_12_cast9_fu_1046_p1.read());
}

void sha256_done::thread_tmp_14_fu_789_p3() {
    tmp_14_fu_789_p3 = esl_concat<13,3>(tmp_31_fu_786_p1.read(), ap_const_lv3_0);
}

void sha256_done::thread_tmp_15_fu_1062_p1() {
    tmp_15_fu_1062_p1 = esl_zext<64,5>(tmp_28_fu_1054_p3.read());
}

void sha256_done::thread_tmp_16_fu_1067_p2() {
    tmp_16_fu_1067_p2 = (!ap_const_lv5_14.is_01() || !i_1_cast3_reg_1252.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_14) + sc_biguint<5>(i_1_cast3_reg_1252.read()));
}

void sha256_done::thread_tmp_17_fu_1072_p1() {
    tmp_17_fu_1072_p1 = esl_zext<64,5>(tmp_16_fu_1067_p2.read());
}

void sha256_done::thread_tmp_18_cast8_fu_1077_p1() {
    tmp_18_cast8_fu_1077_p1 = esl_sext<5,4>(tmp_27_reg_1277.read());
}

void sha256_done::thread_tmp_18_fu_741_p2() {
    tmp_18_fu_741_p2 = (!ap_const_lv32_3.is_01())? sc_lv<32>(): sha256_len.read() << (unsigned short)ap_const_lv32_3.to_uint();
}

void sha256_done::thread_tmp_19_fu_1080_p1() {
    tmp_19_fu_1080_p1 = esl_zext<64,5>(tmp_18_cast8_fu_1077_p1.read());
}

void sha256_done::thread_tmp_20_cast7_fu_1085_p1() {
    tmp_20_cast7_fu_1085_p1 = esl_sext<5,3>(tmp_4_reg_1271.read());
}

void sha256_done::thread_tmp_20_fu_769_p1() {
    tmp_20_fu_769_p1 = sha256_bits_0_read.read().range(8-1, 0);
}

void sha256_done::thread_tmp_21_fu_1088_p1() {
    tmp_21_fu_1088_p1 = esl_zext<64,5>(tmp_20_cast7_fu_1085_p1.read());
}

void sha256_done::thread_tmp_22_fu_1093_p2() {
    tmp_22_fu_1093_p2 = (!i_2_reg_568.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_568.read() == ap_const_lv6_20);
}

void sha256_done::thread_tmp_24_fu_1105_p1() {
    tmp_24_fu_1105_p1 = esl_zext<64,6>(i_2_reg_568.read());
}

void sha256_done::thread_tmp_25_fu_803_p3() {
    tmp_25_fu_803_p3 = esl_concat<21,3>(tmp_33_fu_800_p1.read(), ap_const_lv3_0);
}

void sha256_done::thread_tmp_26_fu_772_p1() {
    tmp_26_fu_772_p1 = sha256_len.read().range(5-1, 0);
}

void sha256_done::thread_tmp_27_fu_972_p3() {
    tmp_27_fu_972_p3 = esl_concat<1,3>(ap_const_lv1_1, i_1_reg_545.read());
}

void sha256_done::thread_tmp_28_fu_1054_p3() {
    tmp_28_fu_1054_p3 = esl_concat<2,3>(ap_const_lv2_2, i_1_reg_545.read());
}

void sha256_done::thread_tmp_2_fu_909_p2() {
    tmp_2_fu_909_p2 = (!i_1_reg_545.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_545.read() == ap_const_lv3_4);
}

void sha256_done::thread_tmp_30_fu_783_p1() {
    tmp_30_fu_783_p1 = sha256_bits_0_read.read().range(16-1, 0);
}

void sha256_done::thread_tmp_31_fu_786_p1() {
    tmp_31_fu_786_p1 = sha256_len.read().range(13-1, 0);
}

void sha256_done::thread_tmp_32_fu_797_p1() {
    tmp_32_fu_797_p1 = sha256_bits_0_read.read().range(24-1, 0);
}

void sha256_done::thread_tmp_33_fu_800_p1() {
    tmp_33_fu_800_p1 = sha256_len.read().range(21-1, 0);
}

void sha256_done::thread_tmp_34_fu_866_p1() {
    tmp_34_fu_866_p1 = x_assign_1_fu_762_p3.read().range(8-1, 0);
}

void sha256_done::thread_tmp_35_fu_921_p1() {
    tmp_35_fu_921_p1 = n_assign_1_reg_557.read().range(5-1, 0);
}

void sha256_done::thread_tmp_36_fu_935_p1() {
    tmp_36_fu_935_p1 = tmp_i6_fu_929_p2.read().range(8-1, 0);
}

void sha256_done::thread_tmp_37_fu_945_p1() {
    tmp_37_fu_945_p1 = tmp_i7_fu_939_p2.read().range(8-1, 0);
}

void sha256_done::thread_tmp_38_fu_967_p1() {
    tmp_38_fu_967_p1 = tmp_i9_fu_961_p2.read().range(8-1, 0);
}

void sha256_done::thread_tmp_39_fu_991_p1() {
    tmp_39_fu_991_p1 = tmp_i1_fu_985_p2.read().range(8-1, 0);
}

void sha256_done::thread_tmp_3_fu_1041_p1() {
    tmp_3_fu_1041_p1 = esl_zext<64,3>(i_1_reg_545.read());
}

void sha256_done::thread_tmp_40_fu_1001_p1() {
    tmp_40_fu_1001_p1 = tmp_i2_fu_995_p2.read().range(8-1, 0);
}

void sha256_done::thread_tmp_41_fu_1011_p1() {
    tmp_41_fu_1011_p1 = tmp_i3_fu_1005_p2.read().range(8-1, 0);
}

void sha256_done::thread_tmp_42_fu_1021_p1() {
    tmp_42_fu_1021_p1 = tmp_i4_fu_1015_p2.read().range(8-1, 0);
}

void sha256_done::thread_tmp_43_fu_1031_p1() {
    tmp_43_fu_1031_p1 = tmp_i5_fu_1025_p2.read().range(8-1, 0);
}

void sha256_done::thread_tmp_48_i_fu_828_p2() {
    tmp_48_i_fu_828_p2 = (!tmp_12_fu_775_p3.read().is_01() || !tmp_20_fu_769_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_12_fu_775_p3.read()) + sc_biguint<8>(tmp_20_fu_769_p1.read()));
}

void sha256_done::thread_tmp_4_fu_950_p2() {
    tmp_4_fu_950_p2 = (i_1_reg_545.read() ^ ap_const_lv3_4);
}

void sha256_done::thread_tmp_5_fu_719_p2() {
    tmp_5_fu_719_p2 = (!sha256_len.read().is_01() || !ap_const_lv32_37.is_01())? sc_lv<1>(): (sc_biguint<32>(sha256_len.read()) > sc_biguint<32>(ap_const_lv32_37));
}

void sha256_done::thread_tmp_6_fu_714_p1() {
    tmp_6_fu_714_p1 = esl_zext<64,32>(i_fu_702_p2.read());
}

void sha256_done::thread_tmp_7_fu_724_p2() {
    tmp_7_fu_724_p2 = (!j1_reg_454.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(j1_reg_454.read() == ap_const_lv4_8);
}

void sha256_done::thread_tmp_89_i_fu_757_p2() {
    tmp_89_i_fu_757_p2 = (!ap_const_lv32_1.is_01() || !sha256_bits_1_read.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(sha256_bits_1_read.read()));
}

void sha256_done::thread_tmp_8_fu_736_p1() {
    tmp_8_fu_736_p1 = esl_zext<64,4>(j1_reg_454.read());
}

void sha256_done::thread_tmp_9_fu_956_p1() {
    tmp_9_fu_956_p1 = esl_zext<64,3>(tmp_4_fu_950_p2.read());
}

void sha256_done::thread_tmp_fu_697_p1() {
    tmp_fu_697_p1 = esl_zext<64,3>(j_fu_689_p1.read());
}

void sha256_done::thread_tmp_i1_cast_fu_925_p1() {
    tmp_i1_cast_fu_925_p1 = esl_zext<32,5>(tmp_35_fu_921_p1.read());
}

void sha256_done::thread_tmp_i1_fu_985_p2() {
    tmp_i1_fu_985_p2 = (!tmp_i1_cast_fu_925_p1.read().is_01())? sc_lv<32>(): reg_650.read() >> (unsigned short)tmp_i1_cast_fu_925_p1.read().to_uint();
}

void sha256_done::thread_tmp_i2_fu_995_p2() {
    tmp_i2_fu_995_p2 = (!tmp_i1_cast_fu_925_p1.read().is_01())? sc_lv<32>(): reg_655.read() >> (unsigned short)tmp_i1_cast_fu_925_p1.read().to_uint();
}

void sha256_done::thread_tmp_i3_fu_1005_p2() {
    tmp_i3_fu_1005_p2 = (!tmp_i1_cast_fu_925_p1.read().is_01())? sc_lv<32>(): reg_660.read() >> (unsigned short)tmp_i1_cast_fu_925_p1.read().to_uint();
}

void sha256_done::thread_tmp_i4_fu_1015_p2() {
    tmp_i4_fu_1015_p2 = (!tmp_i1_cast_fu_925_p1.read().is_01())? sc_lv<32>(): reg_665.read() >> (unsigned short)tmp_i1_cast_fu_925_p1.read().to_uint();
}

void sha256_done::thread_tmp_i5_fu_1025_p2() {
    tmp_i5_fu_1025_p2 = (!tmp_i1_cast_fu_925_p1.read().is_01())? sc_lv<32>(): reg_670.read() >> (unsigned short)tmp_i1_cast_fu_925_p1.read().to_uint();
}

void sha256_done::thread_tmp_i6_fu_929_p2() {
    tmp_i6_fu_929_p2 = (!tmp_i1_cast_fu_925_p1.read().is_01())? sc_lv<32>(): reg_635.read() >> (unsigned short)tmp_i1_cast_fu_925_p1.read().to_uint();
}

void sha256_done::thread_tmp_i7_fu_939_p2() {
    tmp_i7_fu_939_p2 = (!tmp_i1_cast_fu_925_p1.read().is_01())? sc_lv<32>(): reg_640.read() >> (unsigned short)tmp_i1_cast_fu_925_p1.read().to_uint();
}

void sha256_done::thread_tmp_i9_fu_961_p2() {
    tmp_i9_fu_961_p2 = (!tmp_i1_cast_fu_925_p1.read().is_01())? sc_lv<32>(): reg_645.read() >> (unsigned short)tmp_i1_cast_fu_925_p1.read().to_uint();
}

void sha256_done::thread_tmp_i_9_fu_752_p2() {
    tmp_i_9_fu_752_p2 = (!sha256_bits_0_read.read().is_01() || !tmp_i_fu_746_p2.read().is_01())? sc_lv<1>(): (sc_biguint<32>(sha256_bits_0_read.read()) > sc_biguint<32>(tmp_i_fu_746_p2.read()));
}

void sha256_done::thread_tmp_i_fu_746_p2() {
    tmp_i_fu_746_p2 = (tmp_18_fu_741_p2.read() ^ ap_const_lv32_FFFFFFFF);
}

void sha256_done::thread_tmp_s_fu_675_p0() {
    tmp_s_fu_675_p0 = hash_offset.read();
}

void sha256_done::thread_tmp_s_fu_675_p1() {
    tmp_s_fu_675_p1 = esl_sext<64,32>(tmp_s_fu_675_p0.read());
}

void sha256_done::thread_x_assign_1_fu_762_p3() {
    x_assign_1_fu_762_p3 = (!tmp_i_9_fu_752_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_i_9_fu_752_p2.read()[0].to_bool())? tmp_89_i_fu_757_p2.read(): sha256_bits_1_read.read());
}

void sha256_done::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_719_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_708_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_719_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_p_hash_fu_579_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_724_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_1206.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(grp_p_hash_fu_579_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && (esl_seteq<1,1,1>(tmp_2_fu_909_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(ap_const_lv1_1, ptr_cmp_reg_1248.read())) && esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_block_state10_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, ptr_cmp_reg_1248.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_909_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 8192 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_22_fu_1093_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_22_fu_1093_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(m_axi_hash_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<19>) ("XXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

