// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3517,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=5058,HLS_SYN_LUT=8774,HLS_VERSION=2018_3}" *)

module sha256 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY,
        m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY,
        m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST,
        m_axi_INPUT_r_RID,
        m_axi_INPUT_r_RUSER,
        m_axi_INPUT_r_RRESP,
        m_axi_INPUT_r_BVALID,
        m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP,
        m_axi_INPUT_r_BID,
        m_axi_INPUT_r_BUSER,
        m_axi_OUTPUT_r_AWVALID,
        m_axi_OUTPUT_r_AWREADY,
        m_axi_OUTPUT_r_AWADDR,
        m_axi_OUTPUT_r_AWID,
        m_axi_OUTPUT_r_AWLEN,
        m_axi_OUTPUT_r_AWSIZE,
        m_axi_OUTPUT_r_AWBURST,
        m_axi_OUTPUT_r_AWLOCK,
        m_axi_OUTPUT_r_AWCACHE,
        m_axi_OUTPUT_r_AWPROT,
        m_axi_OUTPUT_r_AWQOS,
        m_axi_OUTPUT_r_AWREGION,
        m_axi_OUTPUT_r_AWUSER,
        m_axi_OUTPUT_r_WVALID,
        m_axi_OUTPUT_r_WREADY,
        m_axi_OUTPUT_r_WDATA,
        m_axi_OUTPUT_r_WSTRB,
        m_axi_OUTPUT_r_WLAST,
        m_axi_OUTPUT_r_WID,
        m_axi_OUTPUT_r_WUSER,
        m_axi_OUTPUT_r_ARVALID,
        m_axi_OUTPUT_r_ARREADY,
        m_axi_OUTPUT_r_ARADDR,
        m_axi_OUTPUT_r_ARID,
        m_axi_OUTPUT_r_ARLEN,
        m_axi_OUTPUT_r_ARSIZE,
        m_axi_OUTPUT_r_ARBURST,
        m_axi_OUTPUT_r_ARLOCK,
        m_axi_OUTPUT_r_ARCACHE,
        m_axi_OUTPUT_r_ARPROT,
        m_axi_OUTPUT_r_ARQOS,
        m_axi_OUTPUT_r_ARREGION,
        m_axi_OUTPUT_r_ARUSER,
        m_axi_OUTPUT_r_RVALID,
        m_axi_OUTPUT_r_RREADY,
        m_axi_OUTPUT_r_RDATA,
        m_axi_OUTPUT_r_RLAST,
        m_axi_OUTPUT_r_RID,
        m_axi_OUTPUT_r_RUSER,
        m_axi_OUTPUT_r_RRESP,
        m_axi_OUTPUT_r_BVALID,
        m_axi_OUTPUT_r_BREADY,
        m_axi_OUTPUT_r_BRESP,
        m_axi_OUTPUT_r_BID,
        m_axi_OUTPUT_r_BUSER,
        s_axi_ctrl_bus_AWVALID,
        s_axi_ctrl_bus_AWREADY,
        s_axi_ctrl_bus_AWADDR,
        s_axi_ctrl_bus_WVALID,
        s_axi_ctrl_bus_WREADY,
        s_axi_ctrl_bus_WDATA,
        s_axi_ctrl_bus_WSTRB,
        s_axi_ctrl_bus_ARVALID,
        s_axi_ctrl_bus_ARREADY,
        s_axi_ctrl_bus_ARADDR,
        s_axi_ctrl_bus_RVALID,
        s_axi_ctrl_bus_RREADY,
        s_axi_ctrl_bus_RDATA,
        s_axi_ctrl_bus_RRESP,
        s_axi_ctrl_bus_BVALID,
        s_axi_ctrl_bus_BREADY,
        s_axi_ctrl_bus_BRESP
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_INPUT_r_AWVALID;
input   m_axi_INPUT_r_AWREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_AWADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_AWID;
output  [7:0] m_axi_INPUT_r_AWLEN;
output  [2:0] m_axi_INPUT_r_AWSIZE;
output  [1:0] m_axi_INPUT_r_AWBURST;
output  [1:0] m_axi_INPUT_r_AWLOCK;
output  [3:0] m_axi_INPUT_r_AWCACHE;
output  [2:0] m_axi_INPUT_r_AWPROT;
output  [3:0] m_axi_INPUT_r_AWQOS;
output  [3:0] m_axi_INPUT_r_AWREGION;
output  [C_M_AXI_INPUT_R_AWUSER_WIDTH - 1:0] m_axi_INPUT_r_AWUSER;
output   m_axi_INPUT_r_WVALID;
input   m_axi_INPUT_r_WREADY;
output  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_WDATA;
output  [C_M_AXI_INPUT_R_WSTRB_WIDTH - 1:0] m_axi_INPUT_r_WSTRB;
output   m_axi_INPUT_r_WLAST;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_WID;
output  [C_M_AXI_INPUT_R_WUSER_WIDTH - 1:0] m_axi_INPUT_r_WUSER;
output   m_axi_INPUT_r_ARVALID;
input   m_axi_INPUT_r_ARREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_ARADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_ARID;
output  [7:0] m_axi_INPUT_r_ARLEN;
output  [2:0] m_axi_INPUT_r_ARSIZE;
output  [1:0] m_axi_INPUT_r_ARBURST;
output  [1:0] m_axi_INPUT_r_ARLOCK;
output  [3:0] m_axi_INPUT_r_ARCACHE;
output  [2:0] m_axi_INPUT_r_ARPROT;
output  [3:0] m_axi_INPUT_r_ARQOS;
output  [3:0] m_axi_INPUT_r_ARREGION;
output  [C_M_AXI_INPUT_R_ARUSER_WIDTH - 1:0] m_axi_INPUT_r_ARUSER;
input   m_axi_INPUT_r_RVALID;
output   m_axi_INPUT_r_RREADY;
input  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_RDATA;
input   m_axi_INPUT_r_RLAST;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_RID;
input  [C_M_AXI_INPUT_R_RUSER_WIDTH - 1:0] m_axi_INPUT_r_RUSER;
input  [1:0] m_axi_INPUT_r_RRESP;
input   m_axi_INPUT_r_BVALID;
output   m_axi_INPUT_r_BREADY;
input  [1:0] m_axi_INPUT_r_BRESP;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_BID;
input  [C_M_AXI_INPUT_R_BUSER_WIDTH - 1:0] m_axi_INPUT_r_BUSER;
output   m_axi_OUTPUT_r_AWVALID;
input   m_axi_OUTPUT_r_AWREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_AWADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_AWID;
output  [7:0] m_axi_OUTPUT_r_AWLEN;
output  [2:0] m_axi_OUTPUT_r_AWSIZE;
output  [1:0] m_axi_OUTPUT_r_AWBURST;
output  [1:0] m_axi_OUTPUT_r_AWLOCK;
output  [3:0] m_axi_OUTPUT_r_AWCACHE;
output  [2:0] m_axi_OUTPUT_r_AWPROT;
output  [3:0] m_axi_OUTPUT_r_AWQOS;
output  [3:0] m_axi_OUTPUT_r_AWREGION;
output  [C_M_AXI_OUTPUT_R_AWUSER_WIDTH - 1:0] m_axi_OUTPUT_r_AWUSER;
output   m_axi_OUTPUT_r_WVALID;
input   m_axi_OUTPUT_r_WREADY;
output  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_WDATA;
output  [C_M_AXI_OUTPUT_R_WSTRB_WIDTH - 1:0] m_axi_OUTPUT_r_WSTRB;
output   m_axi_OUTPUT_r_WLAST;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_WID;
output  [C_M_AXI_OUTPUT_R_WUSER_WIDTH - 1:0] m_axi_OUTPUT_r_WUSER;
output   m_axi_OUTPUT_r_ARVALID;
input   m_axi_OUTPUT_r_ARREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_ARADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_ARID;
output  [7:0] m_axi_OUTPUT_r_ARLEN;
output  [2:0] m_axi_OUTPUT_r_ARSIZE;
output  [1:0] m_axi_OUTPUT_r_ARBURST;
output  [1:0] m_axi_OUTPUT_r_ARLOCK;
output  [3:0] m_axi_OUTPUT_r_ARCACHE;
output  [2:0] m_axi_OUTPUT_r_ARPROT;
output  [3:0] m_axi_OUTPUT_r_ARQOS;
output  [3:0] m_axi_OUTPUT_r_ARREGION;
output  [C_M_AXI_OUTPUT_R_ARUSER_WIDTH - 1:0] m_axi_OUTPUT_r_ARUSER;
input   m_axi_OUTPUT_r_RVALID;
output   m_axi_OUTPUT_r_RREADY;
input  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_RDATA;
input   m_axi_OUTPUT_r_RLAST;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_RID;
input  [C_M_AXI_OUTPUT_R_RUSER_WIDTH - 1:0] m_axi_OUTPUT_r_RUSER;
input  [1:0] m_axi_OUTPUT_r_RRESP;
input   m_axi_OUTPUT_r_BVALID;
output   m_axi_OUTPUT_r_BREADY;
input  [1:0] m_axi_OUTPUT_r_BRESP;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_BID;
input  [C_M_AXI_OUTPUT_R_BUSER_WIDTH - 1:0] m_axi_OUTPUT_r_BUSER;
input   s_axi_ctrl_bus_AWVALID;
output   s_axi_ctrl_bus_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_AWADDR;
input   s_axi_ctrl_bus_WVALID;
output   s_axi_ctrl_bus_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_ctrl_bus_WSTRB;
input   s_axi_ctrl_bus_ARVALID;
output   s_axi_ctrl_bus_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_ARADDR;
output   s_axi_ctrl_bus_RVALID;
input   s_axi_ctrl_bus_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_RDATA;
output  [1:0] s_axi_ctrl_bus_RRESP;
output   s_axi_ctrl_bus_BVALID;
input   s_axi_ctrl_bus_BREADY;
output  [1:0] s_axi_ctrl_bus_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] msg;
reg   [31:0] msg_0_data_reg;
reg    msg_0_vld_reg;
reg    msg_0_ack_out;
wire   [31:0] len;
reg   [31:0] len_0_data_reg;
reg    len_0_vld_reg;
reg    len_0_ack_out;
wire   [31:0] hash;
reg   [31:0] hash_0_data_reg;
reg    hash_0_vld_reg;
reg    hash_0_ack_out;
wire    INPUT_r_AWREADY;
wire    INPUT_r_WREADY;
reg    INPUT_r_ARVALID;
wire    INPUT_r_ARREADY;
wire    INPUT_r_RVALID;
reg    INPUT_r_RREADY;
wire   [7:0] INPUT_r_RDATA;
wire    INPUT_r_RLAST;
wire   [0:0] INPUT_r_RID;
wire   [0:0] INPUT_r_RUSER;
wire   [1:0] INPUT_r_RRESP;
wire    INPUT_r_BVALID;
wire   [1:0] INPUT_r_BRESP;
wire   [0:0] INPUT_r_BID;
wire   [0:0] INPUT_r_BUSER;
reg    OUTPUT_r_AWVALID;
wire    OUTPUT_r_AWREADY;
reg    OUTPUT_r_WVALID;
wire    OUTPUT_r_WREADY;
wire    OUTPUT_r_ARREADY;
wire    OUTPUT_r_RVALID;
wire   [7:0] OUTPUT_r_RDATA;
wire    OUTPUT_r_RLAST;
wire   [0:0] OUTPUT_r_RID;
wire   [0:0] OUTPUT_r_RUSER;
wire   [1:0] OUTPUT_r_RRESP;
wire    OUTPUT_r_BVALID;
reg    OUTPUT_r_BREADY;
wire   [1:0] OUTPUT_r_BRESP;
wire   [0:0] OUTPUT_r_BID;
wire   [0:0] OUTPUT_r_BUSER;
reg   [31:0] hash_read_reg_207;
wire    ap_CS_fsm_state2;
reg   [31:0] len_read_reg_212;
reg   [31:0] msg_read_reg_217;
wire   [5:0] indvarinc_fu_146_p2;
wire    ap_CS_fsm_state3;
reg   [31:0] sha256_bits_1_reg_230;
wire    ap_CS_fsm_state5;
wire    grp_sha256_hash_fu_135_ap_ready;
wire    grp_sha256_hash_fu_135_ap_done;
reg   [31:0] sha256_len_0_reg_235;
reg   [31:0] sha256hash_0_reg_240;
reg   [31:0] sha256hash_1_reg_245;
reg   [31:0] sha256hash_2_reg_250;
reg   [31:0] sha256hash_3_reg_255;
reg   [31:0] sha256hash_4_reg_260;
reg   [31:0] sha256hash_5_reg_265;
reg   [31:0] sha256hash_6_reg_270;
reg   [31:0] sha256hash_7_reg_275;
reg   [31:0] sha256_bits_0_reg_280;
reg   [5:0] sha256_buf_address0;
reg    sha256_buf_ce0;
reg    sha256_buf_we0;
reg   [7:0] sha256_buf_d0;
wire   [7:0] sha256_buf_q0;
reg   [5:0] sha256_buf_address1;
reg    sha256_buf_ce1;
reg    sha256_buf_we1;
wire   [7:0] sha256_buf_q1;
wire    grp_sha256_done_fu_114_ap_start;
wire    grp_sha256_done_fu_114_ap_done;
wire    grp_sha256_done_fu_114_ap_idle;
wire    grp_sha256_done_fu_114_ap_ready;
wire   [5:0] grp_sha256_done_fu_114_sha256_buf_address0;
wire    grp_sha256_done_fu_114_sha256_buf_ce0;
wire    grp_sha256_done_fu_114_sha256_buf_we0;
wire   [7:0] grp_sha256_done_fu_114_sha256_buf_d0;
wire   [5:0] grp_sha256_done_fu_114_sha256_buf_address1;
wire    grp_sha256_done_fu_114_sha256_buf_ce1;
wire    grp_sha256_done_fu_114_sha256_buf_we1;
wire   [7:0] grp_sha256_done_fu_114_sha256_buf_d1;
wire    grp_sha256_done_fu_114_m_axi_hash_AWVALID;
wire   [31:0] grp_sha256_done_fu_114_m_axi_hash_AWADDR;
wire   [0:0] grp_sha256_done_fu_114_m_axi_hash_AWID;
wire   [31:0] grp_sha256_done_fu_114_m_axi_hash_AWLEN;
wire   [2:0] grp_sha256_done_fu_114_m_axi_hash_AWSIZE;
wire   [1:0] grp_sha256_done_fu_114_m_axi_hash_AWBURST;
wire   [1:0] grp_sha256_done_fu_114_m_axi_hash_AWLOCK;
wire   [3:0] grp_sha256_done_fu_114_m_axi_hash_AWCACHE;
wire   [2:0] grp_sha256_done_fu_114_m_axi_hash_AWPROT;
wire   [3:0] grp_sha256_done_fu_114_m_axi_hash_AWQOS;
wire   [3:0] grp_sha256_done_fu_114_m_axi_hash_AWREGION;
wire   [0:0] grp_sha256_done_fu_114_m_axi_hash_AWUSER;
wire    grp_sha256_done_fu_114_m_axi_hash_WVALID;
wire   [7:0] grp_sha256_done_fu_114_m_axi_hash_WDATA;
wire   [0:0] grp_sha256_done_fu_114_m_axi_hash_WSTRB;
wire    grp_sha256_done_fu_114_m_axi_hash_WLAST;
wire   [0:0] grp_sha256_done_fu_114_m_axi_hash_WID;
wire   [0:0] grp_sha256_done_fu_114_m_axi_hash_WUSER;
wire    grp_sha256_done_fu_114_m_axi_hash_ARVALID;
wire   [31:0] grp_sha256_done_fu_114_m_axi_hash_ARADDR;
wire   [0:0] grp_sha256_done_fu_114_m_axi_hash_ARID;
wire   [31:0] grp_sha256_done_fu_114_m_axi_hash_ARLEN;
wire   [2:0] grp_sha256_done_fu_114_m_axi_hash_ARSIZE;
wire   [1:0] grp_sha256_done_fu_114_m_axi_hash_ARBURST;
wire   [1:0] grp_sha256_done_fu_114_m_axi_hash_ARLOCK;
wire   [3:0] grp_sha256_done_fu_114_m_axi_hash_ARCACHE;
wire   [2:0] grp_sha256_done_fu_114_m_axi_hash_ARPROT;
wire   [3:0] grp_sha256_done_fu_114_m_axi_hash_ARQOS;
wire   [3:0] grp_sha256_done_fu_114_m_axi_hash_ARREGION;
wire   [0:0] grp_sha256_done_fu_114_m_axi_hash_ARUSER;
wire    grp_sha256_done_fu_114_m_axi_hash_RREADY;
wire    grp_sha256_done_fu_114_m_axi_hash_BREADY;
wire    grp_sha256_hash_fu_135_ap_start;
wire    grp_sha256_hash_fu_135_ap_idle;
wire   [5:0] grp_sha256_hash_fu_135_sha256_buf_address0;
wire    grp_sha256_hash_fu_135_sha256_buf_ce0;
wire    grp_sha256_hash_fu_135_sha256_buf_we0;
wire   [7:0] grp_sha256_hash_fu_135_sha256_buf_d0;
wire   [5:0] grp_sha256_hash_fu_135_sha256_buf_address1;
wire    grp_sha256_hash_fu_135_sha256_buf_ce1;
wire    grp_sha256_hash_fu_135_m_axi_data_AWVALID;
wire   [31:0] grp_sha256_hash_fu_135_m_axi_data_AWADDR;
wire   [0:0] grp_sha256_hash_fu_135_m_axi_data_AWID;
wire   [31:0] grp_sha256_hash_fu_135_m_axi_data_AWLEN;
wire   [2:0] grp_sha256_hash_fu_135_m_axi_data_AWSIZE;
wire   [1:0] grp_sha256_hash_fu_135_m_axi_data_AWBURST;
wire   [1:0] grp_sha256_hash_fu_135_m_axi_data_AWLOCK;
wire   [3:0] grp_sha256_hash_fu_135_m_axi_data_AWCACHE;
wire   [2:0] grp_sha256_hash_fu_135_m_axi_data_AWPROT;
wire   [3:0] grp_sha256_hash_fu_135_m_axi_data_AWQOS;
wire   [3:0] grp_sha256_hash_fu_135_m_axi_data_AWREGION;
wire   [0:0] grp_sha256_hash_fu_135_m_axi_data_AWUSER;
wire    grp_sha256_hash_fu_135_m_axi_data_WVALID;
wire   [7:0] grp_sha256_hash_fu_135_m_axi_data_WDATA;
wire   [0:0] grp_sha256_hash_fu_135_m_axi_data_WSTRB;
wire    grp_sha256_hash_fu_135_m_axi_data_WLAST;
wire   [0:0] grp_sha256_hash_fu_135_m_axi_data_WID;
wire   [0:0] grp_sha256_hash_fu_135_m_axi_data_WUSER;
wire    grp_sha256_hash_fu_135_m_axi_data_ARVALID;
wire   [31:0] grp_sha256_hash_fu_135_m_axi_data_ARADDR;
wire   [0:0] grp_sha256_hash_fu_135_m_axi_data_ARID;
wire   [31:0] grp_sha256_hash_fu_135_m_axi_data_ARLEN;
wire   [2:0] grp_sha256_hash_fu_135_m_axi_data_ARSIZE;
wire   [1:0] grp_sha256_hash_fu_135_m_axi_data_ARBURST;
wire   [1:0] grp_sha256_hash_fu_135_m_axi_data_ARLOCK;
wire   [3:0] grp_sha256_hash_fu_135_m_axi_data_ARCACHE;
wire   [2:0] grp_sha256_hash_fu_135_m_axi_data_ARPROT;
wire   [3:0] grp_sha256_hash_fu_135_m_axi_data_ARQOS;
wire   [3:0] grp_sha256_hash_fu_135_m_axi_data_ARREGION;
wire   [0:0] grp_sha256_hash_fu_135_m_axi_data_ARUSER;
wire    grp_sha256_hash_fu_135_m_axi_data_RREADY;
wire    grp_sha256_hash_fu_135_m_axi_data_BREADY;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_0;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_1;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_2;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_3;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_4;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_5;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_6;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_7;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_8;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_9;
wire   [31:0] grp_sha256_hash_fu_135_ap_return_10;
reg   [5:0] invdar_reg_103;
wire   [0:0] tmp_s_fu_157_p2;
reg    grp_sha256_done_fu_114_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    grp_sha256_hash_fu_135_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_fu_152_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 msg_0_data_reg = 32'd0;
#0 msg_0_vld_reg = 1'b0;
#0 len_0_data_reg = 32'd0;
#0 len_0_vld_reg = 1'b0;
#0 hash_0_data_reg = 32'd0;
#0 hash_0_vld_reg = 1'b0;
#0 grp_sha256_done_fu_114_ap_start_reg = 1'b0;
#0 grp_sha256_hash_fu_135_ap_start_reg = 1'b0;
end

sha256_ctrl_bus_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
sha256_ctrl_bus_s_axi_U(
    .AWVALID(s_axi_ctrl_bus_AWVALID),
    .AWREADY(s_axi_ctrl_bus_AWREADY),
    .AWADDR(s_axi_ctrl_bus_AWADDR),
    .WVALID(s_axi_ctrl_bus_WVALID),
    .WREADY(s_axi_ctrl_bus_WREADY),
    .WDATA(s_axi_ctrl_bus_WDATA),
    .WSTRB(s_axi_ctrl_bus_WSTRB),
    .ARVALID(s_axi_ctrl_bus_ARVALID),
    .ARREADY(s_axi_ctrl_bus_ARREADY),
    .ARADDR(s_axi_ctrl_bus_ARADDR),
    .RVALID(s_axi_ctrl_bus_RVALID),
    .RREADY(s_axi_ctrl_bus_RREADY),
    .RDATA(s_axi_ctrl_bus_RDATA),
    .RRESP(s_axi_ctrl_bus_RRESP),
    .BVALID(s_axi_ctrl_bus_BVALID),
    .BREADY(s_axi_ctrl_bus_BREADY),
    .BRESP(s_axi_ctrl_bus_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .msg(msg),
    .len(len),
    .hash(hash)
);

sha256_INPUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_R_CACHE_VALUE ))
sha256_INPUT_r_m_axi_U(
    .AWVALID(m_axi_INPUT_r_AWVALID),
    .AWREADY(m_axi_INPUT_r_AWREADY),
    .AWADDR(m_axi_INPUT_r_AWADDR),
    .AWID(m_axi_INPUT_r_AWID),
    .AWLEN(m_axi_INPUT_r_AWLEN),
    .AWSIZE(m_axi_INPUT_r_AWSIZE),
    .AWBURST(m_axi_INPUT_r_AWBURST),
    .AWLOCK(m_axi_INPUT_r_AWLOCK),
    .AWCACHE(m_axi_INPUT_r_AWCACHE),
    .AWPROT(m_axi_INPUT_r_AWPROT),
    .AWQOS(m_axi_INPUT_r_AWQOS),
    .AWREGION(m_axi_INPUT_r_AWREGION),
    .AWUSER(m_axi_INPUT_r_AWUSER),
    .WVALID(m_axi_INPUT_r_WVALID),
    .WREADY(m_axi_INPUT_r_WREADY),
    .WDATA(m_axi_INPUT_r_WDATA),
    .WSTRB(m_axi_INPUT_r_WSTRB),
    .WLAST(m_axi_INPUT_r_WLAST),
    .WID(m_axi_INPUT_r_WID),
    .WUSER(m_axi_INPUT_r_WUSER),
    .ARVALID(m_axi_INPUT_r_ARVALID),
    .ARREADY(m_axi_INPUT_r_ARREADY),
    .ARADDR(m_axi_INPUT_r_ARADDR),
    .ARID(m_axi_INPUT_r_ARID),
    .ARLEN(m_axi_INPUT_r_ARLEN),
    .ARSIZE(m_axi_INPUT_r_ARSIZE),
    .ARBURST(m_axi_INPUT_r_ARBURST),
    .ARLOCK(m_axi_INPUT_r_ARLOCK),
    .ARCACHE(m_axi_INPUT_r_ARCACHE),
    .ARPROT(m_axi_INPUT_r_ARPROT),
    .ARQOS(m_axi_INPUT_r_ARQOS),
    .ARREGION(m_axi_INPUT_r_ARREGION),
    .ARUSER(m_axi_INPUT_r_ARUSER),
    .RVALID(m_axi_INPUT_r_RVALID),
    .RREADY(m_axi_INPUT_r_RREADY),
    .RDATA(m_axi_INPUT_r_RDATA),
    .RLAST(m_axi_INPUT_r_RLAST),
    .RID(m_axi_INPUT_r_RID),
    .RUSER(m_axi_INPUT_r_RUSER),
    .RRESP(m_axi_INPUT_r_RRESP),
    .BVALID(m_axi_INPUT_r_BVALID),
    .BREADY(m_axi_INPUT_r_BREADY),
    .BRESP(m_axi_INPUT_r_BRESP),
    .BID(m_axi_INPUT_r_BID),
    .BUSER(m_axi_INPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_r_ARVALID),
    .I_ARREADY(INPUT_r_ARREADY),
    .I_ARADDR(grp_sha256_hash_fu_135_m_axi_data_ARADDR),
    .I_ARID(grp_sha256_hash_fu_135_m_axi_data_ARID),
    .I_ARLEN(grp_sha256_hash_fu_135_m_axi_data_ARLEN),
    .I_ARSIZE(grp_sha256_hash_fu_135_m_axi_data_ARSIZE),
    .I_ARLOCK(grp_sha256_hash_fu_135_m_axi_data_ARLOCK),
    .I_ARCACHE(grp_sha256_hash_fu_135_m_axi_data_ARCACHE),
    .I_ARQOS(grp_sha256_hash_fu_135_m_axi_data_ARQOS),
    .I_ARPROT(grp_sha256_hash_fu_135_m_axi_data_ARPROT),
    .I_ARUSER(grp_sha256_hash_fu_135_m_axi_data_ARUSER),
    .I_ARBURST(grp_sha256_hash_fu_135_m_axi_data_ARBURST),
    .I_ARREGION(grp_sha256_hash_fu_135_m_axi_data_ARREGION),
    .I_RVALID(INPUT_r_RVALID),
    .I_RREADY(INPUT_r_RREADY),
    .I_RDATA(INPUT_r_RDATA),
    .I_RID(INPUT_r_RID),
    .I_RUSER(INPUT_r_RUSER),
    .I_RRESP(INPUT_r_RRESP),
    .I_RLAST(INPUT_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_r_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(INPUT_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_r_BRESP),
    .I_BID(INPUT_r_BID),
    .I_BUSER(INPUT_r_BUSER)
);

sha256_OUTPUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_R_CACHE_VALUE ))
sha256_OUTPUT_r_m_axi_U(
    .AWVALID(m_axi_OUTPUT_r_AWVALID),
    .AWREADY(m_axi_OUTPUT_r_AWREADY),
    .AWADDR(m_axi_OUTPUT_r_AWADDR),
    .AWID(m_axi_OUTPUT_r_AWID),
    .AWLEN(m_axi_OUTPUT_r_AWLEN),
    .AWSIZE(m_axi_OUTPUT_r_AWSIZE),
    .AWBURST(m_axi_OUTPUT_r_AWBURST),
    .AWLOCK(m_axi_OUTPUT_r_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_r_AWCACHE),
    .AWPROT(m_axi_OUTPUT_r_AWPROT),
    .AWQOS(m_axi_OUTPUT_r_AWQOS),
    .AWREGION(m_axi_OUTPUT_r_AWREGION),
    .AWUSER(m_axi_OUTPUT_r_AWUSER),
    .WVALID(m_axi_OUTPUT_r_WVALID),
    .WREADY(m_axi_OUTPUT_r_WREADY),
    .WDATA(m_axi_OUTPUT_r_WDATA),
    .WSTRB(m_axi_OUTPUT_r_WSTRB),
    .WLAST(m_axi_OUTPUT_r_WLAST),
    .WID(m_axi_OUTPUT_r_WID),
    .WUSER(m_axi_OUTPUT_r_WUSER),
    .ARVALID(m_axi_OUTPUT_r_ARVALID),
    .ARREADY(m_axi_OUTPUT_r_ARREADY),
    .ARADDR(m_axi_OUTPUT_r_ARADDR),
    .ARID(m_axi_OUTPUT_r_ARID),
    .ARLEN(m_axi_OUTPUT_r_ARLEN),
    .ARSIZE(m_axi_OUTPUT_r_ARSIZE),
    .ARBURST(m_axi_OUTPUT_r_ARBURST),
    .ARLOCK(m_axi_OUTPUT_r_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_r_ARCACHE),
    .ARPROT(m_axi_OUTPUT_r_ARPROT),
    .ARQOS(m_axi_OUTPUT_r_ARQOS),
    .ARREGION(m_axi_OUTPUT_r_ARREGION),
    .ARUSER(m_axi_OUTPUT_r_ARUSER),
    .RVALID(m_axi_OUTPUT_r_RVALID),
    .RREADY(m_axi_OUTPUT_r_RREADY),
    .RDATA(m_axi_OUTPUT_r_RDATA),
    .RLAST(m_axi_OUTPUT_r_RLAST),
    .RID(m_axi_OUTPUT_r_RID),
    .RUSER(m_axi_OUTPUT_r_RUSER),
    .RRESP(m_axi_OUTPUT_r_RRESP),
    .BVALID(m_axi_OUTPUT_r_BVALID),
    .BREADY(m_axi_OUTPUT_r_BREADY),
    .BRESP(m_axi_OUTPUT_r_BRESP),
    .BID(m_axi_OUTPUT_r_BID),
    .BUSER(m_axi_OUTPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_r_RDATA),
    .I_RID(OUTPUT_r_RID),
    .I_RUSER(OUTPUT_r_RUSER),
    .I_RRESP(OUTPUT_r_RRESP),
    .I_RLAST(OUTPUT_r_RLAST),
    .I_AWVALID(OUTPUT_r_AWVALID),
    .I_AWREADY(OUTPUT_r_AWREADY),
    .I_AWADDR(grp_sha256_done_fu_114_m_axi_hash_AWADDR),
    .I_AWID(grp_sha256_done_fu_114_m_axi_hash_AWID),
    .I_AWLEN(grp_sha256_done_fu_114_m_axi_hash_AWLEN),
    .I_AWSIZE(grp_sha256_done_fu_114_m_axi_hash_AWSIZE),
    .I_AWLOCK(grp_sha256_done_fu_114_m_axi_hash_AWLOCK),
    .I_AWCACHE(grp_sha256_done_fu_114_m_axi_hash_AWCACHE),
    .I_AWQOS(grp_sha256_done_fu_114_m_axi_hash_AWQOS),
    .I_AWPROT(grp_sha256_done_fu_114_m_axi_hash_AWPROT),
    .I_AWUSER(grp_sha256_done_fu_114_m_axi_hash_AWUSER),
    .I_AWBURST(grp_sha256_done_fu_114_m_axi_hash_AWBURST),
    .I_AWREGION(grp_sha256_done_fu_114_m_axi_hash_AWREGION),
    .I_WVALID(OUTPUT_r_WVALID),
    .I_WREADY(OUTPUT_r_WREADY),
    .I_WDATA(grp_sha256_done_fu_114_m_axi_hash_WDATA),
    .I_WID(grp_sha256_done_fu_114_m_axi_hash_WID),
    .I_WUSER(grp_sha256_done_fu_114_m_axi_hash_WUSER),
    .I_WLAST(grp_sha256_done_fu_114_m_axi_hash_WLAST),
    .I_WSTRB(grp_sha256_done_fu_114_m_axi_hash_WSTRB),
    .I_BVALID(OUTPUT_r_BVALID),
    .I_BREADY(OUTPUT_r_BREADY),
    .I_BRESP(OUTPUT_r_BRESP),
    .I_BID(OUTPUT_r_BID),
    .I_BUSER(OUTPUT_r_BUSER)
);

sha256_sha256_buf #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sha256_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sha256_buf_address0),
    .ce0(sha256_buf_ce0),
    .we0(sha256_buf_we0),
    .d0(sha256_buf_d0),
    .q0(sha256_buf_q0),
    .address1(sha256_buf_address1),
    .ce1(sha256_buf_ce1),
    .we1(sha256_buf_we1),
    .d1(grp_sha256_done_fu_114_sha256_buf_d1),
    .q1(sha256_buf_q1)
);

sha256_done grp_sha256_done_fu_114(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_done_fu_114_ap_start),
    .ap_done(grp_sha256_done_fu_114_ap_done),
    .ap_idle(grp_sha256_done_fu_114_ap_idle),
    .ap_ready(grp_sha256_done_fu_114_ap_ready),
    .sha256_buf_address0(grp_sha256_done_fu_114_sha256_buf_address0),
    .sha256_buf_ce0(grp_sha256_done_fu_114_sha256_buf_ce0),
    .sha256_buf_we0(grp_sha256_done_fu_114_sha256_buf_we0),
    .sha256_buf_d0(grp_sha256_done_fu_114_sha256_buf_d0),
    .sha256_buf_q0(sha256_buf_q0),
    .sha256_buf_address1(grp_sha256_done_fu_114_sha256_buf_address1),
    .sha256_buf_ce1(grp_sha256_done_fu_114_sha256_buf_ce1),
    .sha256_buf_we1(grp_sha256_done_fu_114_sha256_buf_we1),
    .sha256_buf_d1(grp_sha256_done_fu_114_sha256_buf_d1),
    .sha256_buf_q1(sha256_buf_q1),
    .sha256hash_0_read(sha256hash_0_reg_240),
    .sha256hash_1_read(sha256hash_1_reg_245),
    .sha256hash_2_read(sha256hash_2_reg_250),
    .sha256hash_3_read(sha256hash_3_reg_255),
    .sha256hash_4_read(sha256hash_4_reg_260),
    .sha256hash_5_read(sha256hash_5_reg_265),
    .sha256hash_6_read(sha256hash_6_reg_270),
    .sha256hash_7_read(sha256hash_7_reg_275),
    .sha256_bits_0_read(sha256_bits_0_reg_280),
    .sha256_bits_1_read(sha256_bits_1_reg_230),
    .sha256_len(sha256_len_0_reg_235),
    .m_axi_hash_AWVALID(grp_sha256_done_fu_114_m_axi_hash_AWVALID),
    .m_axi_hash_AWREADY(OUTPUT_r_AWREADY),
    .m_axi_hash_AWADDR(grp_sha256_done_fu_114_m_axi_hash_AWADDR),
    .m_axi_hash_AWID(grp_sha256_done_fu_114_m_axi_hash_AWID),
    .m_axi_hash_AWLEN(grp_sha256_done_fu_114_m_axi_hash_AWLEN),
    .m_axi_hash_AWSIZE(grp_sha256_done_fu_114_m_axi_hash_AWSIZE),
    .m_axi_hash_AWBURST(grp_sha256_done_fu_114_m_axi_hash_AWBURST),
    .m_axi_hash_AWLOCK(grp_sha256_done_fu_114_m_axi_hash_AWLOCK),
    .m_axi_hash_AWCACHE(grp_sha256_done_fu_114_m_axi_hash_AWCACHE),
    .m_axi_hash_AWPROT(grp_sha256_done_fu_114_m_axi_hash_AWPROT),
    .m_axi_hash_AWQOS(grp_sha256_done_fu_114_m_axi_hash_AWQOS),
    .m_axi_hash_AWREGION(grp_sha256_done_fu_114_m_axi_hash_AWREGION),
    .m_axi_hash_AWUSER(grp_sha256_done_fu_114_m_axi_hash_AWUSER),
    .m_axi_hash_WVALID(grp_sha256_done_fu_114_m_axi_hash_WVALID),
    .m_axi_hash_WREADY(OUTPUT_r_WREADY),
    .m_axi_hash_WDATA(grp_sha256_done_fu_114_m_axi_hash_WDATA),
    .m_axi_hash_WSTRB(grp_sha256_done_fu_114_m_axi_hash_WSTRB),
    .m_axi_hash_WLAST(grp_sha256_done_fu_114_m_axi_hash_WLAST),
    .m_axi_hash_WID(grp_sha256_done_fu_114_m_axi_hash_WID),
    .m_axi_hash_WUSER(grp_sha256_done_fu_114_m_axi_hash_WUSER),
    .m_axi_hash_ARVALID(grp_sha256_done_fu_114_m_axi_hash_ARVALID),
    .m_axi_hash_ARREADY(1'b0),
    .m_axi_hash_ARADDR(grp_sha256_done_fu_114_m_axi_hash_ARADDR),
    .m_axi_hash_ARID(grp_sha256_done_fu_114_m_axi_hash_ARID),
    .m_axi_hash_ARLEN(grp_sha256_done_fu_114_m_axi_hash_ARLEN),
    .m_axi_hash_ARSIZE(grp_sha256_done_fu_114_m_axi_hash_ARSIZE),
    .m_axi_hash_ARBURST(grp_sha256_done_fu_114_m_axi_hash_ARBURST),
    .m_axi_hash_ARLOCK(grp_sha256_done_fu_114_m_axi_hash_ARLOCK),
    .m_axi_hash_ARCACHE(grp_sha256_done_fu_114_m_axi_hash_ARCACHE),
    .m_axi_hash_ARPROT(grp_sha256_done_fu_114_m_axi_hash_ARPROT),
    .m_axi_hash_ARQOS(grp_sha256_done_fu_114_m_axi_hash_ARQOS),
    .m_axi_hash_ARREGION(grp_sha256_done_fu_114_m_axi_hash_ARREGION),
    .m_axi_hash_ARUSER(grp_sha256_done_fu_114_m_axi_hash_ARUSER),
    .m_axi_hash_RVALID(1'b0),
    .m_axi_hash_RREADY(grp_sha256_done_fu_114_m_axi_hash_RREADY),
    .m_axi_hash_RDATA(8'd0),
    .m_axi_hash_RLAST(1'b0),
    .m_axi_hash_RID(1'd0),
    .m_axi_hash_RUSER(1'd0),
    .m_axi_hash_RRESP(2'd0),
    .m_axi_hash_BVALID(OUTPUT_r_BVALID),
    .m_axi_hash_BREADY(grp_sha256_done_fu_114_m_axi_hash_BREADY),
    .m_axi_hash_BRESP(OUTPUT_r_BRESP),
    .m_axi_hash_BID(OUTPUT_r_BID),
    .m_axi_hash_BUSER(OUTPUT_r_BUSER),
    .hash_offset(hash_read_reg_207)
);

sha256_hash grp_sha256_hash_fu_135(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_hash_fu_135_ap_start),
    .ap_done(grp_sha256_hash_fu_135_ap_done),
    .ap_idle(grp_sha256_hash_fu_135_ap_idle),
    .ap_ready(grp_sha256_hash_fu_135_ap_ready),
    .sha256_buf_address0(grp_sha256_hash_fu_135_sha256_buf_address0),
    .sha256_buf_ce0(grp_sha256_hash_fu_135_sha256_buf_ce0),
    .sha256_buf_we0(grp_sha256_hash_fu_135_sha256_buf_we0),
    .sha256_buf_d0(grp_sha256_hash_fu_135_sha256_buf_d0),
    .sha256_buf_q0(sha256_buf_q0),
    .sha256_buf_address1(grp_sha256_hash_fu_135_sha256_buf_address1),
    .sha256_buf_ce1(grp_sha256_hash_fu_135_sha256_buf_ce1),
    .sha256_buf_q1(sha256_buf_q1),
    .m_axi_data_AWVALID(grp_sha256_hash_fu_135_m_axi_data_AWVALID),
    .m_axi_data_AWREADY(1'b0),
    .m_axi_data_AWADDR(grp_sha256_hash_fu_135_m_axi_data_AWADDR),
    .m_axi_data_AWID(grp_sha256_hash_fu_135_m_axi_data_AWID),
    .m_axi_data_AWLEN(grp_sha256_hash_fu_135_m_axi_data_AWLEN),
    .m_axi_data_AWSIZE(grp_sha256_hash_fu_135_m_axi_data_AWSIZE),
    .m_axi_data_AWBURST(grp_sha256_hash_fu_135_m_axi_data_AWBURST),
    .m_axi_data_AWLOCK(grp_sha256_hash_fu_135_m_axi_data_AWLOCK),
    .m_axi_data_AWCACHE(grp_sha256_hash_fu_135_m_axi_data_AWCACHE),
    .m_axi_data_AWPROT(grp_sha256_hash_fu_135_m_axi_data_AWPROT),
    .m_axi_data_AWQOS(grp_sha256_hash_fu_135_m_axi_data_AWQOS),
    .m_axi_data_AWREGION(grp_sha256_hash_fu_135_m_axi_data_AWREGION),
    .m_axi_data_AWUSER(grp_sha256_hash_fu_135_m_axi_data_AWUSER),
    .m_axi_data_WVALID(grp_sha256_hash_fu_135_m_axi_data_WVALID),
    .m_axi_data_WREADY(1'b0),
    .m_axi_data_WDATA(grp_sha256_hash_fu_135_m_axi_data_WDATA),
    .m_axi_data_WSTRB(grp_sha256_hash_fu_135_m_axi_data_WSTRB),
    .m_axi_data_WLAST(grp_sha256_hash_fu_135_m_axi_data_WLAST),
    .m_axi_data_WID(grp_sha256_hash_fu_135_m_axi_data_WID),
    .m_axi_data_WUSER(grp_sha256_hash_fu_135_m_axi_data_WUSER),
    .m_axi_data_ARVALID(grp_sha256_hash_fu_135_m_axi_data_ARVALID),
    .m_axi_data_ARREADY(INPUT_r_ARREADY),
    .m_axi_data_ARADDR(grp_sha256_hash_fu_135_m_axi_data_ARADDR),
    .m_axi_data_ARID(grp_sha256_hash_fu_135_m_axi_data_ARID),
    .m_axi_data_ARLEN(grp_sha256_hash_fu_135_m_axi_data_ARLEN),
    .m_axi_data_ARSIZE(grp_sha256_hash_fu_135_m_axi_data_ARSIZE),
    .m_axi_data_ARBURST(grp_sha256_hash_fu_135_m_axi_data_ARBURST),
    .m_axi_data_ARLOCK(grp_sha256_hash_fu_135_m_axi_data_ARLOCK),
    .m_axi_data_ARCACHE(grp_sha256_hash_fu_135_m_axi_data_ARCACHE),
    .m_axi_data_ARPROT(grp_sha256_hash_fu_135_m_axi_data_ARPROT),
    .m_axi_data_ARQOS(grp_sha256_hash_fu_135_m_axi_data_ARQOS),
    .m_axi_data_ARREGION(grp_sha256_hash_fu_135_m_axi_data_ARREGION),
    .m_axi_data_ARUSER(grp_sha256_hash_fu_135_m_axi_data_ARUSER),
    .m_axi_data_RVALID(INPUT_r_RVALID),
    .m_axi_data_RREADY(grp_sha256_hash_fu_135_m_axi_data_RREADY),
    .m_axi_data_RDATA(INPUT_r_RDATA),
    .m_axi_data_RLAST(INPUT_r_RLAST),
    .m_axi_data_RID(INPUT_r_RID),
    .m_axi_data_RUSER(INPUT_r_RUSER),
    .m_axi_data_RRESP(INPUT_r_RRESP),
    .m_axi_data_BVALID(1'b0),
    .m_axi_data_BREADY(grp_sha256_hash_fu_135_m_axi_data_BREADY),
    .m_axi_data_BRESP(2'd0),
    .m_axi_data_BID(1'd0),
    .m_axi_data_BUSER(1'd0),
    .data_offset(msg_read_reg_217),
    .len(len_read_reg_212),
    .ap_return_0(grp_sha256_hash_fu_135_ap_return_0),
    .ap_return_1(grp_sha256_hash_fu_135_ap_return_1),
    .ap_return_2(grp_sha256_hash_fu_135_ap_return_2),
    .ap_return_3(grp_sha256_hash_fu_135_ap_return_3),
    .ap_return_4(grp_sha256_hash_fu_135_ap_return_4),
    .ap_return_5(grp_sha256_hash_fu_135_ap_return_5),
    .ap_return_6(grp_sha256_hash_fu_135_ap_return_6),
    .ap_return_7(grp_sha256_hash_fu_135_ap_return_7),
    .ap_return_8(grp_sha256_hash_fu_135_ap_return_8),
    .ap_return_9(grp_sha256_hash_fu_135_ap_return_9),
    .ap_return_10(grp_sha256_hash_fu_135_ap_return_10)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_done_fu_114_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_sha256_done_fu_114_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_done_fu_114_ap_ready == 1'b1)) begin
            grp_sha256_done_fu_114_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_hash_fu_135_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_sha256_hash_fu_135_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_hash_fu_135_ap_ready == 1'b1)) begin
            grp_sha256_hash_fu_135_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_157_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        invdar_reg_103 <= indvarinc_fu_146_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        invdar_reg_103 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (hash_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (hash_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hash_0_vld_reg == 1'b1)))) begin
        hash_0_data_reg <= hash;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_read_reg_207 <= hash_0_data_reg;
        len_read_reg_212 <= len_0_data_reg;
        msg_read_reg_217 <= msg_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (len_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (len_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (len_0_vld_reg == 1'b1)))) begin
        len_0_data_reg <= len;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (msg_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (msg_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (msg_0_vld_reg == 1'b1)))) begin
        msg_0_data_reg <= msg;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_sha256_hash_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        sha256_bits_0_reg_280 <= grp_sha256_hash_fu_135_ap_return_10;
        sha256_bits_1_reg_230 <= grp_sha256_hash_fu_135_ap_return_1;
        sha256_len_0_reg_235 <= grp_sha256_hash_fu_135_ap_return_0;
        sha256hash_0_reg_240 <= grp_sha256_hash_fu_135_ap_return_2;
        sha256hash_1_reg_245 <= grp_sha256_hash_fu_135_ap_return_3;
        sha256hash_2_reg_250 <= grp_sha256_hash_fu_135_ap_return_4;
        sha256hash_3_reg_255 <= grp_sha256_hash_fu_135_ap_return_5;
        sha256hash_4_reg_260 <= grp_sha256_hash_fu_135_ap_return_6;
        sha256hash_5_reg_265 <= grp_sha256_hash_fu_135_ap_return_7;
        sha256hash_6_reg_270 <= grp_sha256_hash_fu_135_ap_return_8;
        sha256hash_7_reg_275 <= grp_sha256_hash_fu_135_ap_return_9;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_r_ARVALID = grp_sha256_hash_fu_135_m_axi_data_ARVALID;
    end else begin
        INPUT_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_r_RREADY = grp_sha256_hash_fu_135_m_axi_data_RREADY;
    end else begin
        INPUT_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_r_AWVALID = grp_sha256_done_fu_114_m_axi_hash_AWVALID;
    end else begin
        OUTPUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_r_BREADY = grp_sha256_done_fu_114_m_axi_hash_BREADY;
    end else begin
        OUTPUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_r_WVALID = grp_sha256_done_fu_114_m_axi_hash_WVALID;
    end else begin
        OUTPUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha256_done_fu_114_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha256_done_fu_114_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha256_done_fu_114_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        hash_0_ack_out = 1'b1;
    end else begin
        hash_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha256_done_fu_114_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        len_0_ack_out = 1'b1;
    end else begin
        len_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha256_done_fu_114_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        msg_0_ack_out = 1'b1;
    end else begin
        msg_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha256_buf_address0 = tmp_fu_152_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_address0 = grp_sha256_hash_fu_135_sha256_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_address0 = grp_sha256_done_fu_114_sha256_buf_address0;
    end else begin
        sha256_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_address1 = grp_sha256_hash_fu_135_sha256_buf_address1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_address1 = grp_sha256_done_fu_114_sha256_buf_address1;
    end else begin
        sha256_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha256_buf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_ce0 = grp_sha256_hash_fu_135_sha256_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_ce0 = grp_sha256_done_fu_114_sha256_buf_ce0;
    end else begin
        sha256_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_ce1 = grp_sha256_hash_fu_135_sha256_buf_ce1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_ce1 = grp_sha256_done_fu_114_sha256_buf_ce1;
    end else begin
        sha256_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha256_buf_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_d0 = grp_sha256_hash_fu_135_sha256_buf_d0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_d0 = grp_sha256_done_fu_114_sha256_buf_d0;
    end else begin
        sha256_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha256_buf_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sha256_buf_we0 = grp_sha256_hash_fu_135_sha256_buf_we0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_we0 = grp_sha256_done_fu_114_sha256_buf_we0;
    end else begin
        sha256_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sha256_buf_we1 = grp_sha256_done_fu_114_sha256_buf_we1;
    end else begin
        sha256_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_s_fu_157_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_sha256_hash_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_sha256_done_fu_114_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_sha256_done_fu_114_ap_start = grp_sha256_done_fu_114_ap_start_reg;

assign grp_sha256_hash_fu_135_ap_start = grp_sha256_hash_fu_135_ap_start_reg;

assign indvarinc_fu_146_p2 = (invdar_reg_103 + 6'd1);

assign tmp_fu_152_p1 = invdar_reg_103;

assign tmp_s_fu_157_p2 = ((invdar_reg_103 == 6'd63) ? 1'b1 : 1'b0);

endmodule //sha256
